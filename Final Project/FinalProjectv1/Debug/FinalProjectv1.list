
FinalProjectv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08009878  08009878  0000a878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c84  08009c84  0000b6e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c84  08009c84  0000ac84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c8c  08009c8c  0000b6e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009c8c  08009c8c  0000ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c94  08009c94  0000ac94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000006e0  20000000  08009c98  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200006e0  0800a378  0000b6e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  0800a378  0000bafc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b6e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e879  00000000  00000000  0000b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002172  00000000  00000000  00019f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  0001c100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a11  00000000  00000000  0001ce10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273c4  00000000  00000000  0001d821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105ce  00000000  00000000  00044be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ec202  00000000  00000000  000551b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001413b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004720  00000000  00000000  001413f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00145b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006e0 	.word	0x200006e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800985c 	.word	0x0800985c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006e4 	.word	0x200006e4
 80001cc:	0800985c 	.word	0x0800985c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <BH1750_Init>:
#include "BH1750_STM32.h"
#include <stdbool.h>

// Initialize sensor struct
void BH1750_Init(BH1750 *sensor, uint8_t addr, I2C_HandleTypeDef *hi2c) {
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	460b      	mov	r3, r1
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	72fb      	strb	r3, [r7, #11]
  sensor->addr = addr;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	7afa      	ldrb	r2, [r7, #11]
 8000ee6:	701a      	strb	r2, [r3, #0]
  sensor->hi2c = hi2c;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	605a      	str	r2, [r3, #4]
  sensor->mtreg = BH1750_DEFAULT_MTREG;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2245      	movs	r2, #69	@ 0x45
 8000ef2:	705a      	strb	r2, [r3, #1]
  sensor->mode = BH1750_UNCONFIGURED;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	709a      	strb	r2, [r3, #2]
  sensor->convFactor = 1.2f;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <BH1750_Init+0x38>)
 8000efe:	60da      	str	r2, [r3, #12]
}
 8000f00:	bf00      	nop
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	3f99999a 	.word	0x3f99999a

08000f10 <BH1750_Begin>:

// Begin communication
uint8_t BH1750_Begin(BH1750 *sensor, BH1750_Mode mode) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
  return (BH1750_Configure(sensor, mode) && BH1750_SetMTreg(sensor, BH1750_DEFAULT_MTREG));
 8000f1c:	78fb      	ldrb	r3, [r7, #3]
 8000f1e:	4619      	mov	r1, r3
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 f812 	bl	8000f4a <BH1750_Configure>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d008      	beq.n	8000f3e <BH1750_Begin+0x2e>
 8000f2c:	2145      	movs	r1, #69	@ 0x45
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 f838 	bl	8000fa4 <BH1750_SetMTreg>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <BH1750_Begin+0x2e>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <BH1750_Begin+0x30>
 8000f3e:	2300      	movs	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <BH1750_Configure>:

// Configure mode
uint8_t BH1750_Configure(BH1750 *sensor, BH1750_Mode mode) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af02      	add	r7, sp, #8
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	70fb      	strb	r3, [r7, #3]
  uint8_t cmd = (uint8_t)mode;
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	73bb      	strb	r3, [r7, #14]
  HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(sensor->hi2c, sensor->addr << 1, &cmd, 1, HAL_MAX_DELAY);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6858      	ldr	r0, [r3, #4]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b299      	uxth	r1, r3
 8000f66:	f107 020e 	add.w	r2, r7, #14
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	f001 fa27 	bl	80023c4 <HAL_I2C_Master_Transmit>
 8000f76:	4603      	mov	r3, r0
 8000f78:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK) return false;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <BH1750_Configure+0x3a>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e00b      	b.n	8000f9c <BH1750_Configure+0x52>

  HAL_Delay(10);
 8000f84:	200a      	movs	r0, #10
 8000f86:	f000 feb5 	bl	8001cf4 <HAL_Delay>
  sensor->mode = mode;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	78fa      	ldrb	r2, [r7, #3]
 8000f8e:	709a      	strb	r2, [r3, #2]
  sensor->lastReadTimestamp = HAL_GetTick();
 8000f90:	f000 fea4 	bl	8001cdc <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	609a      	str	r2, [r3, #8]
  return true;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <BH1750_SetMTreg>:

// Set MT register
uint8_t BH1750_SetMTreg(BH1750 *sensor, uint8_t mtreg) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	70fb      	strb	r3, [r7, #3]
  if (mtreg < BH1750_MTREG_MIN || mtreg > BH1750_MTREG_MAX) return false;
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2b1e      	cmp	r3, #30
 8000fb4:	d902      	bls.n	8000fbc <BH1750_SetMTreg+0x18>
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	2bff      	cmp	r3, #255	@ 0xff
 8000fba:	d101      	bne.n	8000fc0 <BH1750_SetMTreg+0x1c>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	e050      	b.n	8001062 <BH1750_SetMTreg+0xbe>

  uint8_t cmd1 = (0b01000 << 3) | (mtreg >> 5);
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	095b      	lsrs	r3, r3, #5
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
  uint8_t cmd2 = (0b011 << 5) | (mtreg & 0b11111);
 8000fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000fd2:	f003 031f 	and.w	r3, r3, #31
 8000fd6:	b25b      	sxtb	r3, r3
 8000fd8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	73bb      	strb	r3, [r7, #14]

  if (HAL_I2C_Master_Transmit(sensor->hi2c, sensor->addr << 1, &cmd1, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6858      	ldr	r0, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	b299      	uxth	r1, r3
 8000fee:	f107 020f 	add.w	r2, r7, #15
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f001 f9e3 	bl	80023c4 <HAL_I2C_Master_Transmit>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <BH1750_SetMTreg+0x64>
 8001004:	2300      	movs	r3, #0
 8001006:	e02c      	b.n	8001062 <BH1750_SetMTreg+0xbe>
  if (HAL_I2C_Master_Transmit(sensor->hi2c, sensor->addr << 1, &cmd2, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6858      	ldr	r0, [r3, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	b299      	uxth	r1, r3
 8001014:	f107 020e 	add.w	r2, r7, #14
 8001018:	f04f 33ff 	mov.w	r3, #4294967295
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2301      	movs	r3, #1
 8001020:	f001 f9d0 	bl	80023c4 <HAL_I2C_Master_Transmit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <BH1750_SetMTreg+0x8a>
 800102a:	2300      	movs	r3, #0
 800102c:	e019      	b.n	8001062 <BH1750_SetMTreg+0xbe>
  if (HAL_I2C_Master_Transmit(sensor->hi2c, sensor->addr << 1, (uint8_t*)&sensor->mode, 1, HAL_MAX_DELAY) != HAL_OK) return false;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6858      	ldr	r0, [r3, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b299      	uxth	r1, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	1c9a      	adds	r2, r3, #2
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	f001 f9bd 	bl	80023c4 <HAL_I2C_Master_Transmit>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <BH1750_SetMTreg+0xb0>
 8001050:	2300      	movs	r3, #0
 8001052:	e006      	b.n	8001062 <BH1750_SetMTreg+0xbe>

  HAL_Delay(10);
 8001054:	200a      	movs	r0, #10
 8001056:	f000 fe4d 	bl	8001cf4 <HAL_Delay>
  sensor->mtreg = mtreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	705a      	strb	r2, [r3, #1]
  return true;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <BH1750_MeasurementReady>:

// Check if measurement is ready
uint8_t BH1750_MeasurementReady(BH1750 *sensor, uint8_t maxWait) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	70fb      	strb	r3, [r7, #3]
  uint32_t delayTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  switch (sensor->mode) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	3b10      	subs	r3, #16
 8001082:	2b13      	cmp	r3, #19
 8001084:	d865      	bhi.n	8001152 <BH1750_MeasurementReady+0xe6>
 8001086:	a201      	add	r2, pc, #4	@ (adr r2, 800108c <BH1750_MeasurementReady+0x20>)
 8001088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800108c:	080010dd 	.word	0x080010dd
 8001090:	080010dd 	.word	0x080010dd
 8001094:	08001153 	.word	0x08001153
 8001098:	0800111b 	.word	0x0800111b
 800109c:	08001153 	.word	0x08001153
 80010a0:	08001153 	.word	0x08001153
 80010a4:	08001153 	.word	0x08001153
 80010a8:	08001153 	.word	0x08001153
 80010ac:	08001153 	.word	0x08001153
 80010b0:	08001153 	.word	0x08001153
 80010b4:	08001153 	.word	0x08001153
 80010b8:	08001153 	.word	0x08001153
 80010bc:	08001153 	.word	0x08001153
 80010c0:	08001153 	.word	0x08001153
 80010c4:	08001153 	.word	0x08001153
 80010c8:	08001153 	.word	0x08001153
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	080010dd 	.word	0x080010dd
 80010d4:	08001153 	.word	0x08001153
 80010d8:	0800111b 	.word	0x0800111b
    case BH1750_CONTINUOUS_HIGH_RES_MODE:
    case BH1750_CONTINUOUS_HIGH_RES_MODE_2:
    case BH1750_ONE_TIME_HIGH_RES_MODE:
    case BH1750_ONE_TIME_HIGH_RES_MODE_2:
      delayTime = maxWait ? 180 * sensor->mtreg / BH1750_DEFAULT_MTREG : 120 * sensor->mtreg / BH1750_DEFAULT_MTREG;
 80010dc:	78fb      	ldrb	r3, [r7, #3]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d00c      	beq.n	80010fc <BH1750_MeasurementReady+0x90>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	461a      	mov	r2, r3
 80010e8:	23b4      	movs	r3, #180	@ 0xb4
 80010ea:	fb02 f303 	mul.w	r3, r2, r3
 80010ee:	4a22      	ldr	r2, [pc, #136]	@ (8001178 <BH1750_MeasurementReady+0x10c>)
 80010f0:	fb82 1203 	smull	r1, r2, r2, r3
 80010f4:	1152      	asrs	r2, r2, #5
 80010f6:	17db      	asrs	r3, r3, #31
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	e00c      	b.n	8001116 <BH1750_MeasurementReady+0xaa>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	785b      	ldrb	r3, [r3, #1]
 8001100:	461a      	mov	r2, r3
 8001102:	4613      	mov	r3, r2
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <BH1750_MeasurementReady+0x10c>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	1152      	asrs	r2, r2, #5
 8001112:	17db      	asrs	r3, r3, #31
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	60fb      	str	r3, [r7, #12]
      break;
 8001118:	e01d      	b.n	8001156 <BH1750_MeasurementReady+0xea>
    case BH1750_CONTINUOUS_LOW_RES_MODE:
    case BH1750_ONE_TIME_LOW_RES_MODE:
      delayTime = maxWait ? 24 * sensor->mtreg / BH1750_DEFAULT_MTREG : 16 * sensor->mtreg / BH1750_DEFAULT_MTREG;
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00d      	beq.n	800113c <BH1750_MeasurementReady+0xd0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	785b      	ldrb	r3, [r3, #1]
 8001124:	461a      	mov	r2, r3
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <BH1750_MeasurementReady+0x10c>)
 8001130:	fb82 1203 	smull	r1, r2, r2, r3
 8001134:	1152      	asrs	r2, r2, #5
 8001136:	17db      	asrs	r3, r3, #31
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	e008      	b.n	800114e <BH1750_MeasurementReady+0xe2>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	785b      	ldrb	r3, [r3, #1]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <BH1750_MeasurementReady+0x10c>)
 8001144:	fb82 1203 	smull	r1, r2, r2, r3
 8001148:	1152      	asrs	r2, r2, #5
 800114a:	17db      	asrs	r3, r3, #31
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	60fb      	str	r3, [r7, #12]
      break;
 8001150:	e001      	b.n	8001156 <BH1750_MeasurementReady+0xea>
    default: return false;
 8001152:	2300      	movs	r3, #0
 8001154:	e00b      	b.n	800116e <BH1750_MeasurementReady+0x102>
  }
  return (HAL_GetTick() - sensor->lastReadTimestamp) >= delayTime;
 8001156:	f000 fdc1 	bl	8001cdc <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	bf94      	ite	ls
 8001168:	2301      	movls	r3, #1
 800116a:	2300      	movhi	r3, #0
 800116c:	b2db      	uxtb	r3, r3
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	76b981db 	.word	0x76b981db

0800117c <BH1750_ReadLightLevel>:

// Read light level
float BH1750_ReadLightLevel(BH1750 *sensor) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
  if (sensor->mode == BH1750_UNCONFIGURED) return -2.0f;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	789b      	ldrb	r3, [r3, #2]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <BH1750_ReadLightLevel+0x16>
 800118c:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001190:	e055      	b.n	800123e <BH1750_ReadLightLevel+0xc2>

  uint8_t data[2];
  if (HAL_I2C_Master_Receive(sensor->hi2c, sensor->addr << 1, data, 2, HAL_MAX_DELAY) != HAL_OK) return -1.0f;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6858      	ldr	r0, [r3, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	b299      	uxth	r1, r3
 800119e:	f107 0208 	add.w	r2, r7, #8
 80011a2:	f04f 33ff 	mov.w	r3, #4294967295
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	f001 fa23 	bl	80025f4 <HAL_I2C_Master_Receive>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <BH1750_ReadLightLevel+0x3c>
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <BH1750_ReadLightLevel+0xd0>)
 80011b6:	e042      	b.n	800123e <BH1750_ReadLightLevel+0xc2>

  uint16_t raw = (data[0] << 8) | data[1];
 80011b8:	7a3b      	ldrb	r3, [r7, #8]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	021b      	lsls	r3, r3, #8
 80011be:	b21a      	sxth	r2, r3
 80011c0:	7a7b      	ldrb	r3, [r7, #9]
 80011c2:	b21b      	sxth	r3, r3
 80011c4:	4313      	orrs	r3, r2
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	817b      	strh	r3, [r7, #10]
  float level = raw;
 80011ca:	897b      	ldrh	r3, [r7, #10]
 80011cc:	ee07 3a90 	vmov	s15, r3
 80011d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (sensor->mtreg != BH1750_DEFAULT_MTREG) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	785b      	ldrb	r3, [r3, #1]
 80011dc:	2b45      	cmp	r3, #69	@ 0x45
 80011de:	d00f      	beq.n	8001200 <BH1750_ReadLightLevel+0x84>
    level *= (BH1750_DEFAULT_MTREG / (float)sensor->mtreg);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	785b      	ldrb	r3, [r3, #1]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ec:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001250 <BH1750_ReadLightLevel+0xd4>
 80011f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f4:	ed97 7a03 	vldr	s14, [r7, #12]
 80011f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fc:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  if (sensor->mode == BH1750_ONE_TIME_HIGH_RES_MODE_2 || sensor->mode == BH1750_CONTINUOUS_HIGH_RES_MODE_2) {
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	789b      	ldrb	r3, [r3, #2]
 8001204:	2b21      	cmp	r3, #33	@ 0x21
 8001206:	d003      	beq.n	8001210 <BH1750_ReadLightLevel+0x94>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	789b      	ldrb	r3, [r3, #2]
 800120c:	2b11      	cmp	r3, #17
 800120e:	d107      	bne.n	8001220 <BH1750_ReadLightLevel+0xa4>
    level /= 2;
 8001210:	ed97 7a03 	vldr	s14, [r7, #12]
 8001214:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001218:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800121c:	edc7 7a03 	vstr	s15, [r7, #12]
  }

  level /= sensor->convFactor;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	ed93 7a03 	vldr	s14, [r3, #12]
 8001226:	edd7 6a03 	vldr	s13, [r7, #12]
 800122a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122e:	edc7 7a03 	vstr	s15, [r7, #12]
  sensor->lastReadTimestamp = HAL_GetTick();
 8001232:	f000 fd53 	bl	8001cdc <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	609a      	str	r2, [r3, #8]
  return level;
 800123c:	68fb      	ldr	r3, [r7, #12]
}
 800123e:	ee07 3a90 	vmov	s15, r3
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	bf800000 	.word	0xbf800000
 8001250:	428a0000 	.word	0x428a0000

08001254 <LCD_STROBE>:
// D6 to PA10
// D7 to PA11
//

// LCD C Code:
void LCD_STROBE() {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2180      	movs	r1, #128	@ 0x80
 800125c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001260:	f000 fffc 	bl	800225c <HAL_GPIO_WritePin>
    HAL_Delay(0.1);
 8001264:	2000      	movs	r0, #0
 8001266:	f000 fd45 	bl	8001cf4 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, LCD_EN, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2180      	movs	r1, #128	@ 0x80
 800126e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001272:	f000 fff3 	bl	800225c <HAL_GPIO_WritePin>
    HAL_Delay(0.1);
 8001276:	2000      	movs	r0, #0
 8001278:	f000 fd3c 	bl	8001cf4 <HAL_Delay>
}
 800127c:	bf00      	nop
 800127e:	bd80      	pop	{r7, pc}

08001280 <lcd_write_cmd>:

// Send a command to the LCD
void lcd_write_cmd(unsigned char c) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
    unsigned int d = c;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	60fb      	str	r3, [r7, #12]
    d = (d << 4) & 0x0F00;  // Extract upper nibble
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001296:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = d;         // Output to GPIOA
 8001298:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(GPIOA, LCD_RS, GPIO_PIN_RESET);  // Clear RS
 80012a0:	2200      	movs	r2, #0
 80012a2:	2140      	movs	r1, #64	@ 0x40
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a8:	f000 ffd8 	bl	800225c <HAL_GPIO_WritePin>
    LCD_STROBE();           // Clock enable bit
 80012ac:	f7ff ffd2 	bl	8001254 <LCD_STROBE>

    d = c;
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	60fb      	str	r3, [r7, #12]
    d = (d << 8) & 0x0F00;  // Extract lower nibble
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012bc:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = d;         // Output to GPIOA
 80012be:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(GPIOA, LCD_RS, GPIO_PIN_RESET);  // Clear RS
 80012c6:	2200      	movs	r2, #0
 80012c8:	2140      	movs	r1, #64	@ 0x40
 80012ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012ce:	f000 ffc5 	bl	800225c <HAL_GPIO_WritePin>
    LCD_STROBE();           // Clock enable bit
 80012d2:	f7ff ffbf 	bl	8001254 <LCD_STROBE>

    HAL_Delay(0.1);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fd0c 	bl	8001cf4 <HAL_Delay>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <lcd_write_data>:

// Send data to the LCD
void lcd_write_data(unsigned char c) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
    unsigned int d = c;
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	60fb      	str	r3, [r7, #12]
    d = (d << 4) & 0x0F00;  // Extract upper nibble
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	011b      	lsls	r3, r3, #4
 80012f6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80012fa:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = d;         // Output to GPIOA
 80012fc:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(GPIOA, LCD_RS, GPIO_PIN_SET);  // Set RS HIGH
 8001304:	2201      	movs	r2, #1
 8001306:	2140      	movs	r1, #64	@ 0x40
 8001308:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800130c:	f000 ffa6 	bl	800225c <HAL_GPIO_WritePin>
    LCD_STROBE();           // Clock enable bit
 8001310:	f7ff ffa0 	bl	8001254 <LCD_STROBE>

    d = c;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	60fb      	str	r3, [r7, #12]
    d = (d << 8) & 0x0F00;  // Extract lower nibble
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001320:	60fb      	str	r3, [r7, #12]
    GPIOA->ODR = d;         // Output to GPIOA
 8001322:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6153      	str	r3, [r2, #20]
    HAL_GPIO_WritePin(GPIOA, LCD_RS, GPIO_PIN_SET);  // Set RS HIGH
 800132a:	2201      	movs	r2, #1
 800132c:	2140      	movs	r1, #64	@ 0x40
 800132e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001332:	f000 ff93 	bl	800225c <HAL_GPIO_WritePin>
    LCD_STROBE();           // Clock enable bit
 8001336:	f7ff ff8d 	bl	8001254 <LCD_STROBE>
}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <lcd_clear>:

// Clear LCD
void lcd_clear(void) {
 8001342:	b580      	push	{r7, lr}
 8001344:	af00      	add	r7, sp, #0
    lcd_write_cmd(0x1);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ff9a 	bl	8001280 <lcd_write_cmd>
    HAL_Delay(5);
 800134c:	2005      	movs	r0, #5
 800134e:	f000 fcd1 	bl	8001cf4 <HAL_Delay>
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}

08001356 <lcd_puts>:

// Display text message on LCD
void lcd_puts(const char *s) {
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
    while (*s) {
 800135e:	e006      	b.n	800136e <lcd_puts+0x18>
        lcd_write_data(*s++);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ffbb 	bl	80012e4 <lcd_write_data>
    while (*s) {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f4      	bne.n	8001360 <lcd_puts+0xa>
    }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <lcd_goto>:
    HAL_GPIO_WritePin(GPIOA, LCD_RS, GPIO_PIN_SET);
    LCD_STROBE();
}

// Position the cursor at column, row
void lcd_goto(int col, int row) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    char address;
    if (row == 0) address = 0;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d101      	bne.n	8001394 <lcd_goto+0x14>
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
    if (row == 1) address = 0x40;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d101      	bne.n	800139e <lcd_goto+0x1e>
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	73fb      	strb	r3, [r7, #15]
    address += col - 1;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4413      	add	r3, r2
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	3b01      	subs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
    lcd_write_cmd(0x80 | address);
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff63 	bl	8001280 <lcd_write_cmd>
}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <lcd_init>:

// Initialize the LCD
void lcd_init(void) {
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
    GPIOA->ODR = 0;
 80013c6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
    HAL_Delay(50);
 80013ce:	2032      	movs	r0, #50	@ 0x32
 80013d0:	f000 fc90 	bl	8001cf4 <HAL_Delay>

    GPIOA->ODR = 0x0300;
 80013d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80013d8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80013dc:	615a      	str	r2, [r3, #20]
    LCD_STROBE();
 80013de:	f7ff ff39 	bl	8001254 <LCD_STROBE>
    HAL_Delay(30);
 80013e2:	201e      	movs	r0, #30
 80013e4:	f000 fc86 	bl	8001cf4 <HAL_Delay>
    LCD_STROBE();
 80013e8:	f7ff ff34 	bl	8001254 <LCD_STROBE>
    HAL_Delay(20);
 80013ec:	2014      	movs	r0, #20
 80013ee:	f000 fc81 	bl	8001cf4 <HAL_Delay>
    LCD_STROBE();
 80013f2:	f7ff ff2f 	bl	8001254 <LCD_STROBE>
    HAL_Delay(20);
 80013f6:	2014      	movs	r0, #20
 80013f8:	f000 fc7c 	bl	8001cf4 <HAL_Delay>

    GPIOA->ODR = 0x0200;
 80013fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001400:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001404:	615a      	str	r2, [r3, #20]
    LCD_STROBE();
 8001406:	f7ff ff25 	bl	8001254 <LCD_STROBE>
    HAL_Delay(5);
 800140a:	2005      	movs	r0, #5
 800140c:	f000 fc72 	bl	8001cf4 <HAL_Delay>

    lcd_write_cmd(0x28);
 8001410:	2028      	movs	r0, #40	@ 0x28
 8001412:	f7ff ff35 	bl	8001280 <lcd_write_cmd>
    HAL_Delay(5);
 8001416:	2005      	movs	r0, #5
 8001418:	f000 fc6c 	bl	8001cf4 <HAL_Delay>
    lcd_write_cmd(0x0F);
 800141c:	200f      	movs	r0, #15
 800141e:	f7ff ff2f 	bl	8001280 <lcd_write_cmd>
    HAL_Delay(5);
 8001422:	2005      	movs	r0, #5
 8001424:	f000 fc66 	bl	8001cf4 <HAL_Delay>
    lcd_write_cmd(0x01);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ff29 	bl	8001280 <lcd_write_cmd>
    HAL_Delay(5);
 800142e:	2005      	movs	r0, #5
 8001430:	f000 fc60 	bl	8001cf4 <HAL_Delay>
    lcd_write_cmd(0x06);
 8001434:	2006      	movs	r0, #6
 8001436:	f7ff ff23 	bl	8001280 <lcd_write_cmd>
    HAL_Delay(5);
 800143a:	2005      	movs	r0, #5
 800143c:	f000 fc5a 	bl	8001cf4 <HAL_Delay>
}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b09c      	sub	sp, #112	@ 0x70
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144a:	f000 fbd7 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144e:	f000 f8a7 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001452:	f000 f967 	bl	8001724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001456:	f000 f935 	bl	80016c4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800145a:	f000 f8f3 	bl	8001644 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BH1750_Init(&mySensor, 0x23, &hi2c1);
 800145e:	4a48      	ldr	r2, [pc, #288]	@ (8001580 <main+0x13c>)
 8001460:	2123      	movs	r1, #35	@ 0x23
 8001462:	4848      	ldr	r0, [pc, #288]	@ (8001584 <main+0x140>)
 8001464:	f7ff fd36 	bl	8000ed4 <BH1750_Init>
  lcd_init();
 8001468:	f7ff ffab 	bl	80013c2 <lcd_init>
  lcd_clear();
 800146c:	f7ff ff69 	bl	8001342 <lcd_clear>


  // Start measurement
  if (!BH1750_Begin(&mySensor, BH1750_CONTINUOUS_HIGH_RES_MODE_2)) {
 8001470:	2111      	movs	r1, #17
 8001472:	4844      	ldr	r0, [pc, #272]	@ (8001584 <main+0x140>)
 8001474:	f7ff fd4c 	bl	8000f10 <BH1750_Begin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <main+0x3e>
	  Error_Handler();
 800147e:	f000 f9a7 	bl	80017d0 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* Start time measurement */
	  uint32_t startTick = HAL_GetTick();
 8001482:	f000 fc2b 	bl	8001cdc <HAL_GetTick>
 8001486:	6678      	str	r0, [r7, #100]	@ 0x64

	  /* Clear LCD Screen */
	  lcd_clear();
 8001488:	f7ff ff5b 	bl	8001342 <lcd_clear>

	  if (BH1750_MeasurementReady(&mySensor, 0)) {
 800148c:	2100      	movs	r1, #0
 800148e:	483d      	ldr	r0, [pc, #244]	@ (8001584 <main+0x140>)
 8001490:	f7ff fdec 	bl	800106c <BH1750_MeasurementReady>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d056      	beq.n	8001548 <main+0x104>
	  	      float lux = BH1750_ReadLightLevel(&mySensor);
 800149a:	483a      	ldr	r0, [pc, #232]	@ (8001584 <main+0x140>)
 800149c:	f7ff fe6e 	bl	800117c <BH1750_ReadLightLevel>
 80014a0:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
	  	      uint8_t buf[50]; // Buffer to hold formatted text

	  	      /* Format the light value into the buffer */
	  	      sprintf((char*)buf, "Light: %.2f lux\r\n", lux);
 80014a4:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80014a6:	f7ff f84f 	bl	8000548 <__aeabi_f2d>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4638      	mov	r0, r7
 80014b0:	4935      	ldr	r1, [pc, #212]	@ (8001588 <main+0x144>)
 80014b2:	f003 fe61 	bl	8005178 <sprintf>

	  	      /* Transmit the entire string over UART */
	  	      HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80014b6:	463b      	mov	r3, r7
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe fe89 	bl	80001d0 <strlen>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	4639      	mov	r1, r7
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295
 80014c8:	4830      	ldr	r0, [pc, #192]	@ (800158c <main+0x148>)
 80014ca:	f003 f835 	bl	8004538 <HAL_UART_Transmit>

	  	      /* Put Reading on LCD */
	  	      char lcd_buf[20];
	  	      sprintf(lcd_buf, "Lux: %.2f", lux);
 80014ce:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80014dc:	492c      	ldr	r1, [pc, #176]	@ (8001590 <main+0x14c>)
 80014de:	f003 fe4b 	bl	8005178 <sprintf>

	  	      lcd_goto(0,0);
 80014e2:	2100      	movs	r1, #0
 80014e4:	2000      	movs	r0, #0
 80014e6:	f7ff ff4b 	bl	8001380 <lcd_goto>
	  	      lcd_puts(lcd_buf);
 80014ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff31 	bl	8001356 <lcd_puts>

	  	      /* Display Reading on LED Array */
	  	      int num_leds = 1 + (int)(lux / 5000.0f); // 1 LED per 5000 lux
 80014f4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80014f8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001594 <main+0x150>
 80014fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001504:	ee17 3a90 	vmov	r3, s15
 8001508:	3301      	adds	r3, #1
 800150a:	66fb      	str	r3, [r7, #108]	@ 0x6c

	  	      if (num_leds > 6) {
 800150c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800150e:	2b06      	cmp	r3, #6
 8001510:	dd01      	ble.n	8001516 <main+0xd2>
	  	    	  num_leds = 6; // Cap at 6 LEDs
 8001512:	2306      	movs	r3, #6
 8001514:	66fb      	str	r3, [r7, #108]	@ 0x6c
	  	      }

	  	      // Turn off all LEDs first
			  HAL_GPIO_WritePin(GPIOB,
 8001516:	2200      	movs	r2, #0
 8001518:	213f      	movs	r1, #63	@ 0x3f
 800151a:	481f      	ldr	r0, [pc, #124]	@ (8001598 <main+0x154>)
 800151c:	f000 fe9e 	bl	800225c <HAL_GPIO_WritePin>
				  myled1 | myled2 | myled3 | myled4 | myled5 | myled6,
				  GPIO_PIN_RESET);

	  	      // Light up LEDs up to num_leds
	  	      for (int i = 0; i < num_leds; i++) {
 8001520:	2300      	movs	r3, #0
 8001522:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001524:	e00c      	b.n	8001540 <main+0xfc>
	  	    	  HAL_GPIO_WritePin(GPIOB, myled1 << i, GPIO_PIN_SET);
 8001526:	2201      	movs	r2, #1
 8001528:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	2201      	movs	r2, #1
 8001532:	4619      	mov	r1, r3
 8001534:	4818      	ldr	r0, [pc, #96]	@ (8001598 <main+0x154>)
 8001536:	f000 fe91 	bl	800225c <HAL_GPIO_WritePin>
	  	      for (int i = 0; i < num_leds; i++) {
 800153a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800153c:	3301      	adds	r3, #1
 800153e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001540:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001542:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001544:	429a      	cmp	r2, r3
 8001546:	dbee      	blt.n	8001526 <main+0xe2>
	  	      }
	  }

	  // Calculate elapsed time
	  uint32_t elapsedTime = HAL_GetTick() - startTick;
 8001548:	f000 fbc8 	bl	8001cdc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	65fb      	str	r3, [r7, #92]	@ 0x5c

	  // Display elapsed time on LCD second line
	  char time_buf[20];
	  sprintf(time_buf, "Time: %3lu ms   ", elapsedTime); // Fixed width for alignment
 8001554:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001558:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800155a:	4910      	ldr	r1, [pc, #64]	@ (800159c <main+0x158>)
 800155c:	4618      	mov	r0, r3
 800155e:	f003 fe0b 	bl	8005178 <sprintf>
	  lcd_goto(0, 1); // Column 0, Row 1 (second line)
 8001562:	2101      	movs	r1, #1
 8001564:	2000      	movs	r0, #0
 8001566:	f7ff ff0b 	bl	8001380 <lcd_goto>
	  lcd_puts(time_buf);
 800156a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fef1 	bl	8001356 <lcd_puts>

	  HAL_Delay(500);
 8001574:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001578:	f000 fbbc 	bl	8001cf4 <HAL_Delay>
  {
 800157c:	e781      	b.n	8001482 <main+0x3e>
 800157e:	bf00      	nop
 8001580:	2000070c 	.word	0x2000070c
 8001584:	200006fc 	.word	0x200006fc
 8001588:	08009878 	.word	0x08009878
 800158c:	20000760 	.word	0x20000760
 8001590:	0800988c 	.word	0x0800988c
 8001594:	459c4000 	.word	0x459c4000
 8001598:	48000400 	.word	0x48000400
 800159c:	08009898 	.word	0x08009898

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	@ 0x58
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2244      	movs	r2, #68	@ 0x44
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fe47 	bl	8005242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015c6:	f001 fc57 	bl	8002e78 <HAL_PWREx_ControlVoltageScaling>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d0:	f000 f8fe 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d4:	2302      	movs	r3, #2
 80015d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015de:	2310      	movs	r3, #16
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e6:	2302      	movs	r3, #2
 80015e8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ea:	2301      	movs	r3, #1
 80015ec:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015ee:	230a      	movs	r3, #10
 80015f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015f2:	2307      	movs	r3, #7
 80015f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015fa:	2302      	movs	r3, #2
 80015fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	f107 0314 	add.w	r3, r7, #20
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fc8e 	bl	8002f24 <HAL_RCC_OscConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800160e:	f000 f8df 	bl	80017d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001612:	230f      	movs	r3, #15
 8001614:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001616:	2303      	movs	r3, #3
 8001618:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	2104      	movs	r1, #4
 800162a:	4618      	mov	r0, r3
 800162c:	f002 f856 	bl	80036dc <HAL_RCC_ClockConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001636:	f000 f8cb 	bl	80017d0 <Error_Handler>
  }
}
 800163a:	bf00      	nop
 800163c:	3758      	adds	r7, #88	@ 0x58
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <MX_I2C1_Init+0x74>)
 800164a:	4a1c      	ldr	r2, [pc, #112]	@ (80016bc <MX_I2C1_Init+0x78>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800164e:	4b1a      	ldr	r3, [pc, #104]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001650:	4a1b      	ldr	r2, [pc, #108]	@ (80016c0 <MX_I2C1_Init+0x7c>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001654:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <MX_I2C1_Init+0x74>)
 800165c:	2201      	movs	r2, #1
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800166c:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167e:	480e      	ldr	r0, [pc, #56]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001680:	f000 fe04 	bl	800228c <HAL_I2C_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168a:	f000 f8a1 	bl	80017d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4809      	ldr	r0, [pc, #36]	@ (80016b8 <MX_I2C1_Init+0x74>)
 8001692:	f001 fb4b 	bl	8002d2c <HAL_I2CEx_ConfigAnalogFilter>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800169c:	f000 f898 	bl	80017d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	@ (80016b8 <MX_I2C1_Init+0x74>)
 80016a4:	f001 fb8d 	bl	8002dc2 <HAL_I2CEx_ConfigDigitalFilter>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f000 f88f 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000070c 	.word	0x2000070c
 80016bc:	40005400 	.word	0x40005400
 80016c0:	10d19ce4 	.word	0x10d19ce4

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b14      	ldr	r3, [pc, #80]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016ca:	4a15      	ldr	r2, [pc, #84]	@ (8001720 <MX_USART2_UART_Init+0x5c>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b11      	ldr	r3, [pc, #68]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b0f      	ldr	r3, [pc, #60]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f4:	4b09      	ldr	r3, [pc, #36]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	@ (800171c <MX_USART2_UART_Init+0x58>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_USART2_UART_Init+0x58>)
 8001702:	2200      	movs	r2, #0
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_USART2_UART_Init+0x58>)
 8001708:	f002 fec8 	bl	800449c <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001712:	f000 f85d 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000760 	.word	0x20000760
 8001720:	40004400 	.word	0x40004400

08001724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	4b23      	ldr	r3, [pc, #140]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173e:	4a22      	ldr	r2, [pc, #136]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001756:	4a1c      	ldr	r2, [pc, #112]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175e:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <MX_GPIO_Init+0xa4>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 617c 	mov.w	r1, #4032	@ 0xfc0
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f000 fd72 	bl	800225c <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001778:	2200      	movs	r2, #0
 800177a:	213f      	movs	r1, #63	@ 0x3f
 800177c:	4813      	ldr	r0, [pc, #76]	@ (80017cc <MX_GPIO_Init+0xa8>)
 800177e:	f000 fd6d 	bl	800225c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA6 PA7 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8001782:	f44f 637c 	mov.w	r3, #4032	@ 0xfc0
 8001786:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800179e:	f000 fbb3 	bl	8001f08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80017a2:	233f      	movs	r3, #63	@ 0x3f
 80017a4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_GPIO_Init+0xa8>)
 80017ba:	f000 fba5 	bl	8001f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3720      	adds	r7, #32
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40021000 	.word	0x40021000
 80017cc:	48000400 	.word	0x48000400

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
}
 80017d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <Error_Handler+0x8>

080017dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001820 <HAL_MspInit+0x44>)
 80017e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_MspInit+0x44>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_MspInit+0x44>)
 80017f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	@ (8001820 <HAL_MspInit+0x44>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fe:	4a08      	ldr	r2, [pc, #32]	@ (8001820 <HAL_MspInit+0x44>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001804:	6593      	str	r3, [r2, #88]	@ 0x58
 8001806:	4b06      	ldr	r3, [pc, #24]	@ (8001820 <HAL_MspInit+0x44>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800180a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b0ac      	sub	sp, #176	@ 0xb0
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2288      	movs	r2, #136	@ 0x88
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f003 fcfc 	bl	8005242 <memset>
  if(hi2c->Instance==I2C1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a21      	ldr	r2, [pc, #132]	@ (80018d4 <HAL_I2C_MspInit+0xb0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d13b      	bne.n	80018cc <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001854:	2340      	movs	r3, #64	@ 0x40
 8001856:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001858:	2300      	movs	r3, #0
 800185a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	4618      	mov	r0, r3
 8001862:	f002 f95f 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800186c:	f7ff ffb0 	bl	80017d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	4b19      	ldr	r3, [pc, #100]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 8001872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001874:	4a18      	ldr	r2, [pc, #96]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187c:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 800187e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001888:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800188c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001890:	2312      	movs	r3, #18
 8001892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a2:	2304      	movs	r3, #4
 80018a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018ac:	4619      	mov	r1, r3
 80018ae:	480b      	ldr	r0, [pc, #44]	@ (80018dc <HAL_I2C_MspInit+0xb8>)
 80018b0:	f000 fb2a 	bl	8001f08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018b8:	4a07      	ldr	r2, [pc, #28]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 80018ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018be:	6593      	str	r3, [r2, #88]	@ 0x58
 80018c0:	4b05      	ldr	r3, [pc, #20]	@ (80018d8 <HAL_I2C_MspInit+0xb4>)
 80018c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80018cc:	bf00      	nop
 80018ce:	37b0      	adds	r7, #176	@ 0xb0
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40005400 	.word	0x40005400
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400

080018e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0ac      	sub	sp, #176	@ 0xb0
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2288      	movs	r2, #136	@ 0x88
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f003 fc9e 	bl	8005242 <memset>
  if(huart->Instance==USART2)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a21      	ldr	r2, [pc, #132]	@ (8001990 <HAL_UART_MspInit+0xb0>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d13b      	bne.n	8001988 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001910:	2302      	movs	r3, #2
 8001912:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001914:	2300      	movs	r3, #0
 8001916:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4618      	mov	r0, r3
 800191e:	f002 f901 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001928:	f7ff ff52 	bl	80017d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800192c:	4b19      	ldr	r3, [pc, #100]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001930:	4a18      	ldr	r2, [pc, #96]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 8001932:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001936:	6593      	str	r3, [r2, #88]	@ 0x58
 8001938:	4b16      	ldr	r3, [pc, #88]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 800193a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800193c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001948:	4a12      	ldr	r2, [pc, #72]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001950:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <HAL_UART_MspInit+0xb4>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	60fb      	str	r3, [r7, #12]
 800195a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800195c:	230c      	movs	r3, #12
 800195e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196e:	2303      	movs	r3, #3
 8001970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001974:	2307      	movs	r3, #7
 8001976:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001984:	f000 fac0 	bl	8001f08 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001988:	bf00      	nop
 800198a:	37b0      	adds	r7, #176	@ 0xb0
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40004400 	.word	0x40004400
 8001994:	40021000 	.word	0x40021000

08001998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <NMI_Handler+0x4>

080019a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <MemManage_Handler+0x4>

080019b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <BusFault_Handler+0x4>

080019b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <UsageFault_Handler+0x4>

080019c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ee:	f000 f961 	bl	8001cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019f6:	b480      	push	{r7}
 80019f8:	af00      	add	r7, sp, #0
  return 1;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_kill>:

int _kill(int pid, int sig)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
 8001a0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a10:	f003 fc66 	bl	80052e0 <__errno>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2216      	movs	r2, #22
 8001a18:	601a      	str	r2, [r3, #0]
  return -1;
 8001a1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_exit>:

void _exit (int status)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffe7 	bl	8001a06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <_exit+0x12>

08001a3c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	e00a      	b.n	8001a64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a4e:	f3af 8000 	nop.w
 8001a52:	4601      	mov	r1, r0
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	60ba      	str	r2, [r7, #8]
 8001a5a:	b2ca      	uxtb	r2, r1
 8001a5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	3301      	adds	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	dbf0      	blt.n	8001a4e <_read+0x12>
  }

  return len;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
 8001a86:	e009      	b.n	8001a9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	3301      	adds	r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697a      	ldr	r2, [r7, #20]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dbf1      	blt.n	8001a88 <_write+0x12>
  }
  return len;
 8001aa4:	687b      	ldr	r3, [r7, #4]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3718      	adds	r7, #24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <_close>:

int _close(int file)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <_isatty>:

int _isatty(int file)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b083      	sub	sp, #12
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	60f8      	str	r0, [r7, #12]
 8001b04:	60b9      	str	r1, [r7, #8]
 8001b06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
	...

08001b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b20:	4a14      	ldr	r2, [pc, #80]	@ (8001b74 <_sbrk+0x5c>)
 8001b22:	4b15      	ldr	r3, [pc, #84]	@ (8001b78 <_sbrk+0x60>)
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b2c:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b34:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <_sbrk+0x64>)
 8001b36:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <_sbrk+0x68>)
 8001b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3a:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <_sbrk+0x64>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4413      	add	r3, r2
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d207      	bcs.n	8001b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b48:	f003 fbca 	bl	80052e0 <__errno>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	220c      	movs	r2, #12
 8001b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	e009      	b.n	8001b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b58:	4b08      	ldr	r3, [pc, #32]	@ (8001b7c <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b5e:	4b07      	ldr	r3, [pc, #28]	@ (8001b7c <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	4a05      	ldr	r2, [pc, #20]	@ (8001b7c <_sbrk+0x64>)
 8001b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	20018000 	.word	0x20018000
 8001b78:	00000400 	.word	0x00000400
 8001b7c:	200007e8 	.word	0x200007e8
 8001b80:	20000b00 	.word	0x20000b00

08001b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bac:	f7ff ffea 	bl	8001b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <LoopForever+0xe>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf4 <LoopForever+0x16>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f003 fb89 	bl	80052ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bda:	f7ff fc33 	bl	8001444 <main>

08001bde <LoopForever>:

LoopForever:
    b LoopForever
 8001bde:	e7fe      	b.n	8001bde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001be0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	200006e0 	.word	0x200006e0
  ldr r2, =_sidata
 8001bec:	08009c98 	.word	0x08009c98
  ldr r2, =_sbss
 8001bf0:	200006e0 	.word	0x200006e0
  ldr r4, =_ebss
 8001bf4:	20000afc 	.word	0x20000afc

08001bf8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC1_2_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c06:	4b0c      	ldr	r3, [pc, #48]	@ (8001c38 <HAL_Init+0x3c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c38 <HAL_Init+0x3c>)
 8001c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f944 	bl	8001ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f000 f80f 	bl	8001c3c <HAL_InitTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d002      	beq.n	8001c2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	e001      	b.n	8001c2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c2a:	f7ff fdd7 	bl	80017dc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c48:	4b17      	ldr	r3, [pc, #92]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <HAL_InitTick+0x70>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_InitTick+0x6c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f941 	bl	8001eee <HAL_SYSTICK_Config>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10f      	bne.n	8001c92 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2b0f      	cmp	r3, #15
 8001c76:	d809      	bhi.n	8001c8c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c78:	2200      	movs	r2, #0
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c80:	f000 f919 	bl	8001eb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c84:	4a0a      	ldr	r2, [pc, #40]	@ (8001cb0 <HAL_InitTick+0x74>)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e007      	b.n	8001c9c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e004      	b.n	8001c9c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e001      	b.n	8001c9c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001cb8:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_IncTick+0x20>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_IncTick+0x24>)
 8001cc6:	6013      	str	r3, [r2, #0]
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	20000008 	.word	0x20000008
 8001cd8:	200007ec 	.word	0x200007ec

08001cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce0:	4b03      	ldr	r3, [pc, #12]	@ (8001cf0 <HAL_GetTick+0x14>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	200007ec 	.word	0x200007ec

08001cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff ffee 	bl	8001cdc <HAL_GetTick>
 8001d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d005      	beq.n	8001d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <HAL_Delay+0x44>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d1a:	bf00      	nop
 8001d1c:	f7ff ffde 	bl	8001cdc <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d8f7      	bhi.n	8001d1c <HAL_Delay+0x28>
  {
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008

08001d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d6e:	4a04      	ldr	r2, [pc, #16]	@ (8001d80 <__NVIC_SetPriorityGrouping+0x44>)
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	60d3      	str	r3, [r2, #12]
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <__NVIC_GetPriorityGrouping+0x18>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	0a1b      	lsrs	r3, r3, #8
 8001d8e:	f003 0307 	and.w	r3, r3, #7
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	6039      	str	r1, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	db0a      	blt.n	8001dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	490c      	ldr	r1, [pc, #48]	@ (8001dec <__NVIC_SetPriority+0x4c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	0112      	lsls	r2, r2, #4
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	440b      	add	r3, r1
 8001dc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc8:	e00a      	b.n	8001de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4908      	ldr	r1, [pc, #32]	@ (8001df0 <__NVIC_SetPriority+0x50>)
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3b04      	subs	r3, #4
 8001dd8:	0112      	lsls	r2, r2, #4
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	440b      	add	r3, r1
 8001dde:	761a      	strb	r2, [r3, #24]
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000e100 	.word	0xe000e100
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b089      	sub	sp, #36	@ 0x24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0307 	and.w	r3, r3, #7
 8001e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	f1c3 0307 	rsb	r3, r3, #7
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	bf28      	it	cs
 8001e12:	2304      	movcs	r3, #4
 8001e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	2b06      	cmp	r3, #6
 8001e1c:	d902      	bls.n	8001e24 <NVIC_EncodePriority+0x30>
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3b03      	subs	r3, #3
 8001e22:	e000      	b.n	8001e26 <NVIC_EncodePriority+0x32>
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43da      	mvns	r2, r3
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	401a      	ands	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	43d9      	mvns	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	4313      	orrs	r3, r2
         );
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3724      	adds	r7, #36	@ 0x24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e6c:	d301      	bcc.n	8001e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00f      	b.n	8001e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e72:	4a0a      	ldr	r2, [pc, #40]	@ (8001e9c <SysTick_Config+0x40>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7a:	210f      	movs	r1, #15
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f7ff ff8e 	bl	8001da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <SysTick_Config+0x40>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8a:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <SysTick_Config+0x40>)
 8001e8c:	2207      	movs	r2, #7
 8001e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff ff47 	bl	8001d3c <__NVIC_SetPriorityGrouping>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b086      	sub	sp, #24
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff5c 	bl	8001d84 <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff8e 	bl	8001df4 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5d 	bl	8001da0 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ffb0 	bl	8001e5c <SysTick_Config>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
	...

08001f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b087      	sub	sp, #28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e17f      	b.n	8002218 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa01 f303 	lsl.w	r3, r1, r3
 8001f24:	4013      	ands	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 8171 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d005      	beq.n	8001f48 <HAL_GPIO_Init+0x40>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d130      	bne.n	8001faa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f7e:	2201      	movs	r2, #1
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 0201 	and.w	r2, r3, #1
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d118      	bne.n	8001fe8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	693a      	ldr	r2, [r7, #16]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	08db      	lsrs	r3, r3, #3
 8001fd2:	f003 0201 	and.w	r2, r3, #1
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d017      	beq.n	8002024 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	2203      	movs	r2, #3
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d123      	bne.n	8002078 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	08da      	lsrs	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3208      	adds	r2, #8
 8002038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	220f      	movs	r2, #15
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43db      	mvns	r3, r3
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4313      	orrs	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	08da      	lsrs	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	3208      	adds	r2, #8
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	2203      	movs	r2, #3
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0203 	and.w	r2, r3, #3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80ac 	beq.w	8002212 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ba:	4b5f      	ldr	r3, [pc, #380]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020be:	4a5e      	ldr	r2, [pc, #376]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80020c6:	4b5c      	ldr	r3, [pc, #368]	@ (8002238 <HAL_GPIO_Init+0x330>)
 80020c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80020d2:	4a5a      	ldr	r2, [pc, #360]	@ (800223c <HAL_GPIO_Init+0x334>)
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	693a      	ldr	r2, [r7, #16]
 80020f2:	4013      	ands	r3, r2
 80020f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x242>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4f      	ldr	r2, [pc, #316]	@ (8002240 <HAL_GPIO_Init+0x338>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x23e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4e      	ldr	r2, [pc, #312]	@ (8002244 <HAL_GPIO_Init+0x33c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x23a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4d      	ldr	r2, [pc, #308]	@ (8002248 <HAL_GPIO_Init+0x340>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x236>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4c      	ldr	r2, [pc, #304]	@ (800224c <HAL_GPIO_Init+0x344>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x232>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4b      	ldr	r2, [pc, #300]	@ (8002250 <HAL_GPIO_Init+0x348>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x22e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4a      	ldr	r2, [pc, #296]	@ (8002254 <HAL_GPIO_Init+0x34c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x22a>
 800212e:	2306      	movs	r3, #6
 8002130:	e00c      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002132:	2307      	movs	r3, #7
 8002134:	e00a      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002136:	2305      	movs	r3, #5
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213a:	2304      	movs	r3, #4
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x244>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x244>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x244>
 800214a:	2300      	movs	r3, #0
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800215c:	4937      	ldr	r1, [pc, #220]	@ (800223c <HAL_GPIO_Init+0x334>)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800216a:	4b3b      	ldr	r3, [pc, #236]	@ (8002258 <HAL_GPIO_Init+0x350>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	43db      	mvns	r3, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4013      	ands	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4313      	orrs	r3, r2
 800218c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800218e:	4a32      	ldr	r2, [pc, #200]	@ (8002258 <HAL_GPIO_Init+0x350>)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002194:	4b30      	ldr	r3, [pc, #192]	@ (8002258 <HAL_GPIO_Init+0x350>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80021b8:	4a27      	ldr	r2, [pc, #156]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80021be:	4b26      	ldr	r3, [pc, #152]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4013      	ands	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021e2:	4a1d      	ldr	r2, [pc, #116]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <HAL_GPIO_Init+0x350>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4013      	ands	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800220c:	4a12      	ldr	r2, [pc, #72]	@ (8002258 <HAL_GPIO_Init+0x350>)
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	3301      	adds	r3, #1
 8002216:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	f47f ae78 	bne.w	8001f18 <HAL_GPIO_Init+0x10>
  }
}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	371c      	adds	r7, #28
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	40010000 	.word	0x40010000
 8002240:	48000400 	.word	0x48000400
 8002244:	48000800 	.word	0x48000800
 8002248:	48000c00 	.word	0x48000c00
 800224c:	48001000 	.word	0x48001000
 8002250:	48001400 	.word	0x48001400
 8002254:	48001800 	.word	0x48001800
 8002258:	40010400 	.word	0x40010400

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002278:	e002      	b.n	8002280 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d101      	bne.n	800229e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e08d      	b.n	80023ba <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d106      	bne.n	80022b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fab6 	bl	8001824 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2224      	movs	r2, #36	@ 0x24
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 0201 	bic.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80022dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	e006      	b.n	8002314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d108      	bne.n	800232e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	e007      	b.n	800233e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800233c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800234c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002350:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68da      	ldr	r2, [r3, #12]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002360:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691a      	ldr	r2, [r3, #16]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69d9      	ldr	r1, [r3, #28]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1a      	ldr	r2, [r3, #32]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	461a      	mov	r2, r3
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
 80023d4:	4613      	mov	r3, r2
 80023d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	f040 80fd 	bne.w	80025e0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2C_Master_Transmit+0x30>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e0f6      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023fc:	f7ff fc6e 	bl	8001cdc <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	2319      	movs	r3, #25
 8002408:	2201      	movs	r2, #1
 800240a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 fa0a 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e0e1      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2210      	movs	r2, #16
 800242a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	893a      	ldrh	r2, [r7, #8]
 800243e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2200      	movs	r2, #0
 8002444:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800244a:	b29b      	uxth	r3, r3
 800244c:	2bff      	cmp	r3, #255	@ 0xff
 800244e:	d906      	bls.n	800245e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	22ff      	movs	r2, #255	@ 0xff
 8002454:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002456:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	e007      	b.n	800246e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002468:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800246c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002472:	2b00      	cmp	r3, #0
 8002474:	d024      	beq.n	80024c0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800247a:	781a      	ldrb	r2, [r3, #0]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	1c5a      	adds	r2, r3, #1
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002490:	b29b      	uxth	r3, r3
 8002492:	3b01      	subs	r3, #1
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	8979      	ldrh	r1, [r7, #10]
 80024b2:	4b4e      	ldr	r3, [pc, #312]	@ (80025ec <HAL_I2C_Master_Transmit+0x228>)
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fc05 	bl	8002cc8 <I2C_TransferConfig>
 80024be:	e066      	b.n	800258e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	8979      	ldrh	r1, [r7, #10]
 80024c8:	4b48      	ldr	r3, [pc, #288]	@ (80025ec <HAL_I2C_Master_Transmit+0x228>)
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fbfa 	bl	8002cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024d4:	e05b      	b.n	800258e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 f9fd 	bl	80028da <I2C_WaitOnTXISFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07b      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d034      	beq.n	800258e <HAL_I2C_Master_Transmit+0x1ca>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	2b00      	cmp	r3, #0
 800252a:	d130      	bne.n	800258e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	6a3b      	ldr	r3, [r7, #32]
 8002532:	2200      	movs	r2, #0
 8002534:	2180      	movs	r1, #128	@ 0x80
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 f976 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e04d      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254a:	b29b      	uxth	r3, r3
 800254c:	2bff      	cmp	r3, #255	@ 0xff
 800254e:	d90e      	bls.n	800256e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	22ff      	movs	r2, #255	@ 0xff
 8002554:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	b2da      	uxtb	r2, r3
 800255c:	8979      	ldrh	r1, [r7, #10]
 800255e:	2300      	movs	r3, #0
 8002560:	9300      	str	r3, [sp, #0]
 8002562:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fbae 	bl	8002cc8 <I2C_TransferConfig>
 800256c:	e00f      	b.n	800258e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257c:	b2da      	uxtb	r2, r3
 800257e:	8979      	ldrh	r1, [r7, #10]
 8002580:	2300      	movs	r3, #0
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002588:	68f8      	ldr	r0, [r7, #12]
 800258a:	f000 fb9d 	bl	8002cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002592:	b29b      	uxth	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d19e      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	6a39      	ldr	r1, [r7, #32]
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f9e3 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e01a      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2220      	movs	r2, #32
 80025b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6859      	ldr	r1, [r3, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <HAL_I2C_Master_Transmit+0x22c>)
 80025c0:	400b      	ands	r3, r1
 80025c2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025dc:	2300      	movs	r3, #0
 80025de:	e000      	b.n	80025e2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80025e0:	2302      	movs	r3, #2
  }
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	80002000 	.word	0x80002000
 80025f0:	fe00e800 	.word	0xfe00e800

080025f4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	461a      	mov	r2, r3
 8002600:	460b      	mov	r3, r1
 8002602:	817b      	strh	r3, [r7, #10]
 8002604:	4613      	mov	r3, r2
 8002606:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b20      	cmp	r3, #32
 8002612:	f040 80db 	bne.w	80027cc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_I2C_Master_Receive+0x30>
 8002620:	2302      	movs	r3, #2
 8002622:	e0d4      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800262c:	f7ff fb56 	bl	8001cdc <HAL_GetTick>
 8002630:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2319      	movs	r3, #25
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f8f2 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e0bf      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2222      	movs	r2, #34	@ 0x22
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2210      	movs	r2, #16
 800265a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	893a      	ldrh	r2, [r7, #8]
 800266e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2200      	movs	r2, #0
 8002674:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800267a:	b29b      	uxth	r3, r3
 800267c:	2bff      	cmp	r3, #255	@ 0xff
 800267e:	d90e      	bls.n	800269e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2201      	movs	r2, #1
 8002684:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268a:	b2da      	uxtb	r2, r3
 800268c:	8979      	ldrh	r1, [r7, #10]
 800268e:	4b52      	ldr	r3, [pc, #328]	@ (80027d8 <HAL_I2C_Master_Receive+0x1e4>)
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fb16 	bl	8002cc8 <I2C_TransferConfig>
 800269c:	e06d      	b.n	800277a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	8979      	ldrh	r1, [r7, #10]
 80026b0:	4b49      	ldr	r3, [pc, #292]	@ (80027d8 <HAL_I2C_Master_Receive+0x1e4>)
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fb05 	bl	8002cc8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026be:	e05c      	b.n	800277a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	6a39      	ldr	r1, [r7, #32]
 80026c4:	68f8      	ldr	r0, [r7, #12]
 80026c6:	f000 f993 	bl	80029f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e07c      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	1c5a      	adds	r2, r3, #1
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d034      	beq.n	800277a <HAL_I2C_Master_Receive+0x186>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002714:	2b00      	cmp	r3, #0
 8002716:	d130      	bne.n	800277a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	2200      	movs	r2, #0
 8002720:	2180      	movs	r1, #128	@ 0x80
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f880 	bl	8002828 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e04d      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002736:	b29b      	uxth	r3, r3
 8002738:	2bff      	cmp	r3, #255	@ 0xff
 800273a:	d90e      	bls.n	800275a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	22ff      	movs	r2, #255	@ 0xff
 8002740:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002746:	b2da      	uxtb	r2, r3
 8002748:	8979      	ldrh	r1, [r7, #10]
 800274a:	2300      	movs	r3, #0
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fab8 	bl	8002cc8 <I2C_TransferConfig>
 8002758:	e00f      	b.n	800277a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	b2da      	uxtb	r2, r3
 800276a:	8979      	ldrh	r1, [r7, #10]
 800276c:	2300      	movs	r3, #0
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 faa7 	bl	8002cc8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	d19d      	bne.n	80026c0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	6a39      	ldr	r1, [r7, #32]
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f000 f8ed 	bl	8002968 <I2C_WaitOnSTOPFlagUntilTimeout>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01a      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2220      	movs	r2, #32
 800279e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <HAL_I2C_Master_Receive+0x1e8>)
 80027ac:	400b      	ands	r3, r1
 80027ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	80002400 	.word	0x80002400
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699b      	ldr	r3, [r3, #24]
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d103      	bne.n	80027fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2200      	movs	r2, #0
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b01      	cmp	r3, #1
 800280a:	d007      	beq.n	800281c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	699a      	ldr	r2, [r3, #24]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	619a      	str	r2, [r3, #24]
  }
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	603b      	str	r3, [r7, #0]
 8002834:	4613      	mov	r3, r2
 8002836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	e03b      	b.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	6839      	ldr	r1, [r7, #0]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f962 	bl	8002b08 <I2C_IsErrorOccurred>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e041      	b.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002854:	d02d      	beq.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002856:	f7ff fa41 	bl	8001cdc <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d302      	bcc.n	800286c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d122      	bne.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699a      	ldr	r2, [r3, #24]
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	4013      	ands	r3, r2
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	429a      	cmp	r2, r3
 8002888:	d113      	bne.n	80028b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f043 0220 	orr.w	r2, r3, #32
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e00f      	b.n	80028d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699a      	ldr	r2, [r3, #24]
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	4013      	ands	r3, r2
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	429a      	cmp	r2, r3
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	461a      	mov	r2, r3
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d0b4      	beq.n	800283a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3710      	adds	r7, #16
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b084      	sub	sp, #16
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028e6:	e033      	b.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 f90b 	bl	8002b08 <I2C_IsErrorOccurred>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e031      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002902:	d025      	beq.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7ff f9ea 	bl	8001cdc <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	429a      	cmp	r2, r3
 8002912:	d302      	bcc.n	800291a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d11a      	bne.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b02      	cmp	r3, #2
 8002926:	d013      	beq.n	8002950 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292c:	f043 0220 	orr.w	r2, r3, #32
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e007      	b.n	8002960 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b02      	cmp	r3, #2
 800295c:	d1c4      	bne.n	80028e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002974:	e02f      	b.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68b9      	ldr	r1, [r7, #8]
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f8c4 	bl	8002b08 <I2C_IsErrorOccurred>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e02d      	b.n	80029e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7ff f9a7 	bl	8001cdc <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	68ba      	ldr	r2, [r7, #8]
 8002996:	429a      	cmp	r2, r3
 8002998:	d302      	bcc.n	80029a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d11a      	bne.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	f003 0320 	and.w	r3, r3, #32
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	d013      	beq.n	80029d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	f043 0220 	orr.w	r2, r3, #32
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e007      	b.n	80029e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d1c8      	bne.n	8002976 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fc:	2300      	movs	r3, #0
 80029fe:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a00:	e071      	b.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f87e 	bl	8002b08 <I2C_IsErrorOccurred>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d13b      	bne.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002a24:	7dfb      	ldrb	r3, [r7, #23]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d138      	bne.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d105      	bne.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002a40:	2300      	movs	r3, #0
 8002a42:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d121      	bne.n	8002a96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2210      	movs	r2, #16
 8002a58:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2220      	movs	r2, #32
 8002a66:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002a74:	400b      	ands	r3, r1
 8002a76:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2220      	movs	r2, #32
 8002a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	75fb      	strb	r3, [r7, #23]
 8002a94:	e002      	b.n	8002a9c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002a9c:	f7ff f91e 	bl	8001cdc <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d302      	bcc.n	8002ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d119      	bne.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00f      	beq.n	8002ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f043 0220 	orr.w	r2, r3, #32
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d002      	beq.n	8002afa <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002af4:	7dfb      	ldrb	r3, [r7, #23]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d083      	beq.n	8002a02 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	fe00e800 	.word	0xfe00e800

08002b08 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	f003 0310 	and.w	r3, r3, #16
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d068      	beq.n	8002c06 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2210      	movs	r2, #16
 8002b3a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b3c:	e049      	b.n	8002bd2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b44:	d045      	beq.n	8002bd2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b46:	f7ff f8c9 	bl	8001cdc <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d302      	bcc.n	8002b5c <I2C_IsErrorOccurred+0x54>
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d13a      	bne.n	8002bd2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b66:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b6e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002b7e:	d121      	bne.n	8002bc4 <I2C_IsErrorOccurred+0xbc>
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b86:	d01d      	beq.n	8002bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002b88:	7cfb      	ldrb	r3, [r7, #19]
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d01a      	beq.n	8002bc4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b9c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b9e:	f7ff f89d 	bl	8001cdc <HAL_GetTick>
 8002ba2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba4:	e00e      	b.n	8002bc4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ba6:	f7ff f899 	bl	8001cdc <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b19      	cmp	r3, #25
 8002bb2:	d907      	bls.n	8002bc4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f043 0320 	orr.w	r3, r3, #32
 8002bba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002bc2:	e006      	b.n	8002bd2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d1e9      	bne.n	8002ba6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d003      	beq.n	8002be8 <I2C_IsErrorOccurred+0xe0>
 8002be0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0aa      	beq.n	8002b3e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002be8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d103      	bne.n	8002bf8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f043 0304 	orr.w	r3, r3, #4
 8002bfe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00b      	beq.n	8002c30 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	f043 0301 	orr.w	r3, r3, #1
 8002c1e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	f043 0308 	orr.w	r3, r3, #8
 8002c40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	f043 0302 	orr.w	r3, r3, #2
 8002c62:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002c74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01c      	beq.n	8002cb6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fdaf 	bl	80027e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6859      	ldr	r1, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc4 <I2C_IsErrorOccurred+0x1bc>)
 8002c8e:	400b      	ands	r3, r1
 8002c90:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2220      	movs	r2, #32
 8002ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3728      	adds	r7, #40	@ 0x28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	fe00e800 	.word	0xfe00e800

08002cc8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	817b      	strh	r3, [r7, #10]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cda:	897b      	ldrh	r3, [r7, #10]
 8002cdc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ce0:	7a7b      	ldrb	r3, [r7, #9]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ce8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cf6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	0d5b      	lsrs	r3, r3, #21
 8002d02:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002d06:	4b08      	ldr	r3, [pc, #32]	@ (8002d28 <I2C_TransferConfig+0x60>)
 8002d08:	430b      	orrs	r3, r1
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	ea02 0103 	and.w	r1, r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d1a:	bf00      	nop
 8002d1c:	371c      	adds	r7, #28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	03ff63ff 	.word	0x03ff63ff

08002d2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d138      	bne.n	8002db4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d101      	bne.n	8002d50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e032      	b.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2224      	movs	r2, #36	@ 0x24
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f042 0201 	orr.w	r2, r2, #1
 8002d9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2220      	movs	r2, #32
 8002da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
 8002dca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d139      	bne.n	8002e4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e033      	b.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2224      	movs	r2, #36	@ 0x24
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002e14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
  }
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	40007000 	.word	0x40007000

08002e78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e86:	d130      	bne.n	8002eea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e88:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e94:	d038      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e96:	4b20      	ldr	r3, [pc, #128]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	@ (8002f1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2232      	movs	r2, #50	@ 0x32
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0c9b      	lsrs	r3, r3, #18
 8002eb8:	3301      	adds	r3, #1
 8002eba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebc:	e002      	b.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed0:	d102      	bne.n	8002ed8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1f2      	bne.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ee4:	d110      	bne.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e00f      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eea:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ef6:	d007      	beq.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ef8:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f00:	4a05      	ldr	r2, [pc, #20]	@ (8002f18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	431bde83 	.word	0x431bde83

08002f24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b088      	sub	sp, #32
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e3ca      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f36:	4b97      	ldr	r3, [pc, #604]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f40:	4b94      	ldr	r3, [pc, #592]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f003 0303 	and.w	r3, r3, #3
 8002f48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f000 80e4 	beq.w	8003120 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d007      	beq.n	8002f6e <HAL_RCC_OscConfig+0x4a>
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	f040 808b 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	f040 8087 	bne.w	800307c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f6e:	4b89      	ldr	r3, [pc, #548]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x62>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e3a2      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1a      	ldr	r2, [r3, #32]
 8002f8a:	4b82      	ldr	r3, [pc, #520]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x7c>
 8002f96:	4b7f      	ldr	r3, [pc, #508]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f9e:	e005      	b.n	8002fac <HAL_RCC_OscConfig+0x88>
 8002fa0:	4b7c      	ldr	r3, [pc, #496]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fa6:	091b      	lsrs	r3, r3, #4
 8002fa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d223      	bcs.n	8002ff8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fd55 	bl	8003a64 <RCC_SetFlashLatencyFromMSIRange>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e383      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fc4:	4b73      	ldr	r3, [pc, #460]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a72      	ldr	r2, [pc, #456]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6013      	str	r3, [r2, #0]
 8002fd0:	4b70      	ldr	r3, [pc, #448]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	496d      	ldr	r1, [pc, #436]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fe2:	4b6c      	ldr	r3, [pc, #432]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	021b      	lsls	r3, r3, #8
 8002ff0:	4968      	ldr	r1, [pc, #416]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
 8002ff6:	e025      	b.n	8003044 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ff8:	4b66      	ldr	r3, [pc, #408]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a65      	ldr	r2, [pc, #404]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8002ffe:	f043 0308 	orr.w	r3, r3, #8
 8003002:	6013      	str	r3, [r2, #0]
 8003004:	4b63      	ldr	r3, [pc, #396]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	4960      	ldr	r1, [pc, #384]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003012:	4313      	orrs	r3, r2
 8003014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003016:	4b5f      	ldr	r3, [pc, #380]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	495b      	ldr	r1, [pc, #364]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	4618      	mov	r0, r3
 8003036:	f000 fd15 	bl	8003a64 <RCC_SetFlashLatencyFromMSIRange>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e343      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003044:	f000 fc4a 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b52      	ldr	r3, [pc, #328]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	091b      	lsrs	r3, r3, #4
 8003050:	f003 030f 	and.w	r3, r3, #15
 8003054:	4950      	ldr	r1, [pc, #320]	@ (8003198 <HAL_RCC_OscConfig+0x274>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	f003 031f 	and.w	r3, r3, #31
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
 8003060:	4a4e      	ldr	r2, [pc, #312]	@ (800319c <HAL_RCC_OscConfig+0x278>)
 8003062:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003064:	4b4e      	ldr	r3, [pc, #312]	@ (80031a0 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7fe fde7 	bl	8001c3c <HAL_InitTick>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d052      	beq.n	800311e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003078:	7bfb      	ldrb	r3, [r7, #15]
 800307a:	e327      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d032      	beq.n	80030ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003084:	4b43      	ldr	r3, [pc, #268]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a42      	ldr	r2, [pc, #264]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003090:	f7fe fe24 	bl	8001cdc <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003098:	f7fe fe20 	bl	8001cdc <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e310      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030b6:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a36      	ldr	r2, [pc, #216]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030bc:	f043 0308 	orr.w	r3, r3, #8
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
 80030ce:	4931      	ldr	r1, [pc, #196]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030d4:	4b2f      	ldr	r3, [pc, #188]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	492c      	ldr	r1, [pc, #176]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030e4:	4313      	orrs	r3, r2
 80030e6:	604b      	str	r3, [r1, #4]
 80030e8:	e01a      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a29      	ldr	r2, [pc, #164]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030f6:	f7fe fdf1 	bl	8001cdc <HAL_GetTick>
 80030fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030fc:	e008      	b.n	8003110 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030fe:	f7fe fded 	bl	8001cdc <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	2b02      	cmp	r3, #2
 800310a:	d901      	bls.n	8003110 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800310c:	2303      	movs	r3, #3
 800310e:	e2dd      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003110:	4b20      	ldr	r3, [pc, #128]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1f0      	bne.n	80030fe <HAL_RCC_OscConfig+0x1da>
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800311e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d074      	beq.n	8003216 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	2b08      	cmp	r3, #8
 8003130:	d005      	beq.n	800313e <HAL_RCC_OscConfig+0x21a>
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2b0c      	cmp	r3, #12
 8003136:	d10e      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d10b      	bne.n	8003156 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800313e:	4b15      	ldr	r3, [pc, #84]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d064      	beq.n	8003214 <HAL_RCC_OscConfig+0x2f0>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d160      	bne.n	8003214 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e2ba      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800315e:	d106      	bne.n	800316e <HAL_RCC_OscConfig+0x24a>
 8003160:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0b      	ldr	r2, [pc, #44]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003166:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e026      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003176:	d115      	bne.n	80031a4 <HAL_RCC_OscConfig+0x280>
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800317e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b03      	ldr	r3, [pc, #12]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a02      	ldr	r2, [pc, #8]	@ (8003194 <HAL_RCC_OscConfig+0x270>)
 800318a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e014      	b.n	80031bc <HAL_RCC_OscConfig+0x298>
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	080098ac 	.word	0x080098ac
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004
 80031a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a9f      	ldr	r2, [pc, #636]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b9d      	ldr	r3, [pc, #628]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a9c      	ldr	r2, [pc, #624]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fd8a 	bl	8001cdc <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fd86 	bl	8001cdc <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	@ 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e276      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031de:	4b92      	ldr	r3, [pc, #584]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2a8>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fd76 	bl	8001cdc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fd72 	bl	8001cdc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	@ 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e262      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003206:	4b88      	ldr	r3, [pc, #544]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x2d0>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d060      	beq.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	2b04      	cmp	r3, #4
 8003226:	d005      	beq.n	8003234 <HAL_RCC_OscConfig+0x310>
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	2b0c      	cmp	r3, #12
 800322c:	d119      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d116      	bne.n	8003262 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003234:	4b7c      	ldr	r3, [pc, #496]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d005      	beq.n	800324c <HAL_RCC_OscConfig+0x328>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e23f      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b76      	ldr	r3, [pc, #472]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	061b      	lsls	r3, r3, #24
 800325a:	4973      	ldr	r1, [pc, #460]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800325c:	4313      	orrs	r3, r2
 800325e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003260:	e040      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d023      	beq.n	80032b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800326a:	4b6f      	ldr	r3, [pc, #444]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003276:	f7fe fd31 	bl	8001cdc <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327e:	f7fe fd2d 	bl	8001cdc <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e21d      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003290:	4b65      	ldr	r3, [pc, #404]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800329c:	4b62      	ldr	r3, [pc, #392]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	061b      	lsls	r3, r3, #24
 80032aa:	495f      	ldr	r1, [pc, #380]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
 80032b0:	e018      	b.n	80032e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032b2:	4b5d      	ldr	r3, [pc, #372]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a5c      	ldr	r2, [pc, #368]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032be:	f7fe fd0d 	bl	8001cdc <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c6:	f7fe fd09 	bl	8001cdc <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e1f9      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032d8:	4b53      	ldr	r3, [pc, #332]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03c      	beq.n	800336a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01c      	beq.n	8003332 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fe:	4a4a      	ldr	r2, [pc, #296]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003308:	f7fe fce8 	bl	8001cdc <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003310:	f7fe fce4 	bl	8001cdc <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e1d4      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003322:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003324:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d0ef      	beq.n	8003310 <HAL_RCC_OscConfig+0x3ec>
 8003330:	e01b      	b.n	800336a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003334:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003338:	4a3b      	ldr	r2, [pc, #236]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fccb 	bl	8001cdc <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe fcc7 	bl	8001cdc <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e1b7      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800335c:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1ef      	bne.n	800334a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 80a6 	beq.w	80034c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003378:	2300      	movs	r3, #0
 800337a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800337c:	4b2a      	ldr	r3, [pc, #168]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10d      	bne.n	80033a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003388:	4b27      	ldr	r3, [pc, #156]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800338a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338c:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800338e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003392:	6593      	str	r3, [r2, #88]	@ 0x58
 8003394:	4b24      	ldr	r3, [pc, #144]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003396:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003398:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339c:	60bb      	str	r3, [r7, #8]
 800339e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033a0:	2301      	movs	r3, #1
 80033a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a4:	4b21      	ldr	r3, [pc, #132]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d118      	bne.n	80033e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033b0:	4b1e      	ldr	r3, [pc, #120]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033bc:	f7fe fc8e 	bl	8001cdc <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c4:	f7fe fc8a 	bl	8001cdc <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e17a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_RCC_OscConfig+0x508>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d108      	bne.n	80033fc <HAL_RCC_OscConfig+0x4d8>
 80033ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80033ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033fa:	e029      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	2b05      	cmp	r3, #5
 8003402:	d115      	bne.n	8003430 <HAL_RCC_OscConfig+0x50c>
 8003404:	4b08      	ldr	r3, [pc, #32]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003406:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340a:	4a07      	ldr	r2, [pc, #28]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800340c:	f043 0304 	orr.w	r3, r3, #4
 8003410:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003414:	4b04      	ldr	r3, [pc, #16]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 8003416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800341a:	4a03      	ldr	r2, [pc, #12]	@ (8003428 <HAL_RCC_OscConfig+0x504>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003424:	e014      	b.n	8003450 <HAL_RCC_OscConfig+0x52c>
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	40007000 	.word	0x40007000
 8003430:	4b9c      	ldr	r3, [pc, #624]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003432:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003436:	4a9b      	ldr	r2, [pc, #620]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003440:	4b98      	ldr	r3, [pc, #608]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003446:	4a97      	ldr	r2, [pc, #604]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d016      	beq.n	8003486 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe fc40 	bl	8001cdc <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fe fc3c 	bl	8001cdc <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e12a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003476:	4b8b      	ldr	r3, [pc, #556]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ed      	beq.n	8003460 <HAL_RCC_OscConfig+0x53c>
 8003484:	e015      	b.n	80034b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe fc29 	bl	8001cdc <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe fc25 	bl	8001cdc <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e113      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034a4:	4b7f      	ldr	r3, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1ed      	bne.n	800348e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b8:	4b7a      	ldr	r3, [pc, #488]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034bc:	4a79      	ldr	r2, [pc, #484]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80fe 	beq.w	80036ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	f040 80d0 	bne.w	8003678 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80034d8:	4b72      	ldr	r3, [pc, #456]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d130      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f6:	3b01      	subs	r3, #1
 80034f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d127      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003508:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11f      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003518:	2a07      	cmp	r2, #7
 800351a:	bf14      	ite	ne
 800351c:	2201      	movne	r2, #1
 800351e:	2200      	moveq	r2, #0
 8003520:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003522:	4293      	cmp	r3, r2
 8003524:	d113      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003530:	085b      	lsrs	r3, r3, #1
 8003532:	3b01      	subs	r3, #1
 8003534:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003536:	429a      	cmp	r2, r3
 8003538:	d109      	bne.n	800354e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	085b      	lsrs	r3, r3, #1
 8003546:	3b01      	subs	r3, #1
 8003548:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800354a:	429a      	cmp	r2, r3
 800354c:	d06e      	beq.n	800362c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	2b0c      	cmp	r3, #12
 8003552:	d069      	beq.n	8003628 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003554:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003560:	4b50      	ldr	r3, [pc, #320]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e0ad      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003570:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a4b      	ldr	r2, [pc, #300]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800357a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800357c:	f7fe fbae 	bl	8001cdc <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe fbaa 	bl	8001cdc <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e09a      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003596:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a2:	4b40      	ldr	r3, [pc, #256]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	4b40      	ldr	r3, [pc, #256]	@ (80036a8 <HAL_RCC_OscConfig+0x784>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80035b2:	3a01      	subs	r2, #1
 80035b4:	0112      	lsls	r2, r2, #4
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80035bc:	0212      	lsls	r2, r2, #8
 80035be:	4311      	orrs	r1, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035c4:	0852      	lsrs	r2, r2, #1
 80035c6:	3a01      	subs	r2, #1
 80035c8:	0552      	lsls	r2, r2, #21
 80035ca:	4311      	orrs	r1, r2
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80035d0:	0852      	lsrs	r2, r2, #1
 80035d2:	3a01      	subs	r2, #1
 80035d4:	0652      	lsls	r2, r2, #25
 80035d6:	4311      	orrs	r1, r2
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80035dc:	0912      	lsrs	r2, r2, #4
 80035de:	0452      	lsls	r2, r2, #17
 80035e0:	430a      	orrs	r2, r1
 80035e2:	4930      	ldr	r1, [pc, #192]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035e8:	4b2e      	ldr	r3, [pc, #184]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a2d      	ldr	r2, [pc, #180]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	4a2a      	ldr	r2, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003600:	f7fe fb6c 	bl	8001cdc <HAL_GetTick>
 8003604:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe fb68 	bl	8001cdc <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e058      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	4b22      	ldr	r3, [pc, #136]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003626:	e050      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e04f      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362c:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d148      	bne.n	80036ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003638:	4b1a      	ldr	r3, [pc, #104]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a19      	ldr	r2, [pc, #100]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800363e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003644:	4b17      	ldr	r3, [pc, #92]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	4a16      	ldr	r2, [pc, #88]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800364a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800364e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003650:	f7fe fb44 	bl	8001cdc <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003658:	f7fe fb40 	bl	8001cdc <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e030      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	4b0e      	ldr	r3, [pc, #56]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d0f0      	beq.n	8003658 <HAL_RCC_OscConfig+0x734>
 8003676:	e028      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b0c      	cmp	r3, #12
 800367c:	d023      	beq.n	80036c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800367e:	4b09      	ldr	r3, [pc, #36]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a08      	ldr	r2, [pc, #32]	@ (80036a4 <HAL_RCC_OscConfig+0x780>)
 8003684:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368a:	f7fe fb27 	bl	8001cdc <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003690:	e00c      	b.n	80036ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003692:	f7fe fb23 	bl	8001cdc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d905      	bls.n	80036ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e013      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
 80036a4:	40021000 	.word	0x40021000
 80036a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1ec      	bne.n	8003692 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036b8:	4b06      	ldr	r3, [pc, #24]	@ (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	4905      	ldr	r1, [pc, #20]	@ (80036d4 <HAL_RCC_OscConfig+0x7b0>)
 80036be:	4b06      	ldr	r3, [pc, #24]	@ (80036d8 <HAL_RCC_OscConfig+0x7b4>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	60cb      	str	r3, [r1, #12]
 80036c4:	e001      	b.n	80036ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40021000 	.word	0x40021000
 80036d8:	feeefffc 	.word	0xfeeefffc

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0e7      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b75      	ldr	r3, [pc, #468]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d910      	bls.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b72      	ldr	r3, [pc, #456]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4970      	ldr	r1, [pc, #448]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b6e      	ldr	r3, [pc, #440]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0cf      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d010      	beq.n	800374e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	4b66      	ldr	r3, [pc, #408]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003738:	429a      	cmp	r2, r3
 800373a:	d908      	bls.n	800374e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b63      	ldr	r3, [pc, #396]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4960      	ldr	r1, [pc, #384]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04c      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003762:	4b5a      	ldr	r3, [pc, #360]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d121      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0a6      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d107      	bne.n	800378a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800377a:	4b54      	ldr	r3, [pc, #336]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e09a      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d107      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003792:	4b4e      	ldr	r3, [pc, #312]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d109      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e08e      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a2:	4b4a      	ldr	r3, [pc, #296]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e086      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037b2:	4b46      	ldr	r3, [pc, #280]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 0203 	bic.w	r2, r3, #3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4943      	ldr	r1, [pc, #268]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037c4:	f7fe fa8a 	bl	8001cdc <HAL_GetTick>
 80037c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ca:	e00a      	b.n	80037e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037cc:	f7fe fa86 	bl	8001cdc <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037da:	4293      	cmp	r3, r2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e06e      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	4b3a      	ldr	r3, [pc, #232]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 020c 	and.w	r2, r3, #12
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d1eb      	bne.n	80037cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0302 	and.w	r3, r3, #2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	4b31      	ldr	r3, [pc, #196]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800380c:	429a      	cmp	r2, r3
 800380e:	d208      	bcs.n	8003822 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003810:	4b2e      	ldr	r3, [pc, #184]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	492b      	ldr	r1, [pc, #172]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800381e:	4313      	orrs	r3, r2
 8003820:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003822:	4b29      	ldr	r3, [pc, #164]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d210      	bcs.n	8003852 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003830:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f023 0207 	bic.w	r2, r3, #7
 8003838:	4923      	ldr	r1, [pc, #140]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003840:	4b21      	ldr	r3, [pc, #132]	@ (80038c8 <HAL_RCC_ClockConfig+0x1ec>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	429a      	cmp	r2, r3
 800384c:	d001      	beq.n	8003852 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e036      	b.n	80038c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b00      	cmp	r3, #0
 800385c:	d008      	beq.n	8003870 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385e:	4b1b      	ldr	r3, [pc, #108]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	4918      	ldr	r1, [pc, #96]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0308 	and.w	r3, r3, #8
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4910      	ldr	r1, [pc, #64]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	4313      	orrs	r3, r2
 800388e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003890:	f000 f824 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	490b      	ldr	r1, [pc, #44]	@ (80038d0 <HAL_RCC_ClockConfig+0x1f4>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	f003 031f 	and.w	r3, r3, #31
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ac:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038b0:	4b09      	ldr	r3, [pc, #36]	@ (80038d8 <HAL_RCC_ClockConfig+0x1fc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe f9c1 	bl	8001c3c <HAL_InitTick>
 80038ba:	4603      	mov	r3, r0
 80038bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80038be:	7afb      	ldrb	r3, [r7, #11]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40022000 	.word	0x40022000
 80038cc:	40021000 	.word	0x40021000
 80038d0:	080098ac 	.word	0x080098ac
 80038d4:	20000000 	.word	0x20000000
 80038d8:	20000004 	.word	0x20000004

080038dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b089      	sub	sp, #36	@ 0x24
 80038e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038e2:	2300      	movs	r3, #0
 80038e4:	61fb      	str	r3, [r7, #28]
 80038e6:	2300      	movs	r3, #0
 80038e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ea:	4b3e      	ldr	r3, [pc, #248]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
 80038f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038f4:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_RCC_GetSysClockFreq+0x34>
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	2b0c      	cmp	r3, #12
 8003908:	d121      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d11e      	bne.n	800394e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003910:	4b34      	ldr	r3, [pc, #208]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d107      	bne.n	800392c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800391c:	4b31      	ldr	r3, [pc, #196]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	61fb      	str	r3, [r7, #28]
 800392a:	e005      	b.n	8003938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800392c:	4b2d      	ldr	r3, [pc, #180]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	091b      	lsrs	r3, r3, #4
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003938:	4a2b      	ldr	r2, [pc, #172]	@ (80039e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10d      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800394c:	e00a      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	2b04      	cmp	r3, #4
 8003952:	d102      	bne.n	800395a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003954:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	e004      	b.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d101      	bne.n	8003964 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003960:	4b23      	ldr	r3, [pc, #140]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003962:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	2b0c      	cmp	r3, #12
 8003968:	d134      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800396a:	4b1e      	ldr	r3, [pc, #120]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d003      	beq.n	8003982 <HAL_RCC_GetSysClockFreq+0xa6>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d003      	beq.n	8003988 <HAL_RCC_GetSysClockFreq+0xac>
 8003980:	e005      	b.n	800398e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003982:	4b1a      	ldr	r3, [pc, #104]	@ (80039ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003984:	617b      	str	r3, [r7, #20]
      break;
 8003986:	e005      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003988:	4b19      	ldr	r3, [pc, #100]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800398a:	617b      	str	r3, [r7, #20]
      break;
 800398c:	e002      	b.n	8003994 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	617b      	str	r3, [r7, #20]
      break;
 8003992:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003994:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	3301      	adds	r3, #1
 80039a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039a2:	4b10      	ldr	r3, [pc, #64]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	fb03 f202 	mul.w	r2, r3, r2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	0e5b      	lsrs	r3, r3, #25
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	3301      	adds	r3, #1
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039d4:	69bb      	ldr	r3, [r7, #24]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	@ 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	40021000 	.word	0x40021000
 80039e8:	080098c4 	.word	0x080098c4
 80039ec:	00f42400 	.word	0x00f42400
 80039f0:	007a1200 	.word	0x007a1200

080039f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039f8:	4b03      	ldr	r3, [pc, #12]	@ (8003a08 <HAL_RCC_GetHCLKFreq+0x14>)
 80039fa:	681b      	ldr	r3, [r3, #0]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	20000000 	.word	0x20000000

08003a0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a10:	f7ff fff0 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4904      	ldr	r1, [pc, #16]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	080098bc 	.word	0x080098bc

08003a38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a3c:	f7ff ffda 	bl	80039f4 <HAL_RCC_GetHCLKFreq>
 8003a40:	4602      	mov	r2, r0
 8003a42:	4b06      	ldr	r3, [pc, #24]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	0adb      	lsrs	r3, r3, #11
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	4904      	ldr	r1, [pc, #16]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a4e:	5ccb      	ldrb	r3, [r1, r3]
 8003a50:	f003 031f 	and.w	r3, r3, #31
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	080098bc 	.word	0x080098bc

08003a64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a70:	4b2a      	ldr	r3, [pc, #168]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a7c:	f7ff f9ee 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003a80:	6178      	str	r0, [r7, #20]
 8003a82:	e014      	b.n	8003aae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a84:	4b25      	ldr	r3, [pc, #148]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a88:	4a24      	ldr	r2, [pc, #144]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a90:	4b22      	ldr	r3, [pc, #136]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003a9c:	f7ff f9de 	bl	8002e5c <HAL_PWREx_GetVoltageRange>
 8003aa0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8003b1c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d10b      	bne.n	8003ace <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b80      	cmp	r3, #128	@ 0x80
 8003aba:	d919      	bls.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2ba0      	cmp	r3, #160	@ 0xa0
 8003ac0:	d902      	bls.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	e013      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ac8:	2301      	movs	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	e010      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b80      	cmp	r3, #128	@ 0x80
 8003ad2:	d902      	bls.n	8003ada <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	e00a      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b80      	cmp	r3, #128	@ 0x80
 8003ade:	d102      	bne.n	8003ae6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	613b      	str	r3, [r7, #16]
 8003ae4:	e004      	b.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b70      	cmp	r3, #112	@ 0x70
 8003aea:	d101      	bne.n	8003af0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003aec:	2301      	movs	r3, #1
 8003aee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003af0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f023 0207 	bic.w	r2, r3, #7
 8003af8:	4909      	ldr	r1, [pc, #36]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	693a      	ldr	r2, [r7, #16]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d001      	beq.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40022000 	.word	0x40022000

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b30:	2300      	movs	r3, #0
 8003b32:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d041      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b48:	d02a      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003b4a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003b4e:	d824      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b54:	d008      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b5a:	d81e      	bhi.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b64:	d010      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b66:	e018      	b.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b68:	4b86      	ldr	r3, [pc, #536]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4a85      	ldr	r2, [pc, #532]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b72:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b74:	e015      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fabb 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 8003b82:	4603      	mov	r3, r0
 8003b84:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b86:	e00c      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3320      	adds	r3, #32
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fba6 	bl	80042e0 <RCCEx_PLLSAI2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b98:	e003      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	74fb      	strb	r3, [r7, #19]
      break;
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ba0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10b      	bne.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ba8:	4b76      	ldr	r3, [pc, #472]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003bb6:	4973      	ldr	r1, [pc, #460]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003bbe:	e001      	b.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc0:	7cfb      	ldrb	r3, [r7, #19]
 8003bc2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d041      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bd4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bd8:	d02a      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003bda:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003bde:	d824      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003be0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003be4:	d008      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003be6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bea:	d81e      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003bf6:	e018      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003bf8:	4b62      	ldr	r3, [pc, #392]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a61      	ldr	r2, [pc, #388]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c02:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c04:	e015      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fa73 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c16:	e00c      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3320      	adds	r3, #32
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fb5e 	bl	80042e0 <RCCEx_PLLSAI2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003c28:	e003      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	74fb      	strb	r3, [r7, #19]
      break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003c30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c32:	7cfb      	ldrb	r3, [r7, #19]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003c38:	4b52      	ldr	r3, [pc, #328]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c46:	494f      	ldr	r1, [pc, #316]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003c4e:	e001      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a0 	beq.w	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c66:	4b47      	ldr	r3, [pc, #284]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003c76:	2300      	movs	r3, #0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7c:	4b41      	ldr	r3, [pc, #260]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c80:	4a40      	ldr	r2, [pc, #256]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c88:	4b3e      	ldr	r3, [pc, #248]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c94:	2301      	movs	r3, #1
 8003c96:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c98:	4b3b      	ldr	r3, [pc, #236]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a3a      	ldr	r2, [pc, #232]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ca2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ca4:	f7fe f81a 	bl	8001cdc <HAL_GetTick>
 8003ca8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003caa:	e009      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe f816 	bl	8001cdc <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d902      	bls.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	74fb      	strb	r3, [r7, #19]
        break;
 8003cbe:	e005      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003cc0:	4b31      	ldr	r3, [pc, #196]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d0ef      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003ccc:	7cfb      	ldrb	r3, [r7, #19]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d15c      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cdc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d01f      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d019      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cf0:	4b24      	ldr	r3, [pc, #144]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cfa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cfc:	4b21      	ldr	r3, [pc, #132]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	4a20      	ldr	r2, [pc, #128]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d12:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d1c:	4a19      	ldr	r2, [pc, #100]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2e:	f7fd ffd5 	bl	8001cdc <HAL_GetTick>
 8003d32:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d34:	e00b      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fd ffd1 	bl	8001cdc <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d902      	bls.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	74fb      	strb	r3, [r7, #19]
            break;
 8003d4c:	e006      	b.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0ec      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003d5c:	7cfb      	ldrb	r3, [r7, #19]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d72:	4904      	ldr	r1, [pc, #16]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003d7a:	e009      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
 8003d80:	e006      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003d82:	bf00      	nop
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d90:	7c7b      	ldrb	r3, [r7, #17]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	4b9e      	ldr	r3, [pc, #632]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d9a:	4a9d      	ldr	r2, [pc, #628]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00a      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003dae:	4b98      	ldr	r3, [pc, #608]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003db4:	f023 0203 	bic.w	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbc:	4994      	ldr	r1, [pc, #592]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dd0:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd6:	f023 020c 	bic.w	r2, r3, #12
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dde:	498c      	ldr	r1, [pc, #560]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003df2:	4b87      	ldr	r3, [pc, #540]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e00:	4983      	ldr	r1, [pc, #524]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0308 	and.w	r3, r3, #8
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e14:	4b7e      	ldr	r3, [pc, #504]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e22:	497b      	ldr	r1, [pc, #492]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0310 	and.w	r3, r3, #16
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e36:	4b76      	ldr	r3, [pc, #472]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e3c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e44:	4972      	ldr	r1, [pc, #456]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0320 	and.w	r3, r3, #32
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e58:	4b6d      	ldr	r3, [pc, #436]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e5e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e66:	496a      	ldr	r1, [pc, #424]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e7a:	4b65      	ldr	r3, [pc, #404]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e80:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e88:	4961      	ldr	r1, [pc, #388]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e9c:	4b5c      	ldr	r3, [pc, #368]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eaa:	4959      	ldr	r1, [pc, #356]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ebe:	4b54      	ldr	r3, [pc, #336]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ec4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ecc:	4950      	ldr	r1, [pc, #320]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ee6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eee:	4948      	ldr	r1, [pc, #288]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f02:	4b43      	ldr	r3, [pc, #268]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f10:	493f      	ldr	r1, [pc, #252]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d028      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f24:	4b3a      	ldr	r3, [pc, #232]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f32:	4937      	ldr	r1, [pc, #220]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f42:	d106      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b32      	ldr	r3, [pc, #200]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a31      	ldr	r2, [pc, #196]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
 8003f50:	e011      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f5a:	d10c      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	2101      	movs	r1, #1
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 f8c8 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003f6c:	7cfb      	ldrb	r3, [r7, #19]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d028      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f82:	4b23      	ldr	r3, [pc, #140]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f90:	491f      	ldr	r1, [pc, #124]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f92:	4313      	orrs	r3, r2
 8003f94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fa0:	d106      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a1a      	ldr	r2, [pc, #104]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003fac:	60d3      	str	r3, [r2, #12]
 8003fae:	e011      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb8:	d10c      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f899 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d02b      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fee:	4908      	ldr	r1, [pc, #32]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ffe:	d109      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004000:	4b03      	ldr	r3, [pc, #12]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	4a02      	ldr	r2, [pc, #8]	@ (8004010 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800400a:	60d3      	str	r3, [r2, #12]
 800400c:	e014      	b.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800400e:	bf00      	nop
 8004010:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004018:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800401c:	d10c      	bne.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3304      	adds	r3, #4
 8004022:	2101      	movs	r1, #1
 8004024:	4618      	mov	r0, r3
 8004026:	f000 f867 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 800402a:	4603      	mov	r3, r0
 800402c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800402e:	7cfb      	ldrb	r3, [r7, #19]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d001      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004034:	7cfb      	ldrb	r3, [r7, #19]
 8004036:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d02f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004044:	4b2b      	ldr	r3, [pc, #172]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004052:	4928      	ldr	r1, [pc, #160]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800405e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004062:	d10d      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3304      	adds	r3, #4
 8004068:	2102      	movs	r1, #2
 800406a:	4618      	mov	r0, r3
 800406c:	f000 f844 	bl	80040f8 <RCCEx_PLLSAI1_Config>
 8004070:	4603      	mov	r3, r0
 8004072:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d014      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800407a:	7cfb      	ldrb	r3, [r7, #19]
 800407c:	74bb      	strb	r3, [r7, #18]
 800407e:	e011      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004084:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004088:	d10c      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3320      	adds	r3, #32
 800408e:	2102      	movs	r1, #2
 8004090:	4618      	mov	r0, r3
 8004092:	f000 f925 	bl	80042e0 <RCCEx_PLLSAI2_Config>
 8004096:	4603      	mov	r3, r0
 8004098:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800409a:	7cfb      	ldrb	r3, [r7, #19]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80040a0:	7cfb      	ldrb	r3, [r7, #19]
 80040a2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80040b0:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040be:	490d      	ldr	r1, [pc, #52]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80040d2:	4b08      	ldr	r3, [pc, #32]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040e2:	4904      	ldr	r1, [pc, #16]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80040ea:	7cbb      	ldrb	r3, [r7, #18]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	40021000 	.word	0x40021000

080040f8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004102:	2300      	movs	r3, #0
 8004104:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004106:	4b75      	ldr	r3, [pc, #468]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d018      	beq.n	8004144 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004112:	4b72      	ldr	r3, [pc, #456]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	f003 0203 	and.w	r2, r3, #3
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	429a      	cmp	r2, r3
 8004120:	d10d      	bne.n	800413e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
       ||
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800412a:	4b6c      	ldr	r3, [pc, #432]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
       ||
 800413a:	429a      	cmp	r2, r3
 800413c:	d047      	beq.n	80041ce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	e044      	b.n	80041ce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d018      	beq.n	800417e <RCCEx_PLLSAI1_Config+0x86>
 800414c:	2b03      	cmp	r3, #3
 800414e:	d825      	bhi.n	800419c <RCCEx_PLLSAI1_Config+0xa4>
 8004150:	2b01      	cmp	r3, #1
 8004152:	d002      	beq.n	800415a <RCCEx_PLLSAI1_Config+0x62>
 8004154:	2b02      	cmp	r3, #2
 8004156:	d009      	beq.n	800416c <RCCEx_PLLSAI1_Config+0x74>
 8004158:	e020      	b.n	800419c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800415a:	4b60      	ldr	r3, [pc, #384]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d11d      	bne.n	80041a2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800416a:	e01a      	b.n	80041a2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800416c:	4b5b      	ldr	r3, [pc, #364]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d116      	bne.n	80041a6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800417c:	e013      	b.n	80041a6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800417e:	4b57      	ldr	r3, [pc, #348]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10f      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800418a:	4b54      	ldr	r3, [pc, #336]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d109      	bne.n	80041aa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800419a:	e006      	b.n	80041aa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	73fb      	strb	r3, [r7, #15]
      break;
 80041a0:	e004      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a2:	bf00      	nop
 80041a4:	e002      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041a6:	bf00      	nop
 80041a8:	e000      	b.n	80041ac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80041aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10d      	bne.n	80041ce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80041b2:	4b4a      	ldr	r3, [pc, #296]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6819      	ldr	r1, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	430b      	orrs	r3, r1
 80041c8:	4944      	ldr	r1, [pc, #272]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d17d      	bne.n	80042d0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80041d4:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a40      	ldr	r2, [pc, #256]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80041de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041e0:	f7fd fd7c 	bl	8001cdc <HAL_GetTick>
 80041e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041e6:	e009      	b.n	80041fc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041e8:	f7fd fd78 	bl	8001cdc <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d902      	bls.n	80041fc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	73fb      	strb	r3, [r7, #15]
        break;
 80041fa:	e005      	b.n	8004208 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80041fc:	4b37      	ldr	r3, [pc, #220]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d1ef      	bne.n	80041e8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d160      	bne.n	80042d0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d111      	bne.n	8004238 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004214:	4b31      	ldr	r3, [pc, #196]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800421c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	0211      	lsls	r1, r2, #8
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68d2      	ldr	r2, [r2, #12]
 800422a:	0912      	lsrs	r2, r2, #4
 800422c:	0452      	lsls	r2, r2, #17
 800422e:	430a      	orrs	r2, r1
 8004230:	492a      	ldr	r1, [pc, #168]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004232:	4313      	orrs	r3, r2
 8004234:	610b      	str	r3, [r1, #16]
 8004236:	e027      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d112      	bne.n	8004264 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800423e:	4b27      	ldr	r3, [pc, #156]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004246:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	0211      	lsls	r1, r2, #8
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6912      	ldr	r2, [r2, #16]
 8004254:	0852      	lsrs	r2, r2, #1
 8004256:	3a01      	subs	r2, #1
 8004258:	0552      	lsls	r2, r2, #21
 800425a:	430a      	orrs	r2, r1
 800425c:	491f      	ldr	r1, [pc, #124]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800425e:	4313      	orrs	r3, r2
 8004260:	610b      	str	r3, [r1, #16]
 8004262:	e011      	b.n	8004288 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800426c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6892      	ldr	r2, [r2, #8]
 8004274:	0211      	lsls	r1, r2, #8
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6952      	ldr	r2, [r2, #20]
 800427a:	0852      	lsrs	r2, r2, #1
 800427c:	3a01      	subs	r2, #1
 800427e:	0652      	lsls	r2, r2, #25
 8004280:	430a      	orrs	r2, r1
 8004282:	4916      	ldr	r1, [pc, #88]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004284:	4313      	orrs	r3, r2
 8004286:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004288:	4b14      	ldr	r3, [pc, #80]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a13      	ldr	r2, [pc, #76]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800428e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004292:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004294:	f7fd fd22 	bl	8001cdc <HAL_GetTick>
 8004298:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800429a:	e009      	b.n	80042b0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800429c:	f7fd fd1e 	bl	8001cdc <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d902      	bls.n	80042b0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	73fb      	strb	r3, [r7, #15]
          break;
 80042ae:	e005      	b.n	80042bc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80042b0:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d0ef      	beq.n	800429c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80042bc:	7bfb      	ldrb	r3, [r7, #15]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80042c2:	4b06      	ldr	r3, [pc, #24]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c4:	691a      	ldr	r2, [r3, #16]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	4904      	ldr	r1, [pc, #16]	@ (80042dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80042d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40021000 	.word	0x40021000

080042e0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b084      	sub	sp, #16
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d018      	beq.n	800432c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80042fa:	4b67      	ldr	r3, [pc, #412]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f003 0203 	and.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d10d      	bne.n	8004326 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
       ||
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004312:	4b61      	ldr	r3, [pc, #388]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
       ||
 8004322:	429a      	cmp	r2, r3
 8004324:	d047      	beq.n	80043b6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
 800432a:	e044      	b.n	80043b6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b03      	cmp	r3, #3
 8004332:	d018      	beq.n	8004366 <RCCEx_PLLSAI2_Config+0x86>
 8004334:	2b03      	cmp	r3, #3
 8004336:	d825      	bhi.n	8004384 <RCCEx_PLLSAI2_Config+0xa4>
 8004338:	2b01      	cmp	r3, #1
 800433a:	d002      	beq.n	8004342 <RCCEx_PLLSAI2_Config+0x62>
 800433c:	2b02      	cmp	r3, #2
 800433e:	d009      	beq.n	8004354 <RCCEx_PLLSAI2_Config+0x74>
 8004340:	e020      	b.n	8004384 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004342:	4b55      	ldr	r3, [pc, #340]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d11d      	bne.n	800438a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004352:	e01a      	b.n	800438a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004354:	4b50      	ldr	r3, [pc, #320]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800435c:	2b00      	cmp	r3, #0
 800435e:	d116      	bne.n	800438e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004364:	e013      	b.n	800438e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004366:	4b4c      	ldr	r3, [pc, #304]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10f      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004372:	4b49      	ldr	r3, [pc, #292]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d109      	bne.n	8004392 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004382:	e006      	b.n	8004392 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e004      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800438a:	bf00      	nop
 800438c:	e002      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800438e:	bf00      	nop
 8004390:	e000      	b.n	8004394 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004392:	bf00      	nop
    }

    if(status == HAL_OK)
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10d      	bne.n	80043b6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800439a:	4b3f      	ldr	r3, [pc, #252]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	430b      	orrs	r3, r1
 80043b0:	4939      	ldr	r1, [pc, #228]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80043b6:	7bfb      	ldrb	r3, [r7, #15]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d167      	bne.n	800448c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80043bc:	4b36      	ldr	r3, [pc, #216]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a35      	ldr	r2, [pc, #212]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043c8:	f7fd fc88 	bl	8001cdc <HAL_GetTick>
 80043cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043ce:	e009      	b.n	80043e4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043d0:	f7fd fc84 	bl	8001cdc <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d902      	bls.n	80043e4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	73fb      	strb	r3, [r7, #15]
        break;
 80043e2:	e005      	b.n	80043f0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80043e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1ef      	bne.n	80043d0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d14a      	bne.n	800448c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d111      	bne.n	8004420 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80043fc:	4b26      	ldr	r3, [pc, #152]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043fe:	695b      	ldr	r3, [r3, #20]
 8004400:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004404:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6892      	ldr	r2, [r2, #8]
 800440c:	0211      	lsls	r1, r2, #8
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68d2      	ldr	r2, [r2, #12]
 8004412:	0912      	lsrs	r2, r2, #4
 8004414:	0452      	lsls	r2, r2, #17
 8004416:	430a      	orrs	r2, r1
 8004418:	491f      	ldr	r1, [pc, #124]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	614b      	str	r3, [r1, #20]
 800441e:	e011      	b.n	8004444 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004420:	4b1d      	ldr	r3, [pc, #116]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004428:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6892      	ldr	r2, [r2, #8]
 8004430:	0211      	lsls	r1, r2, #8
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6912      	ldr	r2, [r2, #16]
 8004436:	0852      	lsrs	r2, r2, #1
 8004438:	3a01      	subs	r2, #1
 800443a:	0652      	lsls	r2, r2, #25
 800443c:	430a      	orrs	r2, r1
 800443e:	4916      	ldr	r1, [pc, #88]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004444:	4b14      	ldr	r3, [pc, #80]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a13      	ldr	r2, [pc, #76]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800444a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800444e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004450:	f7fd fc44 	bl	8001cdc <HAL_GetTick>
 8004454:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004456:	e009      	b.n	800446c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004458:	f7fd fc40 	bl	8001cdc <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d902      	bls.n	800446c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	73fb      	strb	r3, [r7, #15]
          break;
 800446a:	e005      	b.n	8004478 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800446c:	4b0a      	ldr	r3, [pc, #40]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0ef      	beq.n	8004458 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004478:	7bfb      	ldrb	r3, [r7, #15]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d106      	bne.n	800448c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800447e:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	695a      	ldr	r2, [r3, #20]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	4904      	ldr	r1, [pc, #16]	@ (8004498 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800448c:	7bfb      	ldrb	r3, [r7, #15]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop
 8004498:	40021000 	.word	0x40021000

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e040      	b.n	8004530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fd fa0e 	bl	80018e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	@ 0x24
 80044c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 fb6a 	bl	8004bbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8af 	bl	800464c <UART_SetConfig>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e01b      	b.n	8004530 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 fbe9 	bl	8004d00 <UART_CheckIdleState>
 800452e:	4603      	mov	r3, r0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b08a      	sub	sp, #40	@ 0x28
 800453c:	af02      	add	r7, sp, #8
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	603b      	str	r3, [r7, #0]
 8004544:	4613      	mov	r3, r2
 8004546:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800454c:	2b20      	cmp	r3, #32
 800454e:	d177      	bne.n	8004640 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d002      	beq.n	800455c <HAL_UART_Transmit+0x24>
 8004556:	88fb      	ldrh	r3, [r7, #6]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e070      	b.n	8004642 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	@ 0x21
 800456c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800456e:	f7fd fbb5 	bl	8001cdc <HAL_GetTick>
 8004572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	88fa      	ldrh	r2, [r7, #6]
 8004580:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800458c:	d108      	bne.n	80045a0 <HAL_UART_Transmit+0x68>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d104      	bne.n	80045a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	e003      	b.n	80045a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045a8:	e02f      	b.n	800460a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	9300      	str	r3, [sp, #0]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	2200      	movs	r2, #0
 80045b2:	2180      	movs	r1, #128	@ 0x80
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fc4b 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e03b      	b.n	8004642 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10b      	bne.n	80045e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	881a      	ldrh	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045dc:	b292      	uxth	r2, r2
 80045de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	3302      	adds	r3, #2
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	e007      	b.n	80045f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	781a      	ldrb	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d1c9      	bne.n	80045aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	2140      	movs	r1, #64	@ 0x40
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 fc15 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d004      	beq.n	8004636 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e005      	b.n	8004642 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2220      	movs	r2, #32
 800463a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b08a      	sub	sp, #40	@ 0x28
 8004652:	af00      	add	r7, sp, #0
 8004654:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	431a      	orrs	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	431a      	orrs	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	4313      	orrs	r3, r2
 8004672:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	4ba4      	ldr	r3, [pc, #656]	@ (800490c <UART_SetConfig+0x2c0>)
 800467c:	4013      	ands	r3, r2
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004684:	430b      	orrs	r3, r1
 8004686:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a99      	ldr	r2, [pc, #612]	@ (8004910 <UART_SetConfig+0x2c4>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d004      	beq.n	80046b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b4:	4313      	orrs	r3, r2
 80046b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a90      	ldr	r2, [pc, #576]	@ (8004914 <UART_SetConfig+0x2c8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d126      	bne.n	8004724 <UART_SetConfig+0xd8>
 80046d6:	4b90      	ldr	r3, [pc, #576]	@ (8004918 <UART_SetConfig+0x2cc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046dc:	f003 0303 	and.w	r3, r3, #3
 80046e0:	2b03      	cmp	r3, #3
 80046e2:	d81b      	bhi.n	800471c <UART_SetConfig+0xd0>
 80046e4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <UART_SetConfig+0xa0>)
 80046e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ea:	bf00      	nop
 80046ec:	080046fd 	.word	0x080046fd
 80046f0:	0800470d 	.word	0x0800470d
 80046f4:	08004705 	.word	0x08004705
 80046f8:	08004715 	.word	0x08004715
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004702:	e116      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004704:	2302      	movs	r3, #2
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800470a:	e112      	b.n	8004932 <UART_SetConfig+0x2e6>
 800470c:	2304      	movs	r3, #4
 800470e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004712:	e10e      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004714:	2308      	movs	r3, #8
 8004716:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800471a:	e10a      	b.n	8004932 <UART_SetConfig+0x2e6>
 800471c:	2310      	movs	r3, #16
 800471e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004722:	e106      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7c      	ldr	r2, [pc, #496]	@ (800491c <UART_SetConfig+0x2d0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d138      	bne.n	80047a0 <UART_SetConfig+0x154>
 800472e:	4b7a      	ldr	r3, [pc, #488]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004734:	f003 030c 	and.w	r3, r3, #12
 8004738:	2b0c      	cmp	r3, #12
 800473a:	d82d      	bhi.n	8004798 <UART_SetConfig+0x14c>
 800473c:	a201      	add	r2, pc, #4	@ (adr r2, 8004744 <UART_SetConfig+0xf8>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004779 	.word	0x08004779
 8004748:	08004799 	.word	0x08004799
 800474c:	08004799 	.word	0x08004799
 8004750:	08004799 	.word	0x08004799
 8004754:	08004789 	.word	0x08004789
 8004758:	08004799 	.word	0x08004799
 800475c:	08004799 	.word	0x08004799
 8004760:	08004799 	.word	0x08004799
 8004764:	08004781 	.word	0x08004781
 8004768:	08004799 	.word	0x08004799
 800476c:	08004799 	.word	0x08004799
 8004770:	08004799 	.word	0x08004799
 8004774:	08004791 	.word	0x08004791
 8004778:	2300      	movs	r3, #0
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800477e:	e0d8      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004780:	2302      	movs	r3, #2
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004786:	e0d4      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004788:	2304      	movs	r3, #4
 800478a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800478e:	e0d0      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004790:	2308      	movs	r3, #8
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004796:	e0cc      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004798:	2310      	movs	r3, #16
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800479e:	e0c8      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004920 <UART_SetConfig+0x2d4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d125      	bne.n	80047f6 <UART_SetConfig+0x1aa>
 80047aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004918 <UART_SetConfig+0x2cc>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80047b4:	2b30      	cmp	r3, #48	@ 0x30
 80047b6:	d016      	beq.n	80047e6 <UART_SetConfig+0x19a>
 80047b8:	2b30      	cmp	r3, #48	@ 0x30
 80047ba:	d818      	bhi.n	80047ee <UART_SetConfig+0x1a2>
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d00a      	beq.n	80047d6 <UART_SetConfig+0x18a>
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d814      	bhi.n	80047ee <UART_SetConfig+0x1a2>
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <UART_SetConfig+0x182>
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d008      	beq.n	80047de <UART_SetConfig+0x192>
 80047cc:	e00f      	b.n	80047ee <UART_SetConfig+0x1a2>
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047d4:	e0ad      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047d6:	2302      	movs	r3, #2
 80047d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047dc:	e0a9      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047de:	2304      	movs	r3, #4
 80047e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047e4:	e0a5      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047e6:	2308      	movs	r3, #8
 80047e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047ec:	e0a1      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047ee:	2310      	movs	r3, #16
 80047f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80047f4:	e09d      	b.n	8004932 <UART_SetConfig+0x2e6>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004924 <UART_SetConfig+0x2d8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d125      	bne.n	800484c <UART_SetConfig+0x200>
 8004800:	4b45      	ldr	r3, [pc, #276]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800480a:	2bc0      	cmp	r3, #192	@ 0xc0
 800480c:	d016      	beq.n	800483c <UART_SetConfig+0x1f0>
 800480e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004810:	d818      	bhi.n	8004844 <UART_SetConfig+0x1f8>
 8004812:	2b80      	cmp	r3, #128	@ 0x80
 8004814:	d00a      	beq.n	800482c <UART_SetConfig+0x1e0>
 8004816:	2b80      	cmp	r3, #128	@ 0x80
 8004818:	d814      	bhi.n	8004844 <UART_SetConfig+0x1f8>
 800481a:	2b00      	cmp	r3, #0
 800481c:	d002      	beq.n	8004824 <UART_SetConfig+0x1d8>
 800481e:	2b40      	cmp	r3, #64	@ 0x40
 8004820:	d008      	beq.n	8004834 <UART_SetConfig+0x1e8>
 8004822:	e00f      	b.n	8004844 <UART_SetConfig+0x1f8>
 8004824:	2300      	movs	r3, #0
 8004826:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800482a:	e082      	b.n	8004932 <UART_SetConfig+0x2e6>
 800482c:	2302      	movs	r3, #2
 800482e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004832:	e07e      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800483a:	e07a      	b.n	8004932 <UART_SetConfig+0x2e6>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004842:	e076      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800484a:	e072      	b.n	8004932 <UART_SetConfig+0x2e6>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a35      	ldr	r2, [pc, #212]	@ (8004928 <UART_SetConfig+0x2dc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d12a      	bne.n	80048ac <UART_SetConfig+0x260>
 8004856:	4b30      	ldr	r3, [pc, #192]	@ (8004918 <UART_SetConfig+0x2cc>)
 8004858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800485c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004860:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004864:	d01a      	beq.n	800489c <UART_SetConfig+0x250>
 8004866:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800486a:	d81b      	bhi.n	80048a4 <UART_SetConfig+0x258>
 800486c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004870:	d00c      	beq.n	800488c <UART_SetConfig+0x240>
 8004872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004876:	d815      	bhi.n	80048a4 <UART_SetConfig+0x258>
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <UART_SetConfig+0x238>
 800487c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004880:	d008      	beq.n	8004894 <UART_SetConfig+0x248>
 8004882:	e00f      	b.n	80048a4 <UART_SetConfig+0x258>
 8004884:	2300      	movs	r3, #0
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488a:	e052      	b.n	8004932 <UART_SetConfig+0x2e6>
 800488c:	2302      	movs	r3, #2
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e04e      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004894:	2304      	movs	r3, #4
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e04a      	b.n	8004932 <UART_SetConfig+0x2e6>
 800489c:	2308      	movs	r3, #8
 800489e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048a2:	e046      	b.n	8004932 <UART_SetConfig+0x2e6>
 80048a4:	2310      	movs	r3, #16
 80048a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048aa:	e042      	b.n	8004932 <UART_SetConfig+0x2e6>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a17      	ldr	r2, [pc, #92]	@ (8004910 <UART_SetConfig+0x2c4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d13a      	bne.n	800492c <UART_SetConfig+0x2e0>
 80048b6:	4b18      	ldr	r3, [pc, #96]	@ (8004918 <UART_SetConfig+0x2cc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048c4:	d01a      	beq.n	80048fc <UART_SetConfig+0x2b0>
 80048c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80048ca:	d81b      	bhi.n	8004904 <UART_SetConfig+0x2b8>
 80048cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d0:	d00c      	beq.n	80048ec <UART_SetConfig+0x2a0>
 80048d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048d6:	d815      	bhi.n	8004904 <UART_SetConfig+0x2b8>
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <UART_SetConfig+0x298>
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048e0:	d008      	beq.n	80048f4 <UART_SetConfig+0x2a8>
 80048e2:	e00f      	b.n	8004904 <UART_SetConfig+0x2b8>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ea:	e022      	b.n	8004932 <UART_SetConfig+0x2e6>
 80048ec:	2302      	movs	r3, #2
 80048ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f2:	e01e      	b.n	8004932 <UART_SetConfig+0x2e6>
 80048f4:	2304      	movs	r3, #4
 80048f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fa:	e01a      	b.n	8004932 <UART_SetConfig+0x2e6>
 80048fc:	2308      	movs	r3, #8
 80048fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004902:	e016      	b.n	8004932 <UART_SetConfig+0x2e6>
 8004904:	2310      	movs	r3, #16
 8004906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490a:	e012      	b.n	8004932 <UART_SetConfig+0x2e6>
 800490c:	efff69f3 	.word	0xefff69f3
 8004910:	40008000 	.word	0x40008000
 8004914:	40013800 	.word	0x40013800
 8004918:	40021000 	.word	0x40021000
 800491c:	40004400 	.word	0x40004400
 8004920:	40004800 	.word	0x40004800
 8004924:	40004c00 	.word	0x40004c00
 8004928:	40005000 	.word	0x40005000
 800492c:	2310      	movs	r3, #16
 800492e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a9f      	ldr	r2, [pc, #636]	@ (8004bb4 <UART_SetConfig+0x568>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d17a      	bne.n	8004a32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800493c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004940:	2b08      	cmp	r3, #8
 8004942:	d824      	bhi.n	800498e <UART_SetConfig+0x342>
 8004944:	a201      	add	r2, pc, #4	@ (adr r2, 800494c <UART_SetConfig+0x300>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	08004971 	.word	0x08004971
 8004950:	0800498f 	.word	0x0800498f
 8004954:	08004979 	.word	0x08004979
 8004958:	0800498f 	.word	0x0800498f
 800495c:	0800497f 	.word	0x0800497f
 8004960:	0800498f 	.word	0x0800498f
 8004964:	0800498f 	.word	0x0800498f
 8004968:	0800498f 	.word	0x0800498f
 800496c:	08004987 	.word	0x08004987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004970:	f7ff f84c 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004974:	61f8      	str	r0, [r7, #28]
        break;
 8004976:	e010      	b.n	800499a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004978:	4b8f      	ldr	r3, [pc, #572]	@ (8004bb8 <UART_SetConfig+0x56c>)
 800497a:	61fb      	str	r3, [r7, #28]
        break;
 800497c:	e00d      	b.n	800499a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800497e:	f7fe ffad 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8004982:	61f8      	str	r0, [r7, #28]
        break;
 8004984:	e009      	b.n	800499a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498a:	61fb      	str	r3, [r7, #28]
        break;
 800498c:	e005      	b.n	800499a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004998:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 80fb 	beq.w	8004b98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	4413      	add	r3, r2
 80049ac:	69fa      	ldr	r2, [r7, #28]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d305      	bcc.n	80049be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d903      	bls.n	80049c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80049c4:	e0e8      	b.n	8004b98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	2200      	movs	r2, #0
 80049ca:	461c      	mov	r4, r3
 80049cc:	4615      	mov	r5, r2
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	022b      	lsls	r3, r5, #8
 80049d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80049dc:	0222      	lsls	r2, r4, #8
 80049de:	68f9      	ldr	r1, [r7, #12]
 80049e0:	6849      	ldr	r1, [r1, #4]
 80049e2:	0849      	lsrs	r1, r1, #1
 80049e4:	2000      	movs	r0, #0
 80049e6:	4688      	mov	r8, r1
 80049e8:	4681      	mov	r9, r0
 80049ea:	eb12 0a08 	adds.w	sl, r2, r8
 80049ee:	eb43 0b09 	adc.w	fp, r3, r9
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	603b      	str	r3, [r7, #0]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a00:	4650      	mov	r0, sl
 8004a02:	4659      	mov	r1, fp
 8004a04:	f7fc f8d0 	bl	8000ba8 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a16:	d308      	bcc.n	8004a2a <UART_SetConfig+0x3de>
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a1e:	d204      	bcs.n	8004a2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	60da      	str	r2, [r3, #12]
 8004a28:	e0b6      	b.n	8004b98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004a30:	e0b2      	b.n	8004b98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a3a:	d15e      	bne.n	8004afa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d828      	bhi.n	8004a96 <UART_SetConfig+0x44a>
 8004a44:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <UART_SetConfig+0x400>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08004a71 	.word	0x08004a71
 8004a50:	08004a79 	.word	0x08004a79
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a97 	.word	0x08004a97
 8004a5c:	08004a87 	.word	0x08004a87
 8004a60:	08004a97 	.word	0x08004a97
 8004a64:	08004a97 	.word	0x08004a97
 8004a68:	08004a97 	.word	0x08004a97
 8004a6c:	08004a8f 	.word	0x08004a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a70:	f7fe ffcc 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004a74:	61f8      	str	r0, [r7, #28]
        break;
 8004a76:	e014      	b.n	8004aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe ffde 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	61f8      	str	r0, [r7, #28]
        break;
 8004a7e:	e010      	b.n	8004aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a80:	4b4d      	ldr	r3, [pc, #308]	@ (8004bb8 <UART_SetConfig+0x56c>)
 8004a82:	61fb      	str	r3, [r7, #28]
        break;
 8004a84:	e00d      	b.n	8004aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a86:	f7fe ff29 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8004a8a:	61f8      	str	r0, [r7, #28]
        break;
 8004a8c:	e009      	b.n	8004aa2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a92:	61fb      	str	r3, [r7, #28]
        break;
 8004a94:	e005      	b.n	8004aa2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d077      	beq.n	8004b98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	005a      	lsls	r2, r3, #1
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	085b      	lsrs	r3, r3, #1
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b0f      	cmp	r3, #15
 8004ac2:	d916      	bls.n	8004af2 <UART_SetConfig+0x4a6>
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d212      	bcs.n	8004af2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	f023 030f 	bic.w	r3, r3, #15
 8004ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	085b      	lsrs	r3, r3, #1
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	8afb      	ldrh	r3, [r7, #22]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	8afa      	ldrh	r2, [r7, #22]
 8004aee:	60da      	str	r2, [r3, #12]
 8004af0:	e052      	b.n	8004b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004af8:	e04e      	b.n	8004b98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004afa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d827      	bhi.n	8004b52 <UART_SetConfig+0x506>
 8004b02:	a201      	add	r2, pc, #4	@ (adr r2, 8004b08 <UART_SetConfig+0x4bc>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b2d 	.word	0x08004b2d
 8004b0c:	08004b35 	.word	0x08004b35
 8004b10:	08004b3d 	.word	0x08004b3d
 8004b14:	08004b53 	.word	0x08004b53
 8004b18:	08004b43 	.word	0x08004b43
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b53 	.word	0x08004b53
 8004b24:	08004b53 	.word	0x08004b53
 8004b28:	08004b4b 	.word	0x08004b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f7fe ff6e 	bl	8003a0c <HAL_RCC_GetPCLK1Freq>
 8004b30:	61f8      	str	r0, [r7, #28]
        break;
 8004b32:	e014      	b.n	8004b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7fe ff80 	bl	8003a38 <HAL_RCC_GetPCLK2Freq>
 8004b38:	61f8      	str	r0, [r7, #28]
        break;
 8004b3a:	e010      	b.n	8004b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8004bb8 <UART_SetConfig+0x56c>)
 8004b3e:	61fb      	str	r3, [r7, #28]
        break;
 8004b40:	e00d      	b.n	8004b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b42:	f7fe fecb 	bl	80038dc <HAL_RCC_GetSysClockFreq>
 8004b46:	61f8      	str	r0, [r7, #28]
        break;
 8004b48:	e009      	b.n	8004b5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4e:	61fb      	str	r3, [r7, #28]
        break;
 8004b50:	e005      	b.n	8004b5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d019      	beq.n	8004b98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	085a      	lsrs	r2, r3, #1
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	441a      	add	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	2b0f      	cmp	r3, #15
 8004b7c:	d909      	bls.n	8004b92 <UART_SetConfig+0x546>
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b84:	d205      	bcs.n	8004b92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	e002      	b.n	8004b98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3728      	adds	r7, #40	@ 0x28
 8004bac:	46bd      	mov	sp, r7
 8004bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40008000 	.word	0x40008000
 8004bb8:	00f42400 	.word	0x00f42400

08004bbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc8:	f003 0308 	and.w	r3, r3, #8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00a      	beq.n	8004c2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00a      	beq.n	8004c4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d00a      	beq.n	8004c6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	f003 0320 	and.w	r3, r3, #32
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00a      	beq.n	8004c90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d01a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004cba:	d10a      	bne.n	8004cd2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b098      	sub	sp, #96	@ 0x60
 8004d04:	af02      	add	r7, sp, #8
 8004d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d10:	f7fc ffe4 	bl	8001cdc <HAL_GetTick>
 8004d14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0308 	and.w	r3, r3, #8
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d12e      	bne.n	8004d82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f88c 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d021      	beq.n	8004d82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d52:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	461a      	mov	r2, r3
 8004d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e6      	bne.n	8004d3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e062      	b.n	8004e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d149      	bne.n	8004e24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d94:	9300      	str	r3, [sp, #0]
 8004d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f856 	bl	8004e50 <UART_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d03c      	beq.n	8004e24 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	623b      	str	r3, [r7, #32]
   return(result);
 8004db8:	6a3b      	ldr	r3, [r7, #32]
 8004dba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e6      	bne.n	8004daa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3308      	adds	r3, #8
 8004dfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dfc:	61fa      	str	r2, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69b9      	ldr	r1, [r7, #24]
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	617b      	str	r3, [r7, #20]
   return(result);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e011      	b.n	8004e48 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3758      	adds	r7, #88	@ 0x58
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	603b      	str	r3, [r7, #0]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e60:	e04f      	b.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e68:	d04b      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6a:	f7fc ff37 	bl	8001cdc <HAL_GetTick>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	1ad3      	subs	r3, r2, r3
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e04e      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d037      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b80      	cmp	r3, #128	@ 0x80
 8004e96:	d034      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b40      	cmp	r3, #64	@ 0x40
 8004e9c:	d031      	beq.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d110      	bne.n	8004ece <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f000 f838 	bl	8004f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2208      	movs	r2, #8
 8004ebe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e029      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	69db      	ldr	r3, [r3, #28]
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004edc:	d111      	bne.n	8004f02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ee6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f000 f81e 	bl	8004f2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e00f      	b.n	8004f22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69da      	ldr	r2, [r3, #28]
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	bf0c      	ite	eq
 8004f12:	2301      	moveq	r3, #1
 8004f14:	2300      	movne	r3, #0
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	461a      	mov	r2, r3
 8004f1a:	79fb      	ldrb	r3, [r7, #7]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d0a0      	beq.n	8004e62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b095      	sub	sp, #84	@ 0x54
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f3a:	e853 3f00 	ldrex	r3, [r3]
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f52:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f58:	e841 2300 	strex	r3, r2, [r1]
 8004f5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1e6      	bne.n	8004f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f023 0301 	bic.w	r3, r3, #1
 8004f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	3308      	adds	r3, #8
 8004f82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e5      	bne.n	8004f64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d118      	bne.n	8004fd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 0310 	bic.w	r3, r3, #16
 8004fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fbe:	61bb      	str	r3, [r7, #24]
 8004fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6979      	ldr	r1, [r7, #20]
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	613b      	str	r3, [r7, #16]
   return(result);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e6      	bne.n	8004fa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fe6:	bf00      	nop
 8004fe8:	3754      	adds	r7, #84	@ 0x54
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
	...

08004ff4 <std>:
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	4604      	mov	r4, r0
 8004ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8004ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005002:	6083      	str	r3, [r0, #8]
 8005004:	8181      	strh	r1, [r0, #12]
 8005006:	6643      	str	r3, [r0, #100]	@ 0x64
 8005008:	81c2      	strh	r2, [r0, #14]
 800500a:	6183      	str	r3, [r0, #24]
 800500c:	4619      	mov	r1, r3
 800500e:	2208      	movs	r2, #8
 8005010:	305c      	adds	r0, #92	@ 0x5c
 8005012:	f000 f916 	bl	8005242 <memset>
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <std+0x58>)
 8005018:	6223      	str	r3, [r4, #32]
 800501a:	4b0d      	ldr	r3, [pc, #52]	@ (8005050 <std+0x5c>)
 800501c:	6263      	str	r3, [r4, #36]	@ 0x24
 800501e:	4b0d      	ldr	r3, [pc, #52]	@ (8005054 <std+0x60>)
 8005020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <std+0x64>)
 8005024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x68>)
 8005028:	61e4      	str	r4, [r4, #28]
 800502a:	429c      	cmp	r4, r3
 800502c:	d006      	beq.n	800503c <std+0x48>
 800502e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005032:	4294      	cmp	r4, r2
 8005034:	d002      	beq.n	800503c <std+0x48>
 8005036:	33d0      	adds	r3, #208	@ 0xd0
 8005038:	429c      	cmp	r4, r3
 800503a:	d105      	bne.n	8005048 <std+0x54>
 800503c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005044:	f000 b976 	b.w	8005334 <__retarget_lock_init_recursive>
 8005048:	bd10      	pop	{r4, pc}
 800504a:	bf00      	nop
 800504c:	080051bd 	.word	0x080051bd
 8005050:	080051df 	.word	0x080051df
 8005054:	08005217 	.word	0x08005217
 8005058:	0800523b 	.word	0x0800523b
 800505c:	200007f0 	.word	0x200007f0

08005060 <stdio_exit_handler>:
 8005060:	4a02      	ldr	r2, [pc, #8]	@ (800506c <stdio_exit_handler+0xc>)
 8005062:	4903      	ldr	r1, [pc, #12]	@ (8005070 <stdio_exit_handler+0x10>)
 8005064:	4803      	ldr	r0, [pc, #12]	@ (8005074 <stdio_exit_handler+0x14>)
 8005066:	f000 b869 	b.w	800513c <_fwalk_sglue>
 800506a:	bf00      	nop
 800506c:	2000000c 	.word	0x2000000c
 8005070:	08006e13 	.word	0x08006e13
 8005074:	20000020 	.word	0x20000020

08005078 <cleanup_stdio>:
 8005078:	6841      	ldr	r1, [r0, #4]
 800507a:	4b0c      	ldr	r3, [pc, #48]	@ (80050ac <cleanup_stdio+0x34>)
 800507c:	4299      	cmp	r1, r3
 800507e:	b510      	push	{r4, lr}
 8005080:	4604      	mov	r4, r0
 8005082:	d001      	beq.n	8005088 <cleanup_stdio+0x10>
 8005084:	f001 fec5 	bl	8006e12 <_fclose_r>
 8005088:	68a1      	ldr	r1, [r4, #8]
 800508a:	4b09      	ldr	r3, [pc, #36]	@ (80050b0 <cleanup_stdio+0x38>)
 800508c:	4299      	cmp	r1, r3
 800508e:	d002      	beq.n	8005096 <cleanup_stdio+0x1e>
 8005090:	4620      	mov	r0, r4
 8005092:	f001 febe 	bl	8006e12 <_fclose_r>
 8005096:	68e1      	ldr	r1, [r4, #12]
 8005098:	4b06      	ldr	r3, [pc, #24]	@ (80050b4 <cleanup_stdio+0x3c>)
 800509a:	4299      	cmp	r1, r3
 800509c:	d004      	beq.n	80050a8 <cleanup_stdio+0x30>
 800509e:	4620      	mov	r0, r4
 80050a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050a4:	f001 beb5 	b.w	8006e12 <_fclose_r>
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	bf00      	nop
 80050ac:	200007f0 	.word	0x200007f0
 80050b0:	20000858 	.word	0x20000858
 80050b4:	200008c0 	.word	0x200008c0

080050b8 <global_stdio_init.part.0>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	4b0b      	ldr	r3, [pc, #44]	@ (80050e8 <global_stdio_init.part.0+0x30>)
 80050bc:	4c0b      	ldr	r4, [pc, #44]	@ (80050ec <global_stdio_init.part.0+0x34>)
 80050be:	4a0c      	ldr	r2, [pc, #48]	@ (80050f0 <global_stdio_init.part.0+0x38>)
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	4620      	mov	r0, r4
 80050c4:	2200      	movs	r2, #0
 80050c6:	2104      	movs	r1, #4
 80050c8:	f7ff ff94 	bl	8004ff4 <std>
 80050cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050d0:	2201      	movs	r2, #1
 80050d2:	2109      	movs	r1, #9
 80050d4:	f7ff ff8e 	bl	8004ff4 <std>
 80050d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050dc:	2202      	movs	r2, #2
 80050de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e2:	2112      	movs	r1, #18
 80050e4:	f7ff bf86 	b.w	8004ff4 <std>
 80050e8:	20000928 	.word	0x20000928
 80050ec:	200007f0 	.word	0x200007f0
 80050f0:	08005061 	.word	0x08005061

080050f4 <__sfp_lock_acquire>:
 80050f4:	4801      	ldr	r0, [pc, #4]	@ (80050fc <__sfp_lock_acquire+0x8>)
 80050f6:	f000 b91f 	b.w	8005338 <__retarget_lock_acquire_recursive>
 80050fa:	bf00      	nop
 80050fc:	20000932 	.word	0x20000932

08005100 <__sfp_lock_release>:
 8005100:	4801      	ldr	r0, [pc, #4]	@ (8005108 <__sfp_lock_release+0x8>)
 8005102:	f000 b91a 	b.w	800533a <__retarget_lock_release_recursive>
 8005106:	bf00      	nop
 8005108:	20000932 	.word	0x20000932

0800510c <__sinit>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4604      	mov	r4, r0
 8005110:	f7ff fff0 	bl	80050f4 <__sfp_lock_acquire>
 8005114:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005116:	b11b      	cbz	r3, 8005120 <__sinit+0x14>
 8005118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800511c:	f7ff bff0 	b.w	8005100 <__sfp_lock_release>
 8005120:	4b04      	ldr	r3, [pc, #16]	@ (8005134 <__sinit+0x28>)
 8005122:	6363      	str	r3, [r4, #52]	@ 0x34
 8005124:	4b04      	ldr	r3, [pc, #16]	@ (8005138 <__sinit+0x2c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1f5      	bne.n	8005118 <__sinit+0xc>
 800512c:	f7ff ffc4 	bl	80050b8 <global_stdio_init.part.0>
 8005130:	e7f2      	b.n	8005118 <__sinit+0xc>
 8005132:	bf00      	nop
 8005134:	08005079 	.word	0x08005079
 8005138:	20000928 	.word	0x20000928

0800513c <_fwalk_sglue>:
 800513c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005140:	4607      	mov	r7, r0
 8005142:	4688      	mov	r8, r1
 8005144:	4614      	mov	r4, r2
 8005146:	2600      	movs	r6, #0
 8005148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800514c:	f1b9 0901 	subs.w	r9, r9, #1
 8005150:	d505      	bpl.n	800515e <_fwalk_sglue+0x22>
 8005152:	6824      	ldr	r4, [r4, #0]
 8005154:	2c00      	cmp	r4, #0
 8005156:	d1f7      	bne.n	8005148 <_fwalk_sglue+0xc>
 8005158:	4630      	mov	r0, r6
 800515a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515e:	89ab      	ldrh	r3, [r5, #12]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d907      	bls.n	8005174 <_fwalk_sglue+0x38>
 8005164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005168:	3301      	adds	r3, #1
 800516a:	d003      	beq.n	8005174 <_fwalk_sglue+0x38>
 800516c:	4629      	mov	r1, r5
 800516e:	4638      	mov	r0, r7
 8005170:	47c0      	blx	r8
 8005172:	4306      	orrs	r6, r0
 8005174:	3568      	adds	r5, #104	@ 0x68
 8005176:	e7e9      	b.n	800514c <_fwalk_sglue+0x10>

08005178 <sprintf>:
 8005178:	b40e      	push	{r1, r2, r3}
 800517a:	b510      	push	{r4, lr}
 800517c:	b09d      	sub	sp, #116	@ 0x74
 800517e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005180:	9002      	str	r0, [sp, #8]
 8005182:	9006      	str	r0, [sp, #24]
 8005184:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005188:	480a      	ldr	r0, [pc, #40]	@ (80051b4 <sprintf+0x3c>)
 800518a:	9107      	str	r1, [sp, #28]
 800518c:	9104      	str	r1, [sp, #16]
 800518e:	490a      	ldr	r1, [pc, #40]	@ (80051b8 <sprintf+0x40>)
 8005190:	f853 2b04 	ldr.w	r2, [r3], #4
 8005194:	9105      	str	r1, [sp, #20]
 8005196:	2400      	movs	r4, #0
 8005198:	a902      	add	r1, sp, #8
 800519a:	6800      	ldr	r0, [r0, #0]
 800519c:	9301      	str	r3, [sp, #4]
 800519e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80051a0:	f000 fc3a 	bl	8005a18 <_svfprintf_r>
 80051a4:	9b02      	ldr	r3, [sp, #8]
 80051a6:	701c      	strb	r4, [r3, #0]
 80051a8:	b01d      	add	sp, #116	@ 0x74
 80051aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051ae:	b003      	add	sp, #12
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000018 	.word	0x20000018
 80051b8:	ffff0208 	.word	0xffff0208

080051bc <__sread>:
 80051bc:	b510      	push	{r4, lr}
 80051be:	460c      	mov	r4, r1
 80051c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051c4:	f000 f868 	bl	8005298 <_read_r>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	bfab      	itete	ge
 80051cc:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 80051ce:	89a3      	ldrhlt	r3, [r4, #12]
 80051d0:	181b      	addge	r3, r3, r0
 80051d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80051d6:	bfac      	ite	ge
 80051d8:	6523      	strge	r3, [r4, #80]	@ 0x50
 80051da:	81a3      	strhlt	r3, [r4, #12]
 80051dc:	bd10      	pop	{r4, pc}

080051de <__swrite>:
 80051de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e2:	461f      	mov	r7, r3
 80051e4:	898b      	ldrh	r3, [r1, #12]
 80051e6:	05db      	lsls	r3, r3, #23
 80051e8:	4605      	mov	r5, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	4616      	mov	r6, r2
 80051ee:	d505      	bpl.n	80051fc <__swrite+0x1e>
 80051f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f4:	2302      	movs	r3, #2
 80051f6:	2200      	movs	r2, #0
 80051f8:	f000 f83c 	bl	8005274 <_lseek_r>
 80051fc:	89a3      	ldrh	r3, [r4, #12]
 80051fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005206:	81a3      	strh	r3, [r4, #12]
 8005208:	4632      	mov	r2, r6
 800520a:	463b      	mov	r3, r7
 800520c:	4628      	mov	r0, r5
 800520e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005212:	f000 b853 	b.w	80052bc <_write_r>

08005216 <__sseek>:
 8005216:	b510      	push	{r4, lr}
 8005218:	460c      	mov	r4, r1
 800521a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800521e:	f000 f829 	bl	8005274 <_lseek_r>
 8005222:	1c43      	adds	r3, r0, #1
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	bf15      	itete	ne
 8005228:	6520      	strne	r0, [r4, #80]	@ 0x50
 800522a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800522e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005232:	81a3      	strheq	r3, [r4, #12]
 8005234:	bf18      	it	ne
 8005236:	81a3      	strhne	r3, [r4, #12]
 8005238:	bd10      	pop	{r4, pc}

0800523a <__sclose>:
 800523a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800523e:	f000 b809 	b.w	8005254 <_close_r>

08005242 <memset>:
 8005242:	4402      	add	r2, r0
 8005244:	4603      	mov	r3, r0
 8005246:	4293      	cmp	r3, r2
 8005248:	d100      	bne.n	800524c <memset+0xa>
 800524a:	4770      	bx	lr
 800524c:	f803 1b01 	strb.w	r1, [r3], #1
 8005250:	e7f9      	b.n	8005246 <memset+0x4>
	...

08005254 <_close_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	@ (8005270 <_close_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fc fc25 	bl	8001aae <_close>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_close_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_close_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	2000092c 	.word	0x2000092c

08005274 <_lseek_r>:
 8005274:	b538      	push	{r3, r4, r5, lr}
 8005276:	4d07      	ldr	r5, [pc, #28]	@ (8005294 <_lseek_r+0x20>)
 8005278:	4604      	mov	r4, r0
 800527a:	4608      	mov	r0, r1
 800527c:	4611      	mov	r1, r2
 800527e:	2200      	movs	r2, #0
 8005280:	602a      	str	r2, [r5, #0]
 8005282:	461a      	mov	r2, r3
 8005284:	f7fc fc3a 	bl	8001afc <_lseek>
 8005288:	1c43      	adds	r3, r0, #1
 800528a:	d102      	bne.n	8005292 <_lseek_r+0x1e>
 800528c:	682b      	ldr	r3, [r5, #0]
 800528e:	b103      	cbz	r3, 8005292 <_lseek_r+0x1e>
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	bd38      	pop	{r3, r4, r5, pc}
 8005294:	2000092c 	.word	0x2000092c

08005298 <_read_r>:
 8005298:	b538      	push	{r3, r4, r5, lr}
 800529a:	4d07      	ldr	r5, [pc, #28]	@ (80052b8 <_read_r+0x20>)
 800529c:	4604      	mov	r4, r0
 800529e:	4608      	mov	r0, r1
 80052a0:	4611      	mov	r1, r2
 80052a2:	2200      	movs	r2, #0
 80052a4:	602a      	str	r2, [r5, #0]
 80052a6:	461a      	mov	r2, r3
 80052a8:	f7fc fbc8 	bl	8001a3c <_read>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d102      	bne.n	80052b6 <_read_r+0x1e>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	b103      	cbz	r3, 80052b6 <_read_r+0x1e>
 80052b4:	6023      	str	r3, [r4, #0]
 80052b6:	bd38      	pop	{r3, r4, r5, pc}
 80052b8:	2000092c 	.word	0x2000092c

080052bc <_write_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4d07      	ldr	r5, [pc, #28]	@ (80052dc <_write_r+0x20>)
 80052c0:	4604      	mov	r4, r0
 80052c2:	4608      	mov	r0, r1
 80052c4:	4611      	mov	r1, r2
 80052c6:	2200      	movs	r2, #0
 80052c8:	602a      	str	r2, [r5, #0]
 80052ca:	461a      	mov	r2, r3
 80052cc:	f7fc fbd3 	bl	8001a76 <_write>
 80052d0:	1c43      	adds	r3, r0, #1
 80052d2:	d102      	bne.n	80052da <_write_r+0x1e>
 80052d4:	682b      	ldr	r3, [r5, #0]
 80052d6:	b103      	cbz	r3, 80052da <_write_r+0x1e>
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	bd38      	pop	{r3, r4, r5, pc}
 80052dc:	2000092c 	.word	0x2000092c

080052e0 <__errno>:
 80052e0:	4b01      	ldr	r3, [pc, #4]	@ (80052e8 <__errno+0x8>)
 80052e2:	6818      	ldr	r0, [r3, #0]
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000018 	.word	0x20000018

080052ec <__libc_init_array>:
 80052ec:	b570      	push	{r4, r5, r6, lr}
 80052ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005324 <__libc_init_array+0x38>)
 80052f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005328 <__libc_init_array+0x3c>)
 80052f2:	1b64      	subs	r4, r4, r5
 80052f4:	10a4      	asrs	r4, r4, #2
 80052f6:	2600      	movs	r6, #0
 80052f8:	42a6      	cmp	r6, r4
 80052fa:	d109      	bne.n	8005310 <__libc_init_array+0x24>
 80052fc:	4d0b      	ldr	r5, [pc, #44]	@ (800532c <__libc_init_array+0x40>)
 80052fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005330 <__libc_init_array+0x44>)
 8005300:	f004 faac 	bl	800985c <_init>
 8005304:	1b64      	subs	r4, r4, r5
 8005306:	10a4      	asrs	r4, r4, #2
 8005308:	2600      	movs	r6, #0
 800530a:	42a6      	cmp	r6, r4
 800530c:	d105      	bne.n	800531a <__libc_init_array+0x2e>
 800530e:	bd70      	pop	{r4, r5, r6, pc}
 8005310:	f855 3b04 	ldr.w	r3, [r5], #4
 8005314:	4798      	blx	r3
 8005316:	3601      	adds	r6, #1
 8005318:	e7ee      	b.n	80052f8 <__libc_init_array+0xc>
 800531a:	f855 3b04 	ldr.w	r3, [r5], #4
 800531e:	4798      	blx	r3
 8005320:	3601      	adds	r6, #1
 8005322:	e7f2      	b.n	800530a <__libc_init_array+0x1e>
 8005324:	08009c8c 	.word	0x08009c8c
 8005328:	08009c8c 	.word	0x08009c8c
 800532c:	08009c8c 	.word	0x08009c8c
 8005330:	08009c94 	.word	0x08009c94

08005334 <__retarget_lock_init_recursive>:
 8005334:	4770      	bx	lr

08005336 <__retarget_lock_close_recursive>:
 8005336:	4770      	bx	lr

08005338 <__retarget_lock_acquire_recursive>:
 8005338:	4770      	bx	lr

0800533a <__retarget_lock_release_recursive>:
 800533a:	4770      	bx	lr

0800533c <register_fini>:
 800533c:	4b02      	ldr	r3, [pc, #8]	@ (8005348 <register_fini+0xc>)
 800533e:	b113      	cbz	r3, 8005346 <register_fini+0xa>
 8005340:	4802      	ldr	r0, [pc, #8]	@ (800534c <register_fini+0x10>)
 8005342:	f000 b805 	b.w	8005350 <atexit>
 8005346:	4770      	bx	lr
 8005348:	00000000 	.word	0x00000000
 800534c:	08007069 	.word	0x08007069

08005350 <atexit>:
 8005350:	2300      	movs	r3, #0
 8005352:	4601      	mov	r1, r0
 8005354:	461a      	mov	r2, r3
 8005356:	4618      	mov	r0, r3
 8005358:	f001 beda 	b.w	8007110 <__register_exitproc>

0800535c <_malloc_trim_r>:
 800535c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005360:	4606      	mov	r6, r0
 8005362:	2008      	movs	r0, #8
 8005364:	4689      	mov	r9, r1
 8005366:	f001 fe93 	bl	8007090 <sysconf>
 800536a:	4f24      	ldr	r7, [pc, #144]	@ (80053fc <_malloc_trim_r+0xa0>)
 800536c:	4680      	mov	r8, r0
 800536e:	4630      	mov	r0, r6
 8005370:	f000 fb44 	bl	80059fc <__malloc_lock>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	685d      	ldr	r5, [r3, #4]
 8005378:	f025 0503 	bic.w	r5, r5, #3
 800537c:	f1a5 0411 	sub.w	r4, r5, #17
 8005380:	eba4 0409 	sub.w	r4, r4, r9
 8005384:	4444      	add	r4, r8
 8005386:	fbb4 f4f8 	udiv	r4, r4, r8
 800538a:	3c01      	subs	r4, #1
 800538c:	fb08 f404 	mul.w	r4, r8, r4
 8005390:	45a0      	cmp	r8, r4
 8005392:	dd05      	ble.n	80053a0 <_malloc_trim_r+0x44>
 8005394:	4630      	mov	r0, r6
 8005396:	f000 fb37 	bl	8005a08 <__malloc_unlock>
 800539a:	2000      	movs	r0, #0
 800539c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a0:	2100      	movs	r1, #0
 80053a2:	4630      	mov	r0, r6
 80053a4:	f001 fe50 	bl	8007048 <_sbrk_r>
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	442b      	add	r3, r5
 80053ac:	4298      	cmp	r0, r3
 80053ae:	d1f1      	bne.n	8005394 <_malloc_trim_r+0x38>
 80053b0:	4261      	negs	r1, r4
 80053b2:	4630      	mov	r0, r6
 80053b4:	f001 fe48 	bl	8007048 <_sbrk_r>
 80053b8:	3001      	adds	r0, #1
 80053ba:	d110      	bne.n	80053de <_malloc_trim_r+0x82>
 80053bc:	2100      	movs	r1, #0
 80053be:	4630      	mov	r0, r6
 80053c0:	f001 fe42 	bl	8007048 <_sbrk_r>
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	1a83      	subs	r3, r0, r2
 80053c8:	2b0f      	cmp	r3, #15
 80053ca:	dde3      	ble.n	8005394 <_malloc_trim_r+0x38>
 80053cc:	490c      	ldr	r1, [pc, #48]	@ (8005400 <_malloc_trim_r+0xa4>)
 80053ce:	6809      	ldr	r1, [r1, #0]
 80053d0:	1a40      	subs	r0, r0, r1
 80053d2:	490c      	ldr	r1, [pc, #48]	@ (8005404 <_malloc_trim_r+0xa8>)
 80053d4:	f043 0301 	orr.w	r3, r3, #1
 80053d8:	6008      	str	r0, [r1, #0]
 80053da:	6053      	str	r3, [r2, #4]
 80053dc:	e7da      	b.n	8005394 <_malloc_trim_r+0x38>
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	4a08      	ldr	r2, [pc, #32]	@ (8005404 <_malloc_trim_r+0xa8>)
 80053e2:	1b2d      	subs	r5, r5, r4
 80053e4:	f045 0501 	orr.w	r5, r5, #1
 80053e8:	605d      	str	r5, [r3, #4]
 80053ea:	6813      	ldr	r3, [r2, #0]
 80053ec:	4630      	mov	r0, r6
 80053ee:	1b1b      	subs	r3, r3, r4
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	f000 fb09 	bl	8005a08 <__malloc_unlock>
 80053f6:	2001      	movs	r0, #1
 80053f8:	e7d0      	b.n	800539c <_malloc_trim_r+0x40>
 80053fa:	bf00      	nop
 80053fc:	2000016c 	.word	0x2000016c
 8005400:	20000164 	.word	0x20000164
 8005404:	20000938 	.word	0x20000938

08005408 <_free_r>:
 8005408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800540a:	4604      	mov	r4, r0
 800540c:	460f      	mov	r7, r1
 800540e:	2900      	cmp	r1, #0
 8005410:	f000 80b1 	beq.w	8005576 <_free_r+0x16e>
 8005414:	f000 faf2 	bl	80059fc <__malloc_lock>
 8005418:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800541c:	4d56      	ldr	r5, [pc, #344]	@ (8005578 <_free_r+0x170>)
 800541e:	f022 0001 	bic.w	r0, r2, #1
 8005422:	f1a7 0308 	sub.w	r3, r7, #8
 8005426:	eb03 0c00 	add.w	ip, r3, r0
 800542a:	68a9      	ldr	r1, [r5, #8]
 800542c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005430:	4561      	cmp	r1, ip
 8005432:	f026 0603 	bic.w	r6, r6, #3
 8005436:	f002 0201 	and.w	r2, r2, #1
 800543a:	d11b      	bne.n	8005474 <_free_r+0x6c>
 800543c:	4406      	add	r6, r0
 800543e:	b93a      	cbnz	r2, 8005450 <_free_r+0x48>
 8005440:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	4416      	add	r6, r2
 8005448:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800544c:	60ca      	str	r2, [r1, #12]
 800544e:	6091      	str	r1, [r2, #8]
 8005450:	f046 0201 	orr.w	r2, r6, #1
 8005454:	605a      	str	r2, [r3, #4]
 8005456:	60ab      	str	r3, [r5, #8]
 8005458:	4b48      	ldr	r3, [pc, #288]	@ (800557c <_free_r+0x174>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	42b3      	cmp	r3, r6
 800545e:	d804      	bhi.n	800546a <_free_r+0x62>
 8005460:	4b47      	ldr	r3, [pc, #284]	@ (8005580 <_free_r+0x178>)
 8005462:	4620      	mov	r0, r4
 8005464:	6819      	ldr	r1, [r3, #0]
 8005466:	f7ff ff79 	bl	800535c <_malloc_trim_r>
 800546a:	4620      	mov	r0, r4
 800546c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005470:	f000 baca 	b.w	8005a08 <__malloc_unlock>
 8005474:	f8cc 6004 	str.w	r6, [ip, #4]
 8005478:	2a00      	cmp	r2, #0
 800547a:	d138      	bne.n	80054ee <_free_r+0xe6>
 800547c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8005480:	1a5b      	subs	r3, r3, r1
 8005482:	4408      	add	r0, r1
 8005484:	6899      	ldr	r1, [r3, #8]
 8005486:	f105 0708 	add.w	r7, r5, #8
 800548a:	42b9      	cmp	r1, r7
 800548c:	d031      	beq.n	80054f2 <_free_r+0xea>
 800548e:	68df      	ldr	r7, [r3, #12]
 8005490:	60cf      	str	r7, [r1, #12]
 8005492:	60b9      	str	r1, [r7, #8]
 8005494:	eb0c 0106 	add.w	r1, ip, r6
 8005498:	6849      	ldr	r1, [r1, #4]
 800549a:	07c9      	lsls	r1, r1, #31
 800549c:	d40b      	bmi.n	80054b6 <_free_r+0xae>
 800549e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80054a2:	4430      	add	r0, r6
 80054a4:	bb3a      	cbnz	r2, 80054f6 <_free_r+0xee>
 80054a6:	4e37      	ldr	r6, [pc, #220]	@ (8005584 <_free_r+0x17c>)
 80054a8:	42b1      	cmp	r1, r6
 80054aa:	d124      	bne.n	80054f6 <_free_r+0xee>
 80054ac:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80054b0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80054b4:	2201      	movs	r2, #1
 80054b6:	f040 0101 	orr.w	r1, r0, #1
 80054ba:	6059      	str	r1, [r3, #4]
 80054bc:	5018      	str	r0, [r3, r0]
 80054be:	2a00      	cmp	r2, #0
 80054c0:	d1d3      	bne.n	800546a <_free_r+0x62>
 80054c2:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80054c6:	d21b      	bcs.n	8005500 <_free_r+0xf8>
 80054c8:	08c2      	lsrs	r2, r0, #3
 80054ca:	2101      	movs	r1, #1
 80054cc:	0940      	lsrs	r0, r0, #5
 80054ce:	4081      	lsls	r1, r0
 80054d0:	6868      	ldr	r0, [r5, #4]
 80054d2:	3201      	adds	r2, #1
 80054d4:	4301      	orrs	r1, r0
 80054d6:	6069      	str	r1, [r5, #4]
 80054d8:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 80054dc:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 80054e0:	3908      	subs	r1, #8
 80054e2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80054e6:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 80054ea:	60c3      	str	r3, [r0, #12]
 80054ec:	e7bd      	b.n	800546a <_free_r+0x62>
 80054ee:	2200      	movs	r2, #0
 80054f0:	e7d0      	b.n	8005494 <_free_r+0x8c>
 80054f2:	2201      	movs	r2, #1
 80054f4:	e7ce      	b.n	8005494 <_free_r+0x8c>
 80054f6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80054fa:	60ce      	str	r6, [r1, #12]
 80054fc:	60b1      	str	r1, [r6, #8]
 80054fe:	e7da      	b.n	80054b6 <_free_r+0xae>
 8005500:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8005504:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8005508:	d214      	bcs.n	8005534 <_free_r+0x12c>
 800550a:	0982      	lsrs	r2, r0, #6
 800550c:	3238      	adds	r2, #56	@ 0x38
 800550e:	1c51      	adds	r1, r2, #1
 8005510:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005514:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005518:	428e      	cmp	r6, r1
 800551a:	d125      	bne.n	8005568 <_free_r+0x160>
 800551c:	2001      	movs	r0, #1
 800551e:	1092      	asrs	r2, r2, #2
 8005520:	fa00 f202 	lsl.w	r2, r0, r2
 8005524:	6868      	ldr	r0, [r5, #4]
 8005526:	4302      	orrs	r2, r0
 8005528:	606a      	str	r2, [r5, #4]
 800552a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800552e:	60b3      	str	r3, [r6, #8]
 8005530:	60cb      	str	r3, [r1, #12]
 8005532:	e79a      	b.n	800546a <_free_r+0x62>
 8005534:	2a14      	cmp	r2, #20
 8005536:	d801      	bhi.n	800553c <_free_r+0x134>
 8005538:	325b      	adds	r2, #91	@ 0x5b
 800553a:	e7e8      	b.n	800550e <_free_r+0x106>
 800553c:	2a54      	cmp	r2, #84	@ 0x54
 800553e:	d802      	bhi.n	8005546 <_free_r+0x13e>
 8005540:	0b02      	lsrs	r2, r0, #12
 8005542:	326e      	adds	r2, #110	@ 0x6e
 8005544:	e7e3      	b.n	800550e <_free_r+0x106>
 8005546:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800554a:	d802      	bhi.n	8005552 <_free_r+0x14a>
 800554c:	0bc2      	lsrs	r2, r0, #15
 800554e:	3277      	adds	r2, #119	@ 0x77
 8005550:	e7dd      	b.n	800550e <_free_r+0x106>
 8005552:	f240 5154 	movw	r1, #1364	@ 0x554
 8005556:	428a      	cmp	r2, r1
 8005558:	bf9a      	itte	ls
 800555a:	0c82      	lsrls	r2, r0, #18
 800555c:	327c      	addls	r2, #124	@ 0x7c
 800555e:	227e      	movhi	r2, #126	@ 0x7e
 8005560:	e7d5      	b.n	800550e <_free_r+0x106>
 8005562:	6889      	ldr	r1, [r1, #8]
 8005564:	428e      	cmp	r6, r1
 8005566:	d004      	beq.n	8005572 <_free_r+0x16a>
 8005568:	684a      	ldr	r2, [r1, #4]
 800556a:	f022 0203 	bic.w	r2, r2, #3
 800556e:	4282      	cmp	r2, r0
 8005570:	d8f7      	bhi.n	8005562 <_free_r+0x15a>
 8005572:	68ce      	ldr	r6, [r1, #12]
 8005574:	e7d9      	b.n	800552a <_free_r+0x122>
 8005576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005578:	2000016c 	.word	0x2000016c
 800557c:	20000168 	.word	0x20000168
 8005580:	20000968 	.word	0x20000968
 8005584:	20000174 	.word	0x20000174

08005588 <_malloc_r>:
 8005588:	f101 030b 	add.w	r3, r1, #11
 800558c:	2b16      	cmp	r3, #22
 800558e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005592:	4605      	mov	r5, r0
 8005594:	d906      	bls.n	80055a4 <_malloc_r+0x1c>
 8005596:	f033 0707 	bics.w	r7, r3, #7
 800559a:	d504      	bpl.n	80055a6 <_malloc_r+0x1e>
 800559c:	230c      	movs	r3, #12
 800559e:	602b      	str	r3, [r5, #0]
 80055a0:	2400      	movs	r4, #0
 80055a2:	e1a3      	b.n	80058ec <_malloc_r+0x364>
 80055a4:	2710      	movs	r7, #16
 80055a6:	42b9      	cmp	r1, r7
 80055a8:	d8f8      	bhi.n	800559c <_malloc_r+0x14>
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fa26 	bl	80059fc <__malloc_lock>
 80055b0:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 80055b4:	4eaf      	ldr	r6, [pc, #700]	@ (8005874 <_malloc_r+0x2ec>)
 80055b6:	d237      	bcs.n	8005628 <_malloc_r+0xa0>
 80055b8:	f107 0208 	add.w	r2, r7, #8
 80055bc:	4432      	add	r2, r6
 80055be:	f1a2 0108 	sub.w	r1, r2, #8
 80055c2:	6854      	ldr	r4, [r2, #4]
 80055c4:	428c      	cmp	r4, r1
 80055c6:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80055ca:	d102      	bne.n	80055d2 <_malloc_r+0x4a>
 80055cc:	68d4      	ldr	r4, [r2, #12]
 80055ce:	42a2      	cmp	r2, r4
 80055d0:	d010      	beq.n	80055f4 <_malloc_r+0x6c>
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80055d8:	f023 0303 	bic.w	r3, r3, #3
 80055dc:	60ca      	str	r2, [r1, #12]
 80055de:	4423      	add	r3, r4
 80055e0:	6091      	str	r1, [r2, #8]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	605a      	str	r2, [r3, #4]
 80055ea:	4628      	mov	r0, r5
 80055ec:	f000 fa0c 	bl	8005a08 <__malloc_unlock>
 80055f0:	3408      	adds	r4, #8
 80055f2:	e17b      	b.n	80058ec <_malloc_r+0x364>
 80055f4:	3302      	adds	r3, #2
 80055f6:	6934      	ldr	r4, [r6, #16]
 80055f8:	499f      	ldr	r1, [pc, #636]	@ (8005878 <_malloc_r+0x2f0>)
 80055fa:	428c      	cmp	r4, r1
 80055fc:	d077      	beq.n	80056ee <_malloc_r+0x166>
 80055fe:	6862      	ldr	r2, [r4, #4]
 8005600:	f022 0c03 	bic.w	ip, r2, #3
 8005604:	ebac 0007 	sub.w	r0, ip, r7
 8005608:	280f      	cmp	r0, #15
 800560a:	dd48      	ble.n	800569e <_malloc_r+0x116>
 800560c:	19e2      	adds	r2, r4, r7
 800560e:	f040 0301 	orr.w	r3, r0, #1
 8005612:	f047 0701 	orr.w	r7, r7, #1
 8005616:	6067      	str	r7, [r4, #4]
 8005618:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800561c:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8005620:	6053      	str	r3, [r2, #4]
 8005622:	f844 000c 	str.w	r0, [r4, ip]
 8005626:	e7e0      	b.n	80055ea <_malloc_r+0x62>
 8005628:	0a7b      	lsrs	r3, r7, #9
 800562a:	d02a      	beq.n	8005682 <_malloc_r+0xfa>
 800562c:	2b04      	cmp	r3, #4
 800562e:	d812      	bhi.n	8005656 <_malloc_r+0xce>
 8005630:	09bb      	lsrs	r3, r7, #6
 8005632:	3338      	adds	r3, #56	@ 0x38
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800563a:	f1a2 0c08 	sub.w	ip, r2, #8
 800563e:	6854      	ldr	r4, [r2, #4]
 8005640:	4564      	cmp	r4, ip
 8005642:	d006      	beq.n	8005652 <_malloc_r+0xca>
 8005644:	6862      	ldr	r2, [r4, #4]
 8005646:	f022 0203 	bic.w	r2, r2, #3
 800564a:	1bd0      	subs	r0, r2, r7
 800564c:	280f      	cmp	r0, #15
 800564e:	dd1c      	ble.n	800568a <_malloc_r+0x102>
 8005650:	3b01      	subs	r3, #1
 8005652:	3301      	adds	r3, #1
 8005654:	e7cf      	b.n	80055f6 <_malloc_r+0x6e>
 8005656:	2b14      	cmp	r3, #20
 8005658:	d801      	bhi.n	800565e <_malloc_r+0xd6>
 800565a:	335b      	adds	r3, #91	@ 0x5b
 800565c:	e7ea      	b.n	8005634 <_malloc_r+0xac>
 800565e:	2b54      	cmp	r3, #84	@ 0x54
 8005660:	d802      	bhi.n	8005668 <_malloc_r+0xe0>
 8005662:	0b3b      	lsrs	r3, r7, #12
 8005664:	336e      	adds	r3, #110	@ 0x6e
 8005666:	e7e5      	b.n	8005634 <_malloc_r+0xac>
 8005668:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800566c:	d802      	bhi.n	8005674 <_malloc_r+0xec>
 800566e:	0bfb      	lsrs	r3, r7, #15
 8005670:	3377      	adds	r3, #119	@ 0x77
 8005672:	e7df      	b.n	8005634 <_malloc_r+0xac>
 8005674:	f240 5254 	movw	r2, #1364	@ 0x554
 8005678:	4293      	cmp	r3, r2
 800567a:	d804      	bhi.n	8005686 <_malloc_r+0xfe>
 800567c:	0cbb      	lsrs	r3, r7, #18
 800567e:	337c      	adds	r3, #124	@ 0x7c
 8005680:	e7d8      	b.n	8005634 <_malloc_r+0xac>
 8005682:	233f      	movs	r3, #63	@ 0x3f
 8005684:	e7d6      	b.n	8005634 <_malloc_r+0xac>
 8005686:	237e      	movs	r3, #126	@ 0x7e
 8005688:	e7d4      	b.n	8005634 <_malloc_r+0xac>
 800568a:	2800      	cmp	r0, #0
 800568c:	68e1      	ldr	r1, [r4, #12]
 800568e:	db04      	blt.n	800569a <_malloc_r+0x112>
 8005690:	68a3      	ldr	r3, [r4, #8]
 8005692:	60d9      	str	r1, [r3, #12]
 8005694:	608b      	str	r3, [r1, #8]
 8005696:	18a3      	adds	r3, r4, r2
 8005698:	e7a3      	b.n	80055e2 <_malloc_r+0x5a>
 800569a:	460c      	mov	r4, r1
 800569c:	e7d0      	b.n	8005640 <_malloc_r+0xb8>
 800569e:	2800      	cmp	r0, #0
 80056a0:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80056a4:	db07      	blt.n	80056b6 <_malloc_r+0x12e>
 80056a6:	44a4      	add	ip, r4
 80056a8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	f8cc 3004 	str.w	r3, [ip, #4]
 80056b4:	e799      	b.n	80055ea <_malloc_r+0x62>
 80056b6:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80056ba:	6870      	ldr	r0, [r6, #4]
 80056bc:	f080 8095 	bcs.w	80057ea <_malloc_r+0x262>
 80056c0:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80056c4:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80056c8:	f04f 0c01 	mov.w	ip, #1
 80056cc:	3201      	adds	r2, #1
 80056ce:	fa0c fc0e 	lsl.w	ip, ip, lr
 80056d2:	ea4c 0000 	orr.w	r0, ip, r0
 80056d6:	6070      	str	r0, [r6, #4]
 80056d8:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80056dc:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80056e0:	3808      	subs	r0, #8
 80056e2:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80056e6:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80056ea:	f8cc 400c 	str.w	r4, [ip, #12]
 80056ee:	1098      	asrs	r0, r3, #2
 80056f0:	2201      	movs	r2, #1
 80056f2:	4082      	lsls	r2, r0
 80056f4:	6870      	ldr	r0, [r6, #4]
 80056f6:	4290      	cmp	r0, r2
 80056f8:	d326      	bcc.n	8005748 <_malloc_r+0x1c0>
 80056fa:	4210      	tst	r0, r2
 80056fc:	d106      	bne.n	800570c <_malloc_r+0x184>
 80056fe:	f023 0303 	bic.w	r3, r3, #3
 8005702:	0052      	lsls	r2, r2, #1
 8005704:	4210      	tst	r0, r2
 8005706:	f103 0304 	add.w	r3, r3, #4
 800570a:	d0fa      	beq.n	8005702 <_malloc_r+0x17a>
 800570c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8005710:	46c1      	mov	r9, r8
 8005712:	469e      	mov	lr, r3
 8005714:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8005718:	454c      	cmp	r4, r9
 800571a:	f040 80b9 	bne.w	8005890 <_malloc_r+0x308>
 800571e:	f10e 0e01 	add.w	lr, lr, #1
 8005722:	f01e 0f03 	tst.w	lr, #3
 8005726:	f109 0908 	add.w	r9, r9, #8
 800572a:	d1f3      	bne.n	8005714 <_malloc_r+0x18c>
 800572c:	0798      	lsls	r0, r3, #30
 800572e:	f040 80e3 	bne.w	80058f8 <_malloc_r+0x370>
 8005732:	6873      	ldr	r3, [r6, #4]
 8005734:	ea23 0302 	bic.w	r3, r3, r2
 8005738:	6073      	str	r3, [r6, #4]
 800573a:	6870      	ldr	r0, [r6, #4]
 800573c:	0052      	lsls	r2, r2, #1
 800573e:	4290      	cmp	r0, r2
 8005740:	d302      	bcc.n	8005748 <_malloc_r+0x1c0>
 8005742:	2a00      	cmp	r2, #0
 8005744:	f040 80e5 	bne.w	8005912 <_malloc_r+0x38a>
 8005748:	f8d6 a008 	ldr.w	sl, [r6, #8]
 800574c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005750:	f023 0903 	bic.w	r9, r3, #3
 8005754:	45b9      	cmp	r9, r7
 8005756:	d304      	bcc.n	8005762 <_malloc_r+0x1da>
 8005758:	eba9 0207 	sub.w	r2, r9, r7
 800575c:	2a0f      	cmp	r2, #15
 800575e:	f300 8141 	bgt.w	80059e4 <_malloc_r+0x45c>
 8005762:	4b46      	ldr	r3, [pc, #280]	@ (800587c <_malloc_r+0x2f4>)
 8005764:	6819      	ldr	r1, [r3, #0]
 8005766:	3110      	adds	r1, #16
 8005768:	4439      	add	r1, r7
 800576a:	2008      	movs	r0, #8
 800576c:	9101      	str	r1, [sp, #4]
 800576e:	f001 fc8f 	bl	8007090 <sysconf>
 8005772:	4a43      	ldr	r2, [pc, #268]	@ (8005880 <_malloc_r+0x2f8>)
 8005774:	9901      	ldr	r1, [sp, #4]
 8005776:	6813      	ldr	r3, [r2, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	bf1f      	itttt	ne
 800577c:	f101 31ff 	addne.w	r1, r1, #4294967295
 8005780:	1809      	addne	r1, r1, r0
 8005782:	4243      	negne	r3, r0
 8005784:	4019      	andne	r1, r3
 8005786:	4680      	mov	r8, r0
 8005788:	4628      	mov	r0, r5
 800578a:	9101      	str	r1, [sp, #4]
 800578c:	f001 fc5c 	bl	8007048 <_sbrk_r>
 8005790:	1c42      	adds	r2, r0, #1
 8005792:	eb0a 0b09 	add.w	fp, sl, r9
 8005796:	4604      	mov	r4, r0
 8005798:	f000 80f7 	beq.w	800598a <_malloc_r+0x402>
 800579c:	4583      	cmp	fp, r0
 800579e:	9901      	ldr	r1, [sp, #4]
 80057a0:	4a37      	ldr	r2, [pc, #220]	@ (8005880 <_malloc_r+0x2f8>)
 80057a2:	d902      	bls.n	80057aa <_malloc_r+0x222>
 80057a4:	45b2      	cmp	sl, r6
 80057a6:	f040 80f0 	bne.w	800598a <_malloc_r+0x402>
 80057aa:	4b36      	ldr	r3, [pc, #216]	@ (8005884 <_malloc_r+0x2fc>)
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	45a3      	cmp	fp, r4
 80057b0:	eb00 0e01 	add.w	lr, r0, r1
 80057b4:	f8c3 e000 	str.w	lr, [r3]
 80057b8:	f108 3cff 	add.w	ip, r8, #4294967295
 80057bc:	f040 80ab 	bne.w	8005916 <_malloc_r+0x38e>
 80057c0:	ea1b 0f0c 	tst.w	fp, ip
 80057c4:	f040 80a7 	bne.w	8005916 <_malloc_r+0x38e>
 80057c8:	68b2      	ldr	r2, [r6, #8]
 80057ca:	4449      	add	r1, r9
 80057cc:	f041 0101 	orr.w	r1, r1, #1
 80057d0:	6051      	str	r1, [r2, #4]
 80057d2:	4a2d      	ldr	r2, [pc, #180]	@ (8005888 <_malloc_r+0x300>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6811      	ldr	r1, [r2, #0]
 80057d8:	428b      	cmp	r3, r1
 80057da:	bf88      	it	hi
 80057dc:	6013      	strhi	r3, [r2, #0]
 80057de:	4a2b      	ldr	r2, [pc, #172]	@ (800588c <_malloc_r+0x304>)
 80057e0:	6811      	ldr	r1, [r2, #0]
 80057e2:	428b      	cmp	r3, r1
 80057e4:	bf88      	it	hi
 80057e6:	6013      	strhi	r3, [r2, #0]
 80057e8:	e0cf      	b.n	800598a <_malloc_r+0x402>
 80057ea:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 80057ee:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80057f2:	d218      	bcs.n	8005826 <_malloc_r+0x29e>
 80057f4:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80057f8:	3238      	adds	r2, #56	@ 0x38
 80057fa:	f102 0e01 	add.w	lr, r2, #1
 80057fe:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8005802:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8005806:	45f0      	cmp	r8, lr
 8005808:	d12b      	bne.n	8005862 <_malloc_r+0x2da>
 800580a:	1092      	asrs	r2, r2, #2
 800580c:	f04f 0c01 	mov.w	ip, #1
 8005810:	fa0c f202 	lsl.w	r2, ip, r2
 8005814:	4302      	orrs	r2, r0
 8005816:	6072      	str	r2, [r6, #4]
 8005818:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800581c:	f8c8 4008 	str.w	r4, [r8, #8]
 8005820:	f8ce 400c 	str.w	r4, [lr, #12]
 8005824:	e763      	b.n	80056ee <_malloc_r+0x166>
 8005826:	2a14      	cmp	r2, #20
 8005828:	d801      	bhi.n	800582e <_malloc_r+0x2a6>
 800582a:	325b      	adds	r2, #91	@ 0x5b
 800582c:	e7e5      	b.n	80057fa <_malloc_r+0x272>
 800582e:	2a54      	cmp	r2, #84	@ 0x54
 8005830:	d803      	bhi.n	800583a <_malloc_r+0x2b2>
 8005832:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8005836:	326e      	adds	r2, #110	@ 0x6e
 8005838:	e7df      	b.n	80057fa <_malloc_r+0x272>
 800583a:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 800583e:	d803      	bhi.n	8005848 <_malloc_r+0x2c0>
 8005840:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8005844:	3277      	adds	r2, #119	@ 0x77
 8005846:	e7d8      	b.n	80057fa <_malloc_r+0x272>
 8005848:	f240 5e54 	movw	lr, #1364	@ 0x554
 800584c:	4572      	cmp	r2, lr
 800584e:	bf9a      	itte	ls
 8005850:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8005854:	327c      	addls	r2, #124	@ 0x7c
 8005856:	227e      	movhi	r2, #126	@ 0x7e
 8005858:	e7cf      	b.n	80057fa <_malloc_r+0x272>
 800585a:	f8de e008 	ldr.w	lr, [lr, #8]
 800585e:	45f0      	cmp	r8, lr
 8005860:	d005      	beq.n	800586e <_malloc_r+0x2e6>
 8005862:	f8de 2004 	ldr.w	r2, [lr, #4]
 8005866:	f022 0203 	bic.w	r2, r2, #3
 800586a:	4562      	cmp	r2, ip
 800586c:	d8f5      	bhi.n	800585a <_malloc_r+0x2d2>
 800586e:	f8de 800c 	ldr.w	r8, [lr, #12]
 8005872:	e7d1      	b.n	8005818 <_malloc_r+0x290>
 8005874:	2000016c 	.word	0x2000016c
 8005878:	20000174 	.word	0x20000174
 800587c:	20000968 	.word	0x20000968
 8005880:	20000164 	.word	0x20000164
 8005884:	20000938 	.word	0x20000938
 8005888:	20000964 	.word	0x20000964
 800588c:	20000960 	.word	0x20000960
 8005890:	6860      	ldr	r0, [r4, #4]
 8005892:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8005896:	f020 0003 	bic.w	r0, r0, #3
 800589a:	eba0 0a07 	sub.w	sl, r0, r7
 800589e:	f1ba 0f0f 	cmp.w	sl, #15
 80058a2:	dd12      	ble.n	80058ca <_malloc_r+0x342>
 80058a4:	68a3      	ldr	r3, [r4, #8]
 80058a6:	19e2      	adds	r2, r4, r7
 80058a8:	f047 0701 	orr.w	r7, r7, #1
 80058ac:	6067      	str	r7, [r4, #4]
 80058ae:	f8c3 c00c 	str.w	ip, [r3, #12]
 80058b2:	f8cc 3008 	str.w	r3, [ip, #8]
 80058b6:	f04a 0301 	orr.w	r3, sl, #1
 80058ba:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80058be:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80058c2:	6053      	str	r3, [r2, #4]
 80058c4:	f844 a000 	str.w	sl, [r4, r0]
 80058c8:	e68f      	b.n	80055ea <_malloc_r+0x62>
 80058ca:	f1ba 0f00 	cmp.w	sl, #0
 80058ce:	db11      	blt.n	80058f4 <_malloc_r+0x36c>
 80058d0:	4420      	add	r0, r4
 80058d2:	6843      	ldr	r3, [r0, #4]
 80058d4:	f043 0301 	orr.w	r3, r3, #1
 80058d8:	6043      	str	r3, [r0, #4]
 80058da:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80058de:	4628      	mov	r0, r5
 80058e0:	f8c3 c00c 	str.w	ip, [r3, #12]
 80058e4:	f8cc 3008 	str.w	r3, [ip, #8]
 80058e8:	f000 f88e 	bl	8005a08 <__malloc_unlock>
 80058ec:	4620      	mov	r0, r4
 80058ee:	b003      	add	sp, #12
 80058f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058f4:	4664      	mov	r4, ip
 80058f6:	e70f      	b.n	8005718 <_malloc_r+0x190>
 80058f8:	f858 0908 	ldr.w	r0, [r8], #-8
 80058fc:	4540      	cmp	r0, r8
 80058fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8005902:	f43f af13 	beq.w	800572c <_malloc_r+0x1a4>
 8005906:	e718      	b.n	800573a <_malloc_r+0x1b2>
 8005908:	3304      	adds	r3, #4
 800590a:	0052      	lsls	r2, r2, #1
 800590c:	4210      	tst	r0, r2
 800590e:	d0fb      	beq.n	8005908 <_malloc_r+0x380>
 8005910:	e6fc      	b.n	800570c <_malloc_r+0x184>
 8005912:	4673      	mov	r3, lr
 8005914:	e7fa      	b.n	800590c <_malloc_r+0x384>
 8005916:	6810      	ldr	r0, [r2, #0]
 8005918:	3001      	adds	r0, #1
 800591a:	bf1b      	ittet	ne
 800591c:	eba4 0b0b 	subne.w	fp, r4, fp
 8005920:	eb0b 020e 	addne.w	r2, fp, lr
 8005924:	6014      	streq	r4, [r2, #0]
 8005926:	601a      	strne	r2, [r3, #0]
 8005928:	f014 0b07 	ands.w	fp, r4, #7
 800592c:	bf1a      	itte	ne
 800592e:	f1cb 0008 	rsbne	r0, fp, #8
 8005932:	1824      	addne	r4, r4, r0
 8005934:	4658      	moveq	r0, fp
 8005936:	1862      	adds	r2, r4, r1
 8005938:	ea02 010c 	and.w	r1, r2, ip
 800593c:	4480      	add	r8, r0
 800593e:	eba8 0801 	sub.w	r8, r8, r1
 8005942:	ea08 080c 	and.w	r8, r8, ip
 8005946:	4641      	mov	r1, r8
 8005948:	4628      	mov	r0, r5
 800594a:	9201      	str	r2, [sp, #4]
 800594c:	f001 fb7c 	bl	8007048 <_sbrk_r>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	9a01      	ldr	r2, [sp, #4]
 8005954:	4b28      	ldr	r3, [pc, #160]	@ (80059f8 <_malloc_r+0x470>)
 8005956:	d107      	bne.n	8005968 <_malloc_r+0x3e0>
 8005958:	f1bb 0f00 	cmp.w	fp, #0
 800595c:	d023      	beq.n	80059a6 <_malloc_r+0x41e>
 800595e:	f1ab 0008 	sub.w	r0, fp, #8
 8005962:	4410      	add	r0, r2
 8005964:	f04f 0800 	mov.w	r8, #0
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	60b4      	str	r4, [r6, #8]
 800596c:	1b00      	subs	r0, r0, r4
 800596e:	4440      	add	r0, r8
 8005970:	4442      	add	r2, r8
 8005972:	f040 0001 	orr.w	r0, r0, #1
 8005976:	45b2      	cmp	sl, r6
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	6060      	str	r0, [r4, #4]
 800597c:	f43f af29 	beq.w	80057d2 <_malloc_r+0x24a>
 8005980:	f1b9 0f0f 	cmp.w	r9, #15
 8005984:	d812      	bhi.n	80059ac <_malloc_r+0x424>
 8005986:	2301      	movs	r3, #1
 8005988:	6063      	str	r3, [r4, #4]
 800598a:	68b3      	ldr	r3, [r6, #8]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f023 0303 	bic.w	r3, r3, #3
 8005992:	42bb      	cmp	r3, r7
 8005994:	eba3 0207 	sub.w	r2, r3, r7
 8005998:	d301      	bcc.n	800599e <_malloc_r+0x416>
 800599a:	2a0f      	cmp	r2, #15
 800599c:	dc22      	bgt.n	80059e4 <_malloc_r+0x45c>
 800599e:	4628      	mov	r0, r5
 80059a0:	f000 f832 	bl	8005a08 <__malloc_unlock>
 80059a4:	e5fc      	b.n	80055a0 <_malloc_r+0x18>
 80059a6:	4610      	mov	r0, r2
 80059a8:	46d8      	mov	r8, fp
 80059aa:	e7dd      	b.n	8005968 <_malloc_r+0x3e0>
 80059ac:	f8da 2004 	ldr.w	r2, [sl, #4]
 80059b0:	f1a9 090c 	sub.w	r9, r9, #12
 80059b4:	f029 0907 	bic.w	r9, r9, #7
 80059b8:	f002 0201 	and.w	r2, r2, #1
 80059bc:	ea42 0209 	orr.w	r2, r2, r9
 80059c0:	f8ca 2004 	str.w	r2, [sl, #4]
 80059c4:	2105      	movs	r1, #5
 80059c6:	eb0a 0209 	add.w	r2, sl, r9
 80059ca:	f1b9 0f0f 	cmp.w	r9, #15
 80059ce:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80059d2:	f67f aefe 	bls.w	80057d2 <_malloc_r+0x24a>
 80059d6:	f10a 0108 	add.w	r1, sl, #8
 80059da:	4628      	mov	r0, r5
 80059dc:	f7ff fd14 	bl	8005408 <_free_r>
 80059e0:	4b05      	ldr	r3, [pc, #20]	@ (80059f8 <_malloc_r+0x470>)
 80059e2:	e6f6      	b.n	80057d2 <_malloc_r+0x24a>
 80059e4:	68b4      	ldr	r4, [r6, #8]
 80059e6:	f047 0301 	orr.w	r3, r7, #1
 80059ea:	4427      	add	r7, r4
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	60b7      	str	r7, [r6, #8]
 80059f4:	607a      	str	r2, [r7, #4]
 80059f6:	e5f8      	b.n	80055ea <_malloc_r+0x62>
 80059f8:	20000938 	.word	0x20000938

080059fc <__malloc_lock>:
 80059fc:	4801      	ldr	r0, [pc, #4]	@ (8005a04 <__malloc_lock+0x8>)
 80059fe:	f7ff bc9b 	b.w	8005338 <__retarget_lock_acquire_recursive>
 8005a02:	bf00      	nop
 8005a04:	20000930 	.word	0x20000930

08005a08 <__malloc_unlock>:
 8005a08:	4801      	ldr	r0, [pc, #4]	@ (8005a10 <__malloc_unlock+0x8>)
 8005a0a:	f7ff bc96 	b.w	800533a <__retarget_lock_release_recursive>
 8005a0e:	bf00      	nop
 8005a10:	20000930 	.word	0x20000930
 8005a14:	00000000 	.word	0x00000000

08005a18 <_svfprintf_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	b0d3      	sub	sp, #332	@ 0x14c
 8005a1e:	4693      	mov	fp, r2
 8005a20:	9106      	str	r1, [sp, #24]
 8005a22:	461f      	mov	r7, r3
 8005a24:	9003      	str	r0, [sp, #12]
 8005a26:	f001 fb0b 	bl	8007040 <_localeconv_r>
 8005a2a:	6803      	ldr	r3, [r0, #0]
 8005a2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fa fbce 	bl	80001d0 <strlen>
 8005a34:	9b06      	ldr	r3, [sp, #24]
 8005a36:	900e      	str	r0, [sp, #56]	@ 0x38
 8005a38:	899b      	ldrh	r3, [r3, #12]
 8005a3a:	061a      	lsls	r2, r3, #24
 8005a3c:	d514      	bpl.n	8005a68 <_svfprintf_r+0x50>
 8005a3e:	9b06      	ldr	r3, [sp, #24]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	b98b      	cbnz	r3, 8005a68 <_svfprintf_r+0x50>
 8005a44:	9803      	ldr	r0, [sp, #12]
 8005a46:	2140      	movs	r1, #64	@ 0x40
 8005a48:	f7ff fd9e 	bl	8005588 <_malloc_r>
 8005a4c:	9b06      	ldr	r3, [sp, #24]
 8005a4e:	6018      	str	r0, [r3, #0]
 8005a50:	6118      	str	r0, [r3, #16]
 8005a52:	b930      	cbnz	r0, 8005a62 <_svfprintf_r+0x4a>
 8005a54:	9a03      	ldr	r2, [sp, #12]
 8005a56:	230c      	movs	r3, #12
 8005a58:	6013      	str	r3, [r2, #0]
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a60:	e1f5      	b.n	8005e4e <_svfprintf_r+0x436>
 8005a62:	9a06      	ldr	r2, [sp, #24]
 8005a64:	2340      	movs	r3, #64	@ 0x40
 8005a66:	6153      	str	r3, [r2, #20]
 8005a68:	ed9f 7b93 	vldr	d7, [pc, #588]	@ 8005cb8 <_svfprintf_r+0x2a0>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	e9cd 3327 	strd	r3, r3, [sp, #156]	@ 0x9c
 8005a72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005a76:	ac29      	add	r4, sp, #164	@ 0xa4
 8005a78:	9426      	str	r4, [sp, #152]	@ 0x98
 8005a7a:	9304      	str	r3, [sp, #16]
 8005a7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a7e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8005a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a82:	9314      	str	r3, [sp, #80]	@ 0x50
 8005a84:	9316      	str	r3, [sp, #88]	@ 0x58
 8005a86:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a88:	465b      	mov	r3, fp
 8005a8a:	461d      	mov	r5, r3
 8005a8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a90:	b10a      	cbz	r2, 8005a96 <_svfprintf_r+0x7e>
 8005a92:	2a25      	cmp	r2, #37	@ 0x25
 8005a94:	d1f9      	bne.n	8005a8a <_svfprintf_r+0x72>
 8005a96:	ebb5 060b 	subs.w	r6, r5, fp
 8005a9a:	d00d      	beq.n	8005ab8 <_svfprintf_r+0xa0>
 8005a9c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8005a9e:	4433      	add	r3, r6
 8005aa0:	9328      	str	r3, [sp, #160]	@ 0xa0
 8005aa2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	2b07      	cmp	r3, #7
 8005aa8:	e9c4 b600 	strd	fp, r6, [r4]
 8005aac:	9327      	str	r3, [sp, #156]	@ 0x9c
 8005aae:	dc75      	bgt.n	8005b9c <_svfprintf_r+0x184>
 8005ab0:	3408      	adds	r4, #8
 8005ab2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ab4:	4433      	add	r3, r6
 8005ab6:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ab8:	782b      	ldrb	r3, [r5, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f001 8140 	beq.w	8006d40 <_svfprintf_r+0x1328>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	1c6b      	adds	r3, r5, #1
 8005ac4:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8005ac8:	f04f 36ff 	mov.w	r6, #4294967295
 8005acc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005ace:	4615      	mov	r5, r2
 8005ad0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ad4:	9207      	str	r2, [sp, #28]
 8005ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ad8:	9b07      	ldr	r3, [sp, #28]
 8005ada:	3b20      	subs	r3, #32
 8005adc:	2b5a      	cmp	r3, #90	@ 0x5a
 8005ade:	f200 859d 	bhi.w	800661c <_svfprintf_r+0xc04>
 8005ae2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ae6:	009e      	.short	0x009e
 8005ae8:	059b059b 	.word	0x059b059b
 8005aec:	059b00a6 	.word	0x059b00a6
 8005af0:	059b059b 	.word	0x059b059b
 8005af4:	059b0086 	.word	0x059b0086
 8005af8:	00a9059b 	.word	0x00a9059b
 8005afc:	059b00b3 	.word	0x059b00b3
 8005b00:	00b500b0 	.word	0x00b500b0
 8005b04:	00d0059b 	.word	0x00d0059b
 8005b08:	00d300d3 	.word	0x00d300d3
 8005b0c:	00d300d3 	.word	0x00d300d3
 8005b10:	00d300d3 	.word	0x00d300d3
 8005b14:	00d300d3 	.word	0x00d300d3
 8005b18:	059b00d3 	.word	0x059b00d3
 8005b1c:	059b059b 	.word	0x059b059b
 8005b20:	059b059b 	.word	0x059b059b
 8005b24:	059b059b 	.word	0x059b059b
 8005b28:	059b014a 	.word	0x059b014a
 8005b2c:	011b0109 	.word	0x011b0109
 8005b30:	014a014a 	.word	0x014a014a
 8005b34:	059b014a 	.word	0x059b014a
 8005b38:	059b059b 	.word	0x059b059b
 8005b3c:	00e6059b 	.word	0x00e6059b
 8005b40:	059b059b 	.word	0x059b059b
 8005b44:	059b0494 	.word	0x059b0494
 8005b48:	059b059b 	.word	0x059b059b
 8005b4c:	059b04de 	.word	0x059b04de
 8005b50:	059b04fd 	.word	0x059b04fd
 8005b54:	0520059b 	.word	0x0520059b
 8005b58:	059b059b 	.word	0x059b059b
 8005b5c:	059b059b 	.word	0x059b059b
 8005b60:	059b059b 	.word	0x059b059b
 8005b64:	059b059b 	.word	0x059b059b
 8005b68:	059b014a 	.word	0x059b014a
 8005b6c:	011d0109 	.word	0x011d0109
 8005b70:	014a014a 	.word	0x014a014a
 8005b74:	00ef014a 	.word	0x00ef014a
 8005b78:	0103011d 	.word	0x0103011d
 8005b7c:	00fc059b 	.word	0x00fc059b
 8005b80:	0475059b 	.word	0x0475059b
 8005b84:	04cc0496 	.word	0x04cc0496
 8005b88:	059b0103 	.word	0x059b0103
 8005b8c:	009c04de 	.word	0x009c04de
 8005b90:	059b04ff 	.word	0x059b04ff
 8005b94:	0065059b 	.word	0x0065059b
 8005b98:	009c059b 	.word	0x009c059b
 8005b9c:	9906      	ldr	r1, [sp, #24]
 8005b9e:	9803      	ldr	r0, [sp, #12]
 8005ba0:	aa26      	add	r2, sp, #152	@ 0x98
 8005ba2:	f001 f90f 	bl	8006dc4 <__ssprint_r>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f040 814c 	bne.w	8005e44 <_svfprintf_r+0x42c>
 8005bac:	ac29      	add	r4, sp, #164	@ 0xa4
 8005bae:	e780      	b.n	8005ab2 <_svfprintf_r+0x9a>
 8005bb0:	4b43      	ldr	r3, [pc, #268]	@ (8005cc0 <_svfprintf_r+0x2a8>)
 8005bb2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bb4:	f015 0320 	ands.w	r3, r5, #32
 8005bb8:	f000 84b8 	beq.w	800652c <_svfprintf_r+0xb14>
 8005bbc:	3707      	adds	r7, #7
 8005bbe:	f027 0307 	bic.w	r3, r7, #7
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005bc8:	f852 7b08 	ldr.w	r7, [r2], #8
 8005bcc:	9208      	str	r2, [sp, #32]
 8005bce:	07e8      	lsls	r0, r5, #31
 8005bd0:	d50a      	bpl.n	8005be8 <_svfprintf_r+0x1d0>
 8005bd2:	ea57 0308 	orrs.w	r3, r7, r8
 8005bd6:	d007      	beq.n	8005be8 <_svfprintf_r+0x1d0>
 8005bd8:	2330      	movs	r3, #48	@ 0x30
 8005bda:	f88d 307c 	strb.w	r3, [sp, #124]	@ 0x7c
 8005bde:	9b07      	ldr	r3, [sp, #28]
 8005be0:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8005be4:	f045 0502 	orr.w	r5, r5, #2
 8005be8:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8005bec:	2302      	movs	r3, #2
 8005bee:	f000 bc1f 	b.w	8006430 <_svfprintf_r+0xa18>
 8005bf2:	9803      	ldr	r0, [sp, #12]
 8005bf4:	f001 fa24 	bl	8007040 <_localeconv_r>
 8005bf8:	6843      	ldr	r3, [r0, #4]
 8005bfa:	9316      	str	r3, [sp, #88]	@ 0x58
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fa fae7 	bl	80001d0 <strlen>
 8005c02:	9014      	str	r0, [sp, #80]	@ 0x50
 8005c04:	9803      	ldr	r0, [sp, #12]
 8005c06:	f001 fa1b 	bl	8007040 <_localeconv_r>
 8005c0a:	6883      	ldr	r3, [r0, #8]
 8005c0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c0e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c10:	b12b      	cbz	r3, 8005c1e <_svfprintf_r+0x206>
 8005c12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c14:	b11b      	cbz	r3, 8005c1e <_svfprintf_r+0x206>
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b10b      	cbz	r3, 8005c1e <_svfprintf_r+0x206>
 8005c1a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8005c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c20:	e756      	b.n	8005ad0 <_svfprintf_r+0xb8>
 8005c22:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1f9      	bne.n	8005c1e <_svfprintf_r+0x206>
 8005c2a:	2320      	movs	r3, #32
 8005c2c:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8005c30:	e7f5      	b.n	8005c1e <_svfprintf_r+0x206>
 8005c32:	f045 0501 	orr.w	r5, r5, #1
 8005c36:	e7f2      	b.n	8005c1e <_svfprintf_r+0x206>
 8005c38:	f857 3b04 	ldr.w	r3, [r7], #4
 8005c3c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	daed      	bge.n	8005c1e <_svfprintf_r+0x206>
 8005c42:	425b      	negs	r3, r3
 8005c44:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c46:	f045 0504 	orr.w	r5, r5, #4
 8005c4a:	e7e8      	b.n	8005c1e <_svfprintf_r+0x206>
 8005c4c:	232b      	movs	r3, #43	@ 0x2b
 8005c4e:	e7ed      	b.n	8005c2c <_svfprintf_r+0x214>
 8005c50:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c56:	9207      	str	r2, [sp, #28]
 8005c58:	2a2a      	cmp	r2, #42	@ 0x2a
 8005c5a:	d111      	bne.n	8005c80 <_svfprintf_r+0x268>
 8005c5c:	f857 6b04 	ldr.w	r6, [r7], #4
 8005c60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c62:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8005c66:	e7da      	b.n	8005c1e <_svfprintf_r+0x206>
 8005c68:	fb01 2606 	mla	r6, r1, r6, r2
 8005c6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c70:	9207      	str	r2, [sp, #28]
 8005c72:	9a07      	ldr	r2, [sp, #28]
 8005c74:	3a30      	subs	r2, #48	@ 0x30
 8005c76:	2a09      	cmp	r2, #9
 8005c78:	d9f6      	bls.n	8005c68 <_svfprintf_r+0x250>
 8005c7a:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8005c7e:	e72a      	b.n	8005ad6 <_svfprintf_r+0xbe>
 8005c80:	2600      	movs	r6, #0
 8005c82:	210a      	movs	r1, #10
 8005c84:	e7f5      	b.n	8005c72 <_svfprintf_r+0x25a>
 8005c86:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8005c8a:	e7c8      	b.n	8005c1e <_svfprintf_r+0x206>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c90:	220a      	movs	r2, #10
 8005c92:	9b07      	ldr	r3, [sp, #28]
 8005c94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005c96:	3b30      	subs	r3, #48	@ 0x30
 8005c98:	fb02 3301 	mla	r3, r2, r1, r3
 8005c9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ca0:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005ca4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ca6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005caa:	2b09      	cmp	r3, #9
 8005cac:	9107      	str	r1, [sp, #28]
 8005cae:	d9f0      	bls.n	8005c92 <_svfprintf_r+0x27a>
 8005cb0:	e712      	b.n	8005ad8 <_svfprintf_r+0xc0>
 8005cb2:	f045 0508 	orr.w	r5, r5, #8
 8005cb6:	e7b2      	b.n	8005c1e <_svfprintf_r+0x206>
	...
 8005cc0:	08009904 	.word	0x08009904
 8005cc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b68      	cmp	r3, #104	@ 0x68
 8005cca:	bf01      	itttt	eq
 8005ccc:	9b0b      	ldreq	r3, [sp, #44]	@ 0x2c
 8005cce:	3301      	addeq	r3, #1
 8005cd0:	930b      	streq	r3, [sp, #44]	@ 0x2c
 8005cd2:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8005cd6:	bf18      	it	ne
 8005cd8:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8005cdc:	e79f      	b.n	8005c1e <_svfprintf_r+0x206>
 8005cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b6c      	cmp	r3, #108	@ 0x6c
 8005ce4:	d105      	bne.n	8005cf2 <_svfprintf_r+0x2da>
 8005ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce8:	3301      	adds	r3, #1
 8005cea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cec:	f045 0520 	orr.w	r5, r5, #32
 8005cf0:	e795      	b.n	8005c1e <_svfprintf_r+0x206>
 8005cf2:	f045 0510 	orr.w	r5, r5, #16
 8005cf6:	e792      	b.n	8005c1e <_svfprintf_r+0x206>
 8005cf8:	463a      	mov	r2, r7
 8005cfa:	f852 3b04 	ldr.w	r3, [r2], #4
 8005cfe:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8005d02:	2300      	movs	r3, #0
 8005d04:	9208      	str	r2, [sp, #32]
 8005d06:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8005d0a:	469a      	mov	sl, r3
 8005d0c:	2601      	movs	r6, #1
 8005d0e:	4699      	mov	r9, r3
 8005d10:	4698      	mov	r8, r3
 8005d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d14:	461f      	mov	r7, r3
 8005d16:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 8005d1a:	e1b4      	b.n	8006086 <_svfprintf_r+0x66e>
 8005d1c:	f045 0510 	orr.w	r5, r5, #16
 8005d20:	06ab      	lsls	r3, r5, #26
 8005d22:	d514      	bpl.n	8005d4e <_svfprintf_r+0x336>
 8005d24:	3707      	adds	r7, #7
 8005d26:	f027 0307 	bic.w	r3, r7, #7
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005d30:	f852 7b08 	ldr.w	r7, [r2], #8
 8005d34:	9208      	str	r2, [sp, #32]
 8005d36:	f1b8 0f00 	cmp.w	r8, #0
 8005d3a:	da06      	bge.n	8005d4a <_svfprintf_r+0x332>
 8005d3c:	427f      	negs	r7, r7
 8005d3e:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8005d42:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 8005d46:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e373      	b.n	8006436 <_svfprintf_r+0xa1e>
 8005d4e:	463a      	mov	r2, r7
 8005d50:	06ef      	lsls	r7, r5, #27
 8005d52:	f852 3b04 	ldr.w	r3, [r2], #4
 8005d56:	9208      	str	r2, [sp, #32]
 8005d58:	d503      	bpl.n	8005d62 <_svfprintf_r+0x34a>
 8005d5a:	461f      	mov	r7, r3
 8005d5c:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8005d60:	e7e9      	b.n	8005d36 <_svfprintf_r+0x31e>
 8005d62:	0668      	lsls	r0, r5, #25
 8005d64:	d503      	bpl.n	8005d6e <_svfprintf_r+0x356>
 8005d66:	b21f      	sxth	r7, r3
 8005d68:	f343 38c0 	sbfx	r8, r3, #15, #1
 8005d6c:	e7e3      	b.n	8005d36 <_svfprintf_r+0x31e>
 8005d6e:	05a9      	lsls	r1, r5, #22
 8005d70:	d5f3      	bpl.n	8005d5a <_svfprintf_r+0x342>
 8005d72:	b25f      	sxtb	r7, r3
 8005d74:	f343 18c0 	sbfx	r8, r3, #7, #1
 8005d78:	e7dd      	b.n	8005d36 <_svfprintf_r+0x31e>
 8005d7a:	3707      	adds	r7, #7
 8005d7c:	f027 0307 	bic.w	r3, r7, #7
 8005d80:	ecb3 7b02 	vldmia	r3!, {d7}
 8005d84:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005d88:	9308      	str	r3, [sp, #32]
 8005d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d8c:	9318      	str	r3, [sp, #96]	@ 0x60
 8005d8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005d94:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d96:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8005d9a:	4b6e      	ldr	r3, [pc, #440]	@ (8005f54 <_svfprintf_r+0x53c>)
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	f7fa fec4 	bl	8000b2c <__aeabi_dcmpun>
 8005da4:	bb00      	cbnz	r0, 8005de8 <_svfprintf_r+0x3d0>
 8005da6:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	@ 0x60
 8005daa:	4b6a      	ldr	r3, [pc, #424]	@ (8005f54 <_svfprintf_r+0x53c>)
 8005dac:	f04f 32ff 	mov.w	r2, #4294967295
 8005db0:	f7fa fe9e 	bl	8000af0 <__aeabi_dcmple>
 8005db4:	b9c0      	cbnz	r0, 8005de8 <_svfprintf_r+0x3d0>
 8005db6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005dba:	2200      	movs	r2, #0
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f7fa fe8d 	bl	8000adc <__aeabi_dcmplt>
 8005dc2:	b110      	cbz	r0, 8005dca <_svfprintf_r+0x3b2>
 8005dc4:	232d      	movs	r3, #45	@ 0x2d
 8005dc6:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 8005dca:	4a63      	ldr	r2, [pc, #396]	@ (8005f58 <_svfprintf_r+0x540>)
 8005dcc:	4b63      	ldr	r3, [pc, #396]	@ (8005f5c <_svfprintf_r+0x544>)
 8005dce:	9907      	ldr	r1, [sp, #28]
 8005dd0:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8005dd4:	2947      	cmp	r1, #71	@ 0x47
 8005dd6:	bfcc      	ite	gt
 8005dd8:	4693      	movgt	fp, r2
 8005dda:	469b      	movle	fp, r3
 8005ddc:	f04f 0a00 	mov.w	sl, #0
 8005de0:	2603      	movs	r6, #3
 8005de2:	46d1      	mov	r9, sl
 8005de4:	f000 bfe3 	b.w	8006dae <_svfprintf_r+0x1396>
 8005de8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005dec:	4610      	mov	r0, r2
 8005dee:	4619      	mov	r1, r3
 8005df0:	f7fa fe9c 	bl	8000b2c <__aeabi_dcmpun>
 8005df4:	4682      	mov	sl, r0
 8005df6:	b140      	cbz	r0, 8005e0a <_svfprintf_r+0x3f2>
 8005df8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dfa:	4a59      	ldr	r2, [pc, #356]	@ (8005f60 <_svfprintf_r+0x548>)
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfbc      	itt	lt
 8005e00:	232d      	movlt	r3, #45	@ 0x2d
 8005e02:	f88d 307b 	strblt.w	r3, [sp, #123]	@ 0x7b
 8005e06:	4b57      	ldr	r3, [pc, #348]	@ (8005f64 <_svfprintf_r+0x54c>)
 8005e08:	e7e1      	b.n	8005dce <_svfprintf_r+0x3b6>
 8005e0a:	9b07      	ldr	r3, [sp, #28]
 8005e0c:	2b61      	cmp	r3, #97	@ 0x61
 8005e0e:	d022      	beq.n	8005e56 <_svfprintf_r+0x43e>
 8005e10:	2b41      	cmp	r3, #65	@ 0x41
 8005e12:	d122      	bne.n	8005e5a <_svfprintf_r+0x442>
 8005e14:	2358      	movs	r3, #88	@ 0x58
 8005e16:	2230      	movs	r2, #48	@ 0x30
 8005e18:	2e63      	cmp	r6, #99	@ 0x63
 8005e1a:	f88d 207c 	strb.w	r2, [sp, #124]	@ 0x7c
 8005e1e:	f88d 307d 	strb.w	r3, [sp, #125]	@ 0x7d
 8005e22:	f045 0502 	orr.w	r5, r5, #2
 8005e26:	f340 8081 	ble.w	8005f2c <_svfprintf_r+0x514>
 8005e2a:	9803      	ldr	r0, [sp, #12]
 8005e2c:	1c71      	adds	r1, r6, #1
 8005e2e:	f7ff fbab 	bl	8005588 <_malloc_r>
 8005e32:	4683      	mov	fp, r0
 8005e34:	2800      	cmp	r0, #0
 8005e36:	d17e      	bne.n	8005f36 <_svfprintf_r+0x51e>
 8005e38:	9b06      	ldr	r3, [sp, #24]
 8005e3a:	9a06      	ldr	r2, [sp, #24]
 8005e3c:	899b      	ldrh	r3, [r3, #12]
 8005e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e42:	8193      	strh	r3, [r2, #12]
 8005e44:	9b06      	ldr	r3, [sp, #24]
 8005e46:	899b      	ldrh	r3, [r3, #12]
 8005e48:	065b      	lsls	r3, r3, #25
 8005e4a:	f53f ae06 	bmi.w	8005a5a <_svfprintf_r+0x42>
 8005e4e:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8005e50:	b053      	add	sp, #332	@ 0x14c
 8005e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e56:	2378      	movs	r3, #120	@ 0x78
 8005e58:	e7dd      	b.n	8005e16 <_svfprintf_r+0x3fe>
 8005e5a:	1c72      	adds	r2, r6, #1
 8005e5c:	d06d      	beq.n	8005f3a <_svfprintf_r+0x522>
 8005e5e:	9b07      	ldr	r3, [sp, #28]
 8005e60:	f023 0320 	bic.w	r3, r3, #32
 8005e64:	2b47      	cmp	r3, #71	@ 0x47
 8005e66:	d101      	bne.n	8005e6c <_svfprintf_r+0x454>
 8005e68:	2e00      	cmp	r6, #0
 8005e6a:	d068      	beq.n	8005f3e <_svfprintf_r+0x526>
 8005e6c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8005e70:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	da65      	bge.n	8005f44 <_svfprintf_r+0x52c>
 8005e78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8005e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e7e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005e82:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e84:	232d      	movs	r3, #45	@ 0x2d
 8005e86:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005e88:	9b07      	ldr	r3, [sp, #28]
 8005e8a:	f023 0820 	bic.w	r8, r3, #32
 8005e8e:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 8005e92:	f040 81d9 	bne.w	8006248 <_svfprintf_r+0x830>
 8005e96:	a820      	add	r0, sp, #128	@ 0x80
 8005e98:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 8005e9c:	f001 f904 	bl	80070a8 <frexp>
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005ea6:	ec51 0b10 	vmov	r0, r1, d0
 8005eaa:	f7fa fba5 	bl	80005f8 <__aeabi_dmul>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f7fa fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ebe:	b108      	cbz	r0, 8005ec4 <_svfprintf_r+0x4ac>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ec4:	4a28      	ldr	r2, [pc, #160]	@ (8005f68 <_svfprintf_r+0x550>)
 8005ec6:	4b29      	ldr	r3, [pc, #164]	@ (8005f6c <_svfprintf_r+0x554>)
 8005ec8:	9907      	ldr	r1, [sp, #28]
 8005eca:	2961      	cmp	r1, #97	@ 0x61
 8005ecc:	bf08      	it	eq
 8005ece:	461a      	moveq	r2, r3
 8005ed0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ed2:	3e01      	subs	r6, #1
 8005ed4:	465f      	mov	r7, fp
 8005ed6:	4b26      	ldr	r3, [pc, #152]	@ (8005f70 <_svfprintf_r+0x558>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ede:	f7fa fb8b 	bl	80005f8 <__aeabi_dmul>
 8005ee2:	4680      	mov	r8, r0
 8005ee4:	4689      	mov	r9, r1
 8005ee6:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005eea:	f7fa fe35 	bl	8000b58 <__aeabi_d2iz>
 8005eee:	4680      	mov	r8, r0
 8005ef0:	f7fa fb18 	bl	8000524 <__aeabi_i2d>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005efc:	f7fa f9c4 	bl	8000288 <__aeabi_dsub>
 8005f00:	460b      	mov	r3, r1
 8005f02:	4602      	mov	r2, r0
 8005f04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f0a:	f813 3008 	ldrb.w	r3, [r3, r8]
 8005f0e:	f807 3b01 	strb.w	r3, [r7], #1
 8005f12:	1c73      	adds	r3, r6, #1
 8005f14:	d02e      	beq.n	8005f74 <_svfprintf_r+0x55c>
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f106 38ff 	add.w	r8, r6, #4294967295
 8005f1e:	f7fa fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f22:	b1a8      	cbz	r0, 8005f50 <_svfprintf_r+0x538>
 8005f24:	463b      	mov	r3, r7
 8005f26:	19b9      	adds	r1, r7, r6
 8005f28:	2030      	movs	r0, #48	@ 0x30
 8005f2a:	e184      	b.n	8006236 <_svfprintf_r+0x81e>
 8005f2c:	f04f 0a00 	mov.w	sl, #0
 8005f30:	f10d 0be4 	add.w	fp, sp, #228	@ 0xe4
 8005f34:	e79a      	b.n	8005e6c <_svfprintf_r+0x454>
 8005f36:	4682      	mov	sl, r0
 8005f38:	e798      	b.n	8005e6c <_svfprintf_r+0x454>
 8005f3a:	2606      	movs	r6, #6
 8005f3c:	e796      	b.n	8005e6c <_svfprintf_r+0x454>
 8005f3e:	46b2      	mov	sl, r6
 8005f40:	2601      	movs	r6, #1
 8005f42:	e793      	b.n	8005e6c <_svfprintf_r+0x454>
 8005f44:	ed9d 7b0c 	vldr	d7, [sp, #48]	@ 0x30
 8005f48:	2300      	movs	r3, #0
 8005f4a:	ed8d 7b12 	vstr	d7, [sp, #72]	@ 0x48
 8005f4e:	e79a      	b.n	8005e86 <_svfprintf_r+0x46e>
 8005f50:	4646      	mov	r6, r8
 8005f52:	e7c0      	b.n	8005ed6 <_svfprintf_r+0x4be>
 8005f54:	7fefffff 	.word	0x7fefffff
 8005f58:	080098f8 	.word	0x080098f8
 8005f5c:	080098f4 	.word	0x080098f4
 8005f60:	08009900 	.word	0x08009900
 8005f64:	080098fc 	.word	0x080098fc
 8005f68:	08009915 	.word	0x08009915
 8005f6c:	08009904 	.word	0x08009904
 8005f70:	40300000 	.word	0x40300000
 8005f74:	4baa      	ldr	r3, [pc, #680]	@ (8006220 <_svfprintf_r+0x808>)
 8005f76:	2200      	movs	r2, #0
 8005f78:	f7fa fdce 	bl	8000b18 <__aeabi_dcmpgt>
 8005f7c:	b950      	cbnz	r0, 8005f94 <_svfprintf_r+0x57c>
 8005f7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f82:	4ba7      	ldr	r3, [pc, #668]	@ (8006220 <_svfprintf_r+0x808>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	f7fa fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d0ca      	beq.n	8005f24 <_svfprintf_r+0x50c>
 8005f8e:	f018 0f01 	tst.w	r8, #1
 8005f92:	d0c7      	beq.n	8005f24 <_svfprintf_r+0x50c>
 8005f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f96:	9724      	str	r7, [sp, #144]	@ 0x90
 8005f98:	7bd9      	ldrb	r1, [r3, #15]
 8005f9a:	2030      	movs	r0, #48	@ 0x30
 8005f9c:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005f9e:	1e53      	subs	r3, r2, #1
 8005fa0:	9324      	str	r3, [sp, #144]	@ 0x90
 8005fa2:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8005fa6:	428b      	cmp	r3, r1
 8005fa8:	f000 8140 	beq.w	800622c <_svfprintf_r+0x814>
 8005fac:	2b39      	cmp	r3, #57	@ 0x39
 8005fae:	bf0b      	itete	eq
 8005fb0:	9b09      	ldreq	r3, [sp, #36]	@ 0x24
 8005fb2:	3301      	addne	r3, #1
 8005fb4:	7a9b      	ldrbeq	r3, [r3, #10]
 8005fb6:	b2db      	uxtbne	r3, r3
 8005fb8:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fbc:	eba7 030b 	sub.w	r3, r7, fp
 8005fc0:	9304      	str	r3, [sp, #16]
 8005fc2:	9907      	ldr	r1, [sp, #28]
 8005fc4:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8005fc8:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005fca:	f021 0120 	bic.w	r1, r1, #32
 8005fce:	2941      	cmp	r1, #65	@ 0x41
 8005fd0:	bf08      	it	eq
 8005fd2:	320f      	addeq	r2, #15
 8005fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd8:	bf06      	itte	eq
 8005fda:	b2d2      	uxtbeq	r2, r2
 8005fdc:	2101      	moveq	r1, #1
 8005fde:	2100      	movne	r1, #0
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	9320      	str	r3, [sp, #128]	@ 0x80
 8005fe4:	bfb8      	it	lt
 8005fe6:	f1c0 0301 	rsblt	r3, r0, #1
 8005fea:	f88d 2088 	strb.w	r2, [sp, #136]	@ 0x88
 8005fee:	bfb4      	ite	lt
 8005ff0:	222d      	movlt	r2, #45	@ 0x2d
 8005ff2:	222b      	movge	r2, #43	@ 0x2b
 8005ff4:	2b09      	cmp	r3, #9
 8005ff6:	f88d 2089 	strb.w	r2, [sp, #137]	@ 0x89
 8005ffa:	f340 8192 	ble.w	8006322 <_svfprintf_r+0x90a>
 8005ffe:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8006002:	270a      	movs	r7, #10
 8006004:	4602      	mov	r2, r0
 8006006:	fbb3 f6f7 	udiv	r6, r3, r7
 800600a:	fb07 3116 	mls	r1, r7, r6, r3
 800600e:	3130      	adds	r1, #48	@ 0x30
 8006010:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006014:	4619      	mov	r1, r3
 8006016:	2963      	cmp	r1, #99	@ 0x63
 8006018:	f100 30ff 	add.w	r0, r0, #4294967295
 800601c:	4633      	mov	r3, r6
 800601e:	dcf1      	bgt.n	8006004 <_svfprintf_r+0x5ec>
 8006020:	3330      	adds	r3, #48	@ 0x30
 8006022:	1e91      	subs	r1, r2, #2
 8006024:	f800 3c01 	strb.w	r3, [r0, #-1]
 8006028:	f10d 0689 	add.w	r6, sp, #137	@ 0x89
 800602c:	460b      	mov	r3, r1
 800602e:	f10d 0097 	add.w	r0, sp, #151	@ 0x97
 8006032:	4283      	cmp	r3, r0
 8006034:	f0c0 8170 	bcc.w	8006318 <_svfprintf_r+0x900>
 8006038:	f10d 0399 	add.w	r3, sp, #153	@ 0x99
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	4281      	cmp	r1, r0
 8006040:	bf88      	it	hi
 8006042:	2300      	movhi	r3, #0
 8006044:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 8006048:	441a      	add	r2, r3
 800604a:	ab22      	add	r3, sp, #136	@ 0x88
 800604c:	1ad3      	subs	r3, r2, r3
 800604e:	9317      	str	r3, [sp, #92]	@ 0x5c
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006054:	2b01      	cmp	r3, #1
 8006056:	eb03 0602 	add.w	r6, r3, r2
 800605a:	dc01      	bgt.n	8006060 <_svfprintf_r+0x648>
 800605c:	07e8      	lsls	r0, r5, #31
 800605e:	d501      	bpl.n	8006064 <_svfprintf_r+0x64c>
 8006060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006062:	441e      	add	r6, r3
 8006064:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8006068:	f04f 0800 	mov.w	r8, #0
 800606c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8006070:	9311      	str	r3, [sp, #68]	@ 0x44
 8006072:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8006076:	4647      	mov	r7, r8
 8006078:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800607a:	2b00      	cmp	r3, #0
 800607c:	f040 81a4 	bne.w	80063c8 <_svfprintf_r+0x9b0>
 8006080:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8006082:	f04f 0900 	mov.w	r9, #0
 8006086:	45b1      	cmp	r9, r6
 8006088:	464b      	mov	r3, r9
 800608a:	bfb8      	it	lt
 800608c:	4633      	movlt	r3, r6
 800608e:	9311      	str	r3, [sp, #68]	@ 0x44
 8006090:	f89d 307b 	ldrb.w	r3, [sp, #123]	@ 0x7b
 8006094:	b113      	cbz	r3, 800609c <_svfprintf_r+0x684>
 8006096:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006098:	3301      	adds	r3, #1
 800609a:	9311      	str	r3, [sp, #68]	@ 0x44
 800609c:	f015 0302 	ands.w	r3, r5, #2
 80060a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80060a2:	bf1e      	ittt	ne
 80060a4:	9b11      	ldrne	r3, [sp, #68]	@ 0x44
 80060a6:	3302      	addne	r3, #2
 80060a8:	9311      	strne	r3, [sp, #68]	@ 0x44
 80060aa:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 80060ae:	931c      	str	r3, [sp, #112]	@ 0x70
 80060b0:	d120      	bne.n	80060f4 <_svfprintf_r+0x6dc>
 80060b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060b4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	dd1b      	ble.n	80060f4 <_svfprintf_r+0x6dc>
 80060bc:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 80060c0:	4958      	ldr	r1, [pc, #352]	@ (8006224 <_svfprintf_r+0x80c>)
 80060c2:	6021      	str	r1, [r4, #0]
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	f102 0201 	add.w	r2, r2, #1
 80060ca:	f104 0008 	add.w	r0, r4, #8
 80060ce:	f300 82b1 	bgt.w	8006634 <_svfprintf_r+0xc1c>
 80060d2:	eb0c 0103 	add.w	r1, ip, r3
 80060d6:	2a07      	cmp	r2, #7
 80060d8:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 80060dc:	6063      	str	r3, [r4, #4]
 80060de:	f340 82be 	ble.w	800665e <_svfprintf_r+0xc46>
 80060e2:	9906      	ldr	r1, [sp, #24]
 80060e4:	9803      	ldr	r0, [sp, #12]
 80060e6:	aa26      	add	r2, sp, #152	@ 0x98
 80060e8:	f000 fe6c 	bl	8006dc4 <__ssprint_r>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	f040 8605 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80060f2:	ac29      	add	r4, sp, #164	@ 0xa4
 80060f4:	f89d 207b 	ldrb.w	r2, [sp, #123]	@ 0x7b
 80060f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80060fa:	b16a      	cbz	r2, 8006118 <_svfprintf_r+0x700>
 80060fc:	f10d 027b 	add.w	r2, sp, #123	@ 0x7b
 8006100:	6022      	str	r2, [r4, #0]
 8006102:	2201      	movs	r2, #1
 8006104:	4413      	add	r3, r2
 8006106:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006108:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800610a:	6062      	str	r2, [r4, #4]
 800610c:	4413      	add	r3, r2
 800610e:	2b07      	cmp	r3, #7
 8006110:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006112:	f300 82a6 	bgt.w	8006662 <_svfprintf_r+0xc4a>
 8006116:	3408      	adds	r4, #8
 8006118:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800611a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800611c:	b162      	cbz	r2, 8006138 <_svfprintf_r+0x720>
 800611e:	aa1f      	add	r2, sp, #124	@ 0x7c
 8006120:	6022      	str	r2, [r4, #0]
 8006122:	2202      	movs	r2, #2
 8006124:	4413      	add	r3, r2
 8006126:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006128:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800612a:	6062      	str	r2, [r4, #4]
 800612c:	3301      	adds	r3, #1
 800612e:	2b07      	cmp	r3, #7
 8006130:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006132:	f300 82a0 	bgt.w	8006676 <_svfprintf_r+0xc5e>
 8006136:	3408      	adds	r4, #8
 8006138:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d120      	bne.n	8006180 <_svfprintf_r+0x768>
 800613e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006140:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	dd1b      	ble.n	8006180 <_svfprintf_r+0x768>
 8006148:	e9dd 2c27 	ldrd	r2, ip, [sp, #156]	@ 0x9c
 800614c:	4936      	ldr	r1, [pc, #216]	@ (8006228 <_svfprintf_r+0x810>)
 800614e:	6021      	str	r1, [r4, #0]
 8006150:	2b10      	cmp	r3, #16
 8006152:	f102 0201 	add.w	r2, r2, #1
 8006156:	f104 0008 	add.w	r0, r4, #8
 800615a:	f300 8296 	bgt.w	800668a <_svfprintf_r+0xc72>
 800615e:	eb0c 0103 	add.w	r1, ip, r3
 8006162:	2a07      	cmp	r2, #7
 8006164:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8006168:	6063      	str	r3, [r4, #4]
 800616a:	f340 82a3 	ble.w	80066b4 <_svfprintf_r+0xc9c>
 800616e:	9906      	ldr	r1, [sp, #24]
 8006170:	9803      	ldr	r0, [sp, #12]
 8006172:	aa26      	add	r2, sp, #152	@ 0x98
 8006174:	f000 fe26 	bl	8006dc4 <__ssprint_r>
 8006178:	2800      	cmp	r0, #0
 800617a:	f040 85bf 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 800617e:	ac29      	add	r4, sp, #164	@ 0xa4
 8006180:	eba9 0906 	sub.w	r9, r9, r6
 8006184:	f1b9 0f00 	cmp.w	r9, #0
 8006188:	dd1c      	ble.n	80061c4 <_svfprintf_r+0x7ac>
 800618a:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	@ 0x9c
 800618e:	4826      	ldr	r0, [pc, #152]	@ (8006228 <_svfprintf_r+0x810>)
 8006190:	6020      	str	r0, [r4, #0]
 8006192:	f1b9 0f10 	cmp.w	r9, #16
 8006196:	f102 0201 	add.w	r2, r2, #1
 800619a:	f104 0108 	add.w	r1, r4, #8
 800619e:	f300 828b 	bgt.w	80066b8 <_svfprintf_r+0xca0>
 80061a2:	444b      	add	r3, r9
 80061a4:	2a07      	cmp	r2, #7
 80061a6:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80061aa:	f8c4 9004 	str.w	r9, [r4, #4]
 80061ae:	f340 8297 	ble.w	80066e0 <_svfprintf_r+0xcc8>
 80061b2:	9906      	ldr	r1, [sp, #24]
 80061b4:	9803      	ldr	r0, [sp, #12]
 80061b6:	aa26      	add	r2, sp, #152	@ 0x98
 80061b8:	f000 fe04 	bl	8006dc4 <__ssprint_r>
 80061bc:	2800      	cmp	r0, #0
 80061be:	f040 859d 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80061c2:	ac29      	add	r4, sp, #164	@ 0xa4
 80061c4:	05eb      	lsls	r3, r5, #23
 80061c6:	f8dd 90a0 	ldr.w	r9, [sp, #160]	@ 0xa0
 80061ca:	f100 828f 	bmi.w	80066ec <_svfprintf_r+0xcd4>
 80061ce:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80061d0:	3301      	adds	r3, #1
 80061d2:	e9c4 b600 	strd	fp, r6, [r4]
 80061d6:	2b07      	cmp	r3, #7
 80061d8:	444e      	add	r6, r9
 80061da:	9628      	str	r6, [sp, #160]	@ 0xa0
 80061dc:	9327      	str	r3, [sp, #156]	@ 0x9c
 80061de:	f300 82ca 	bgt.w	8006776 <_svfprintf_r+0xd5e>
 80061e2:	3408      	adds	r4, #8
 80061e4:	076a      	lsls	r2, r5, #29
 80061e6:	f100 856b 	bmi.w	8006cc0 <_svfprintf_r+0x12a8>
 80061ea:	e9dd 230f 	ldrd	r2, r3, [sp, #60]	@ 0x3c
 80061ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80061f0:	428a      	cmp	r2, r1
 80061f2:	bfac      	ite	ge
 80061f4:	189b      	addge	r3, r3, r2
 80061f6:	185b      	addlt	r3, r3, r1
 80061f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80061fa:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80061fc:	b13b      	cbz	r3, 800620e <_svfprintf_r+0x7f6>
 80061fe:	9906      	ldr	r1, [sp, #24]
 8006200:	9803      	ldr	r0, [sp, #12]
 8006202:	aa26      	add	r2, sp, #152	@ 0x98
 8006204:	f000 fdde 	bl	8006dc4 <__ssprint_r>
 8006208:	2800      	cmp	r0, #0
 800620a:	f040 8577 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 800620e:	2300      	movs	r3, #0
 8006210:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006212:	f1ba 0f00 	cmp.w	sl, #0
 8006216:	f040 858d 	bne.w	8006d34 <_svfprintf_r+0x131c>
 800621a:	9f08      	ldr	r7, [sp, #32]
 800621c:	ac29      	add	r4, sp, #164	@ 0xa4
 800621e:	e0e0      	b.n	80063e2 <_svfprintf_r+0x9ca>
 8006220:	3fe00000 	.word	0x3fe00000
 8006224:	08009a4d 	.word	0x08009a4d
 8006228:	08009a3d 	.word	0x08009a3d
 800622c:	f802 0c01 	strb.w	r0, [r2, #-1]
 8006230:	e6b4      	b.n	8005f9c <_svfprintf_r+0x584>
 8006232:	f803 0b01 	strb.w	r0, [r3], #1
 8006236:	1aca      	subs	r2, r1, r3
 8006238:	2a00      	cmp	r2, #0
 800623a:	dafa      	bge.n	8006232 <_svfprintf_r+0x81a>
 800623c:	1c73      	adds	r3, r6, #1
 800623e:	3601      	adds	r6, #1
 8006240:	bfb8      	it	lt
 8006242:	2300      	movlt	r3, #0
 8006244:	441f      	add	r7, r3
 8006246:	e6b9      	b.n	8005fbc <_svfprintf_r+0x5a4>
 8006248:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800624c:	d005      	beq.n	800625a <_svfprintf_r+0x842>
 800624e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006252:	d12f      	bne.n	80062b4 <_svfprintf_r+0x89c>
 8006254:	1c77      	adds	r7, r6, #1
 8006256:	2102      	movs	r1, #2
 8006258:	e001      	b.n	800625e <_svfprintf_r+0x846>
 800625a:	4637      	mov	r7, r6
 800625c:	2103      	movs	r1, #3
 800625e:	ab24      	add	r3, sp, #144	@ 0x90
 8006260:	9301      	str	r3, [sp, #4]
 8006262:	ab21      	add	r3, sp, #132	@ 0x84
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	ed9d 0b12 	vldr	d0, [sp, #72]	@ 0x48
 800626a:	9803      	ldr	r0, [sp, #12]
 800626c:	ab20      	add	r3, sp, #128	@ 0x80
 800626e:	463a      	mov	r2, r7
 8006270:	f001 f816 	bl	80072a0 <_dtoa_r>
 8006274:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006278:	4683      	mov	fp, r0
 800627a:	d130      	bne.n	80062de <_svfprintf_r+0x8c6>
 800627c:	07ea      	lsls	r2, r5, #31
 800627e:	d41b      	bmi.n	80062b8 <_svfprintf_r+0x8a0>
 8006280:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006282:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 8006284:	eba3 030b 	sub.w	r3, r3, fp
 8006288:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800628c:	9304      	str	r3, [sp, #16]
 800628e:	d03b      	beq.n	8006308 <_svfprintf_r+0x8f0>
 8006290:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006294:	f47f ae95 	bne.w	8005fc2 <_svfprintf_r+0x5aa>
 8006298:	f005 0301 	and.w	r3, r5, #1
 800629c:	2f00      	cmp	r7, #0
 800629e:	ea43 0306 	orr.w	r3, r3, r6
 80062a2:	dd58      	ble.n	8006356 <_svfprintf_r+0x93e>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d060      	beq.n	800636a <_svfprintf_r+0x952>
 80062a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062aa:	18fb      	adds	r3, r7, r3
 80062ac:	441e      	add	r6, r3
 80062ae:	2366      	movs	r3, #102	@ 0x66
 80062b0:	9307      	str	r3, [sp, #28]
 80062b2:	e05f      	b.n	8006374 <_svfprintf_r+0x95c>
 80062b4:	4637      	mov	r7, r6
 80062b6:	e7ce      	b.n	8006256 <_svfprintf_r+0x83e>
 80062b8:	eb00 0907 	add.w	r9, r0, r7
 80062bc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 80062c0:	2200      	movs	r2, #0
 80062c2:	2300      	movs	r3, #0
 80062c4:	f7fa fc00 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c8:	b108      	cbz	r0, 80062ce <_svfprintf_r+0x8b6>
 80062ca:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 80062ce:	2230      	movs	r2, #48	@ 0x30
 80062d0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80062d2:	4599      	cmp	r9, r3
 80062d4:	d9d4      	bls.n	8006280 <_svfprintf_r+0x868>
 80062d6:	1c59      	adds	r1, r3, #1
 80062d8:	9124      	str	r1, [sp, #144]	@ 0x90
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	e7f8      	b.n	80062d0 <_svfprintf_r+0x8b8>
 80062de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80062e2:	eb00 0907 	add.w	r9, r0, r7
 80062e6:	d1e9      	bne.n	80062bc <_svfprintf_r+0x8a4>
 80062e8:	7803      	ldrb	r3, [r0, #0]
 80062ea:	2b30      	cmp	r3, #48	@ 0x30
 80062ec:	d109      	bne.n	8006302 <_svfprintf_r+0x8ea>
 80062ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	@ 0x48
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	f7fa fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80062fa:	b910      	cbnz	r0, 8006302 <_svfprintf_r+0x8ea>
 80062fc:	f1c7 0701 	rsb	r7, r7, #1
 8006300:	9720      	str	r7, [sp, #128]	@ 0x80
 8006302:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006304:	4499      	add	r9, r3
 8006306:	e7d9      	b.n	80062bc <_svfprintf_r+0x8a4>
 8006308:	1cfb      	adds	r3, r7, #3
 800630a:	db01      	blt.n	8006310 <_svfprintf_r+0x8f8>
 800630c:	42be      	cmp	r6, r7
 800630e:	da15      	bge.n	800633c <_svfprintf_r+0x924>
 8006310:	9b07      	ldr	r3, [sp, #28]
 8006312:	3b02      	subs	r3, #2
 8006314:	9307      	str	r3, [sp, #28]
 8006316:	e654      	b.n	8005fc2 <_svfprintf_r+0x5aa>
 8006318:	f813 7b01 	ldrb.w	r7, [r3], #1
 800631c:	f806 7f01 	strb.w	r7, [r6, #1]!
 8006320:	e687      	b.n	8006032 <_svfprintf_r+0x61a>
 8006322:	b941      	cbnz	r1, 8006336 <_svfprintf_r+0x91e>
 8006324:	2230      	movs	r2, #48	@ 0x30
 8006326:	f88d 208a 	strb.w	r2, [sp, #138]	@ 0x8a
 800632a:	f10d 028b 	add.w	r2, sp, #139	@ 0x8b
 800632e:	3330      	adds	r3, #48	@ 0x30
 8006330:	f802 3b01 	strb.w	r3, [r2], #1
 8006334:	e689      	b.n	800604a <_svfprintf_r+0x632>
 8006336:	f10d 028a 	add.w	r2, sp, #138	@ 0x8a
 800633a:	e7f8      	b.n	800632e <_svfprintf_r+0x916>
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	42bb      	cmp	r3, r7
 8006340:	dd0d      	ble.n	800635e <_svfprintf_r+0x946>
 8006342:	9b04      	ldr	r3, [sp, #16]
 8006344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006346:	2f00      	cmp	r7, #0
 8006348:	eb03 0602 	add.w	r6, r3, r2
 800634c:	dc0b      	bgt.n	8006366 <_svfprintf_r+0x94e>
 800634e:	f1c7 0301 	rsb	r3, r7, #1
 8006352:	441e      	add	r6, r3
 8006354:	e007      	b.n	8006366 <_svfprintf_r+0x94e>
 8006356:	b153      	cbz	r3, 800636e <_svfprintf_r+0x956>
 8006358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635a:	3301      	adds	r3, #1
 800635c:	e7a6      	b.n	80062ac <_svfprintf_r+0x894>
 800635e:	07e9      	lsls	r1, r5, #31
 8006360:	d51d      	bpl.n	800639e <_svfprintf_r+0x986>
 8006362:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006364:	18fe      	adds	r6, r7, r3
 8006366:	2367      	movs	r3, #103	@ 0x67
 8006368:	e7a2      	b.n	80062b0 <_svfprintf_r+0x898>
 800636a:	463e      	mov	r6, r7
 800636c:	e79f      	b.n	80062ae <_svfprintf_r+0x896>
 800636e:	2366      	movs	r3, #102	@ 0x66
 8006370:	9307      	str	r3, [sp, #28]
 8006372:	2601      	movs	r6, #1
 8006374:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8006378:	9309      	str	r3, [sp, #36]	@ 0x24
 800637a:	d022      	beq.n	80063c2 <_svfprintf_r+0x9aa>
 800637c:	f04f 0800 	mov.w	r8, #0
 8006380:	2f00      	cmp	r7, #0
 8006382:	f8cd 8024 	str.w	r8, [sp, #36]	@ 0x24
 8006386:	f77f ae77 	ble.w	8006078 <_svfprintf_r+0x660>
 800638a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2bff      	cmp	r3, #255	@ 0xff
 8006390:	d107      	bne.n	80063a2 <_svfprintf_r+0x98a>
 8006392:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006394:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006396:	4443      	add	r3, r8
 8006398:	fb02 6603 	mla	r6, r2, r3, r6
 800639c:	e66c      	b.n	8006078 <_svfprintf_r+0x660>
 800639e:	463e      	mov	r6, r7
 80063a0:	e7e1      	b.n	8006366 <_svfprintf_r+0x94e>
 80063a2:	42bb      	cmp	r3, r7
 80063a4:	daf5      	bge.n	8006392 <_svfprintf_r+0x97a>
 80063a6:	1aff      	subs	r7, r7, r3
 80063a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063aa:	785b      	ldrb	r3, [r3, #1]
 80063ac:	b133      	cbz	r3, 80063bc <_svfprintf_r+0x9a4>
 80063ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b0:	3301      	adds	r3, #1
 80063b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063b6:	3301      	adds	r3, #1
 80063b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ba:	e7e6      	b.n	800638a <_svfprintf_r+0x972>
 80063bc:	f108 0801 	add.w	r8, r8, #1
 80063c0:	e7e3      	b.n	800638a <_svfprintf_r+0x972>
 80063c2:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80063c6:	e657      	b.n	8006078 <_svfprintf_r+0x660>
 80063c8:	232d      	movs	r3, #45	@ 0x2d
 80063ca:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 80063ce:	e657      	b.n	8006080 <_svfprintf_r+0x668>
 80063d0:	06aa      	lsls	r2, r5, #26
 80063d2:	d50a      	bpl.n	80063ea <_svfprintf_r+0x9d2>
 80063d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80063da:	17d2      	asrs	r2, r2, #31
 80063dc:	e9c3 1200 	strd	r1, r2, [r3]
 80063e0:	3704      	adds	r7, #4
 80063e2:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 80063e6:	f7ff bb4f 	b.w	8005a88 <_svfprintf_r+0x70>
 80063ea:	06eb      	lsls	r3, r5, #27
 80063ec:	d503      	bpl.n	80063f6 <_svfprintf_r+0x9de>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e7f4      	b.n	80063e0 <_svfprintf_r+0x9c8>
 80063f6:	066e      	lsls	r6, r5, #25
 80063f8:	d503      	bpl.n	8006402 <_svfprintf_r+0x9ea>
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80063fe:	801a      	strh	r2, [r3, #0]
 8006400:	e7ee      	b.n	80063e0 <_svfprintf_r+0x9c8>
 8006402:	05ad      	lsls	r5, r5, #22
 8006404:	d5f3      	bpl.n	80063ee <_svfprintf_r+0x9d6>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e7e8      	b.n	80063e0 <_svfprintf_r+0x9c8>
 800640e:	f045 0510 	orr.w	r5, r5, #16
 8006412:	f015 0320 	ands.w	r3, r5, #32
 8006416:	d01f      	beq.n	8006458 <_svfprintf_r+0xa40>
 8006418:	3707      	adds	r7, #7
 800641a:	f027 0307 	bic.w	r3, r7, #7
 800641e:	461a      	mov	r2, r3
 8006420:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006424:	f852 7b08 	ldr.w	r7, [r2], #8
 8006428:	9208      	str	r2, [sp, #32]
 800642a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800642e:	2300      	movs	r3, #0
 8006430:	2200      	movs	r2, #0
 8006432:	f88d 207b 	strb.w	r2, [sp, #123]	@ 0x7b
 8006436:	2e00      	cmp	r6, #0
 8006438:	f2c0 848d 	blt.w	8006d56 <_svfprintf_r+0x133e>
 800643c:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8006440:	9209      	str	r2, [sp, #36]	@ 0x24
 8006442:	ea57 0208 	orrs.w	r2, r7, r8
 8006446:	f040 848b 	bne.w	8006d60 <_svfprintf_r+0x1348>
 800644a:	2e00      	cmp	r6, #0
 800644c:	f000 80de 	beq.w	800660c <_svfprintf_r+0xbf4>
 8006450:	2b01      	cmp	r3, #1
 8006452:	f040 8488 	bne.w	8006d66 <_svfprintf_r+0x134e>
 8006456:	e083      	b.n	8006560 <_svfprintf_r+0xb48>
 8006458:	463a      	mov	r2, r7
 800645a:	f015 0810 	ands.w	r8, r5, #16
 800645e:	f852 7b04 	ldr.w	r7, [r2], #4
 8006462:	9208      	str	r2, [sp, #32]
 8006464:	d001      	beq.n	800646a <_svfprintf_r+0xa52>
 8006466:	4698      	mov	r8, r3
 8006468:	e7df      	b.n	800642a <_svfprintf_r+0xa12>
 800646a:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 800646e:	d001      	beq.n	8006474 <_svfprintf_r+0xa5c>
 8006470:	b2bf      	uxth	r7, r7
 8006472:	e7da      	b.n	800642a <_svfprintf_r+0xa12>
 8006474:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8006478:	d0d7      	beq.n	800642a <_svfprintf_r+0xa12>
 800647a:	b2ff      	uxtb	r7, r7
 800647c:	e7f3      	b.n	8006466 <_svfprintf_r+0xa4e>
 800647e:	463b      	mov	r3, r7
 8006480:	2278      	movs	r2, #120	@ 0x78
 8006482:	f853 7b04 	ldr.w	r7, [r3], #4
 8006486:	9308      	str	r3, [sp, #32]
 8006488:	f647 0330 	movw	r3, #30768	@ 0x7830
 800648c:	f8ad 307c 	strh.w	r3, [sp, #124]	@ 0x7c
 8006490:	4b94      	ldr	r3, [pc, #592]	@ (80066e4 <_svfprintf_r+0xccc>)
 8006492:	931a      	str	r3, [sp, #104]	@ 0x68
 8006494:	f04f 0800 	mov.w	r8, #0
 8006498:	f045 0502 	orr.w	r5, r5, #2
 800649c:	2302      	movs	r3, #2
 800649e:	9207      	str	r2, [sp, #28]
 80064a0:	e7c6      	b.n	8006430 <_svfprintf_r+0xa18>
 80064a2:	463b      	mov	r3, r7
 80064a4:	2700      	movs	r7, #0
 80064a6:	f853 bb04 	ldr.w	fp, [r3], #4
 80064aa:	9308      	str	r3, [sp, #32]
 80064ac:	42be      	cmp	r6, r7
 80064ae:	f88d 707b 	strb.w	r7, [sp, #123]	@ 0x7b
 80064b2:	db0f      	blt.n	80064d4 <_svfprintf_r+0xabc>
 80064b4:	4632      	mov	r2, r6
 80064b6:	4639      	mov	r1, r7
 80064b8:	4658      	mov	r0, fp
 80064ba:	f7f9 fe91 	bl	80001e0 <memchr>
 80064be:	4682      	mov	sl, r0
 80064c0:	2800      	cmp	r0, #0
 80064c2:	f43f ac8e 	beq.w	8005de2 <_svfprintf_r+0x3ca>
 80064c6:	eba0 060b 	sub.w	r6, r0, fp
 80064ca:	46ba      	mov	sl, r7
 80064cc:	46b9      	mov	r9, r7
 80064ce:	46b8      	mov	r8, r7
 80064d0:	9709      	str	r7, [sp, #36]	@ 0x24
 80064d2:	e5d8      	b.n	8006086 <_svfprintf_r+0x66e>
 80064d4:	4658      	mov	r0, fp
 80064d6:	f7f9 fe7b 	bl	80001d0 <strlen>
 80064da:	46ba      	mov	sl, r7
 80064dc:	4606      	mov	r6, r0
 80064de:	e480      	b.n	8005de2 <_svfprintf_r+0x3ca>
 80064e0:	f045 0510 	orr.w	r5, r5, #16
 80064e4:	f015 0320 	ands.w	r3, r5, #32
 80064e8:	d00a      	beq.n	8006500 <_svfprintf_r+0xae8>
 80064ea:	3707      	adds	r7, #7
 80064ec:	f027 0307 	bic.w	r3, r7, #7
 80064f0:	461a      	mov	r2, r3
 80064f2:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80064f6:	f852 7b08 	ldr.w	r7, [r2], #8
 80064fa:	9208      	str	r2, [sp, #32]
 80064fc:	2301      	movs	r3, #1
 80064fe:	e797      	b.n	8006430 <_svfprintf_r+0xa18>
 8006500:	463a      	mov	r2, r7
 8006502:	f015 0810 	ands.w	r8, r5, #16
 8006506:	f852 7b04 	ldr.w	r7, [r2], #4
 800650a:	9208      	str	r2, [sp, #32]
 800650c:	d001      	beq.n	8006512 <_svfprintf_r+0xafa>
 800650e:	4698      	mov	r8, r3
 8006510:	e7f4      	b.n	80064fc <_svfprintf_r+0xae4>
 8006512:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8006516:	d001      	beq.n	800651c <_svfprintf_r+0xb04>
 8006518:	b2bf      	uxth	r7, r7
 800651a:	e7ef      	b.n	80064fc <_svfprintf_r+0xae4>
 800651c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8006520:	d0ec      	beq.n	80064fc <_svfprintf_r+0xae4>
 8006522:	b2ff      	uxtb	r7, r7
 8006524:	e7f3      	b.n	800650e <_svfprintf_r+0xaf6>
 8006526:	4b70      	ldr	r3, [pc, #448]	@ (80066e8 <_svfprintf_r+0xcd0>)
 8006528:	f7ff bb43 	b.w	8005bb2 <_svfprintf_r+0x19a>
 800652c:	463a      	mov	r2, r7
 800652e:	f015 0810 	ands.w	r8, r5, #16
 8006532:	f852 7b04 	ldr.w	r7, [r2], #4
 8006536:	9208      	str	r2, [sp, #32]
 8006538:	d002      	beq.n	8006540 <_svfprintf_r+0xb28>
 800653a:	4698      	mov	r8, r3
 800653c:	f7ff bb47 	b.w	8005bce <_svfprintf_r+0x1b6>
 8006540:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8006544:	d002      	beq.n	800654c <_svfprintf_r+0xb34>
 8006546:	b2bf      	uxth	r7, r7
 8006548:	f7ff bb41 	b.w	8005bce <_svfprintf_r+0x1b6>
 800654c:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8006550:	f43f ab3d 	beq.w	8005bce <_svfprintf_r+0x1b6>
 8006554:	b2ff      	uxtb	r7, r7
 8006556:	e7f0      	b.n	800653a <_svfprintf_r+0xb22>
 8006558:	2f0a      	cmp	r7, #10
 800655a:	f178 0300 	sbcs.w	r3, r8, #0
 800655e:	d207      	bcs.n	8006570 <_svfprintf_r+0xb58>
 8006560:	3730      	adds	r7, #48	@ 0x30
 8006562:	b2ff      	uxtb	r7, r7
 8006564:	f88d 7147 	strb.w	r7, [sp, #327]	@ 0x147
 8006568:	f20d 1b47 	addw	fp, sp, #327	@ 0x147
 800656c:	f000 bc18 	b.w	8006da0 <_svfprintf_r+0x1388>
 8006570:	2300      	movs	r3, #0
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800657a:	ad52      	add	r5, sp, #328	@ 0x148
 800657c:	9311      	str	r3, [sp, #68]	@ 0x44
 800657e:	220a      	movs	r2, #10
 8006580:	2300      	movs	r3, #0
 8006582:	4638      	mov	r0, r7
 8006584:	4641      	mov	r1, r8
 8006586:	f7fa fb0f 	bl	8000ba8 <__aeabi_uldivmod>
 800658a:	9b04      	ldr	r3, [sp, #16]
 800658c:	3301      	adds	r3, #1
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006592:	3230      	adds	r2, #48	@ 0x30
 8006594:	4682      	mov	sl, r0
 8006596:	4689      	mov	r9, r1
 8006598:	f105 3bff 	add.w	fp, r5, #4294967295
 800659c:	f805 2c01 	strb.w	r2, [r5, #-1]
 80065a0:	b303      	cbz	r3, 80065e4 <_svfprintf_r+0xbcc>
 80065a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	9b04      	ldr	r3, [sp, #16]
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d11b      	bne.n	80065e4 <_svfprintf_r+0xbcc>
 80065ac:	2bff      	cmp	r3, #255	@ 0xff
 80065ae:	d019      	beq.n	80065e4 <_svfprintf_r+0xbcc>
 80065b0:	2f0a      	cmp	r7, #10
 80065b2:	f178 0800 	sbcs.w	r8, r8, #0
 80065b6:	f0c0 83f3 	bcc.w	8006da0 <_svfprintf_r+0x1388>
 80065ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80065bc:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80065be:	ebab 0b03 	sub.w	fp, fp, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	4658      	mov	r0, fp
 80065c6:	f000 fd28 	bl	800701a <strncpy>
 80065ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065cc:	785a      	ldrb	r2, [r3, #1]
 80065ce:	b13a      	cbz	r2, 80065e0 <_svfprintf_r+0xbc8>
 80065d0:	3301      	adds	r3, #1
 80065d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80065d4:	2300      	movs	r3, #0
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	4657      	mov	r7, sl
 80065da:	46c8      	mov	r8, r9
 80065dc:	465d      	mov	r5, fp
 80065de:	e7ce      	b.n	800657e <_svfprintf_r+0xb66>
 80065e0:	9204      	str	r2, [sp, #16]
 80065e2:	e7f9      	b.n	80065d8 <_svfprintf_r+0xbc0>
 80065e4:	2f0a      	cmp	r7, #10
 80065e6:	f178 0800 	sbcs.w	r8, r8, #0
 80065ea:	d2f5      	bcs.n	80065d8 <_svfprintf_r+0xbc0>
 80065ec:	e3d8      	b.n	8006da0 <_svfprintf_r+0x1388>
 80065ee:	f007 030f 	and.w	r3, r7, #15
 80065f2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065f4:	093f      	lsrs	r7, r7, #4
 80065f6:	5cd3      	ldrb	r3, [r2, r3]
 80065f8:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80065fc:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 8006600:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006604:	ea57 0308 	orrs.w	r3, r7, r8
 8006608:	d1f1      	bne.n	80065ee <_svfprintf_r+0xbd6>
 800660a:	e3c9      	b.n	8006da0 <_svfprintf_r+0x1388>
 800660c:	b91b      	cbnz	r3, 8006616 <_svfprintf_r+0xbfe>
 800660e:	07ea      	lsls	r2, r5, #31
 8006610:	d501      	bpl.n	8006616 <_svfprintf_r+0xbfe>
 8006612:	2730      	movs	r7, #48	@ 0x30
 8006614:	e7a6      	b.n	8006564 <_svfprintf_r+0xb4c>
 8006616:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 800661a:	e3c1      	b.n	8006da0 <_svfprintf_r+0x1388>
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 838e 	beq.w	8006d40 <_svfprintf_r+0x1328>
 8006624:	f88d 30e4 	strb.w	r3, [sp, #228]	@ 0xe4
 8006628:	2300      	movs	r3, #0
 800662a:	f88d 307b 	strb.w	r3, [sp, #123]	@ 0x7b
 800662e:	9708      	str	r7, [sp, #32]
 8006630:	f7ff bb6b 	b.w	8005d0a <_svfprintf_r+0x2f2>
 8006634:	2110      	movs	r1, #16
 8006636:	6061      	str	r1, [r4, #4]
 8006638:	2a07      	cmp	r2, #7
 800663a:	4461      	add	r1, ip
 800663c:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8006640:	dd0a      	ble.n	8006658 <_svfprintf_r+0xc40>
 8006642:	9906      	ldr	r1, [sp, #24]
 8006644:	9803      	ldr	r0, [sp, #12]
 8006646:	931d      	str	r3, [sp, #116]	@ 0x74
 8006648:	aa26      	add	r2, sp, #152	@ 0x98
 800664a:	f000 fbbb 	bl	8006dc4 <__ssprint_r>
 800664e:	2800      	cmp	r0, #0
 8006650:	f040 8354 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006654:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006656:	a829      	add	r0, sp, #164	@ 0xa4
 8006658:	3b10      	subs	r3, #16
 800665a:	4604      	mov	r4, r0
 800665c:	e52e      	b.n	80060bc <_svfprintf_r+0x6a4>
 800665e:	4604      	mov	r4, r0
 8006660:	e548      	b.n	80060f4 <_svfprintf_r+0x6dc>
 8006662:	9906      	ldr	r1, [sp, #24]
 8006664:	9803      	ldr	r0, [sp, #12]
 8006666:	aa26      	add	r2, sp, #152	@ 0x98
 8006668:	f000 fbac 	bl	8006dc4 <__ssprint_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	f040 8345 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006672:	ac29      	add	r4, sp, #164	@ 0xa4
 8006674:	e550      	b.n	8006118 <_svfprintf_r+0x700>
 8006676:	9906      	ldr	r1, [sp, #24]
 8006678:	9803      	ldr	r0, [sp, #12]
 800667a:	aa26      	add	r2, sp, #152	@ 0x98
 800667c:	f000 fba2 	bl	8006dc4 <__ssprint_r>
 8006680:	2800      	cmp	r0, #0
 8006682:	f040 833b 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006686:	ac29      	add	r4, sp, #164	@ 0xa4
 8006688:	e556      	b.n	8006138 <_svfprintf_r+0x720>
 800668a:	2110      	movs	r1, #16
 800668c:	6061      	str	r1, [r4, #4]
 800668e:	2a07      	cmp	r2, #7
 8006690:	4461      	add	r1, ip
 8006692:	e9cd 2127 	strd	r2, r1, [sp, #156]	@ 0x9c
 8006696:	dd0a      	ble.n	80066ae <_svfprintf_r+0xc96>
 8006698:	9906      	ldr	r1, [sp, #24]
 800669a:	9803      	ldr	r0, [sp, #12]
 800669c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800669e:	aa26      	add	r2, sp, #152	@ 0x98
 80066a0:	f000 fb90 	bl	8006dc4 <__ssprint_r>
 80066a4:	2800      	cmp	r0, #0
 80066a6:	f040 8329 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80066aa:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80066ac:	a829      	add	r0, sp, #164	@ 0xa4
 80066ae:	3b10      	subs	r3, #16
 80066b0:	4604      	mov	r4, r0
 80066b2:	e549      	b.n	8006148 <_svfprintf_r+0x730>
 80066b4:	4604      	mov	r4, r0
 80066b6:	e563      	b.n	8006180 <_svfprintf_r+0x768>
 80066b8:	2010      	movs	r0, #16
 80066ba:	4403      	add	r3, r0
 80066bc:	2a07      	cmp	r2, #7
 80066be:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 80066c2:	6060      	str	r0, [r4, #4]
 80066c4:	dd08      	ble.n	80066d8 <_svfprintf_r+0xcc0>
 80066c6:	9906      	ldr	r1, [sp, #24]
 80066c8:	9803      	ldr	r0, [sp, #12]
 80066ca:	aa26      	add	r2, sp, #152	@ 0x98
 80066cc:	f000 fb7a 	bl	8006dc4 <__ssprint_r>
 80066d0:	2800      	cmp	r0, #0
 80066d2:	f040 8313 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80066d6:	a929      	add	r1, sp, #164	@ 0xa4
 80066d8:	f1a9 0910 	sub.w	r9, r9, #16
 80066dc:	460c      	mov	r4, r1
 80066de:	e554      	b.n	800618a <_svfprintf_r+0x772>
 80066e0:	460c      	mov	r4, r1
 80066e2:	e56f      	b.n	80061c4 <_svfprintf_r+0x7ac>
 80066e4:	08009904 	.word	0x08009904
 80066e8:	08009915 	.word	0x08009915
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	2b65      	cmp	r3, #101	@ 0x65
 80066f0:	f340 8245 	ble.w	8006b7e <_svfprintf_r+0x1166>
 80066f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066f8:	2200      	movs	r2, #0
 80066fa:	2300      	movs	r3, #0
 80066fc:	f7fa f9e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006700:	2800      	cmp	r0, #0
 8006702:	d069      	beq.n	80067d8 <_svfprintf_r+0xdc0>
 8006704:	4b72      	ldr	r3, [pc, #456]	@ (80068d0 <_svfprintf_r+0xeb8>)
 8006706:	6023      	str	r3, [r4, #0]
 8006708:	2301      	movs	r3, #1
 800670a:	6063      	str	r3, [r4, #4]
 800670c:	444b      	add	r3, r9
 800670e:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006710:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006712:	3301      	adds	r3, #1
 8006714:	2b07      	cmp	r3, #7
 8006716:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006718:	dc37      	bgt.n	800678a <_svfprintf_r+0xd72>
 800671a:	3408      	adds	r4, #8
 800671c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800671e:	9a04      	ldr	r2, [sp, #16]
 8006720:	4293      	cmp	r3, r2
 8006722:	db02      	blt.n	800672a <_svfprintf_r+0xd12>
 8006724:	07ef      	lsls	r7, r5, #31
 8006726:	f57f ad5d 	bpl.w	80061e4 <_svfprintf_r+0x7cc>
 800672a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800672c:	6023      	str	r3, [r4, #0]
 800672e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006732:	6063      	str	r3, [r4, #4]
 8006734:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006736:	4413      	add	r3, r2
 8006738:	9328      	str	r3, [sp, #160]	@ 0xa0
 800673a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 800673c:	3301      	adds	r3, #1
 800673e:	2b07      	cmp	r3, #7
 8006740:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006742:	dc2c      	bgt.n	800679e <_svfprintf_r+0xd86>
 8006744:	3408      	adds	r4, #8
 8006746:	9b04      	ldr	r3, [sp, #16]
 8006748:	1e5e      	subs	r6, r3, #1
 800674a:	2e00      	cmp	r6, #0
 800674c:	f77f ad4a 	ble.w	80061e4 <_svfprintf_r+0x7cc>
 8006750:	4f60      	ldr	r7, [pc, #384]	@ (80068d4 <_svfprintf_r+0xebc>)
 8006752:	f04f 0810 	mov.w	r8, #16
 8006756:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 800675a:	2e10      	cmp	r6, #16
 800675c:	f103 0301 	add.w	r3, r3, #1
 8006760:	f104 0108 	add.w	r1, r4, #8
 8006764:	6027      	str	r7, [r4, #0]
 8006766:	dc24      	bgt.n	80067b2 <_svfprintf_r+0xd9a>
 8006768:	6066      	str	r6, [r4, #4]
 800676a:	2b07      	cmp	r3, #7
 800676c:	4416      	add	r6, r2
 800676e:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8006772:	f340 82a2 	ble.w	8006cba <_svfprintf_r+0x12a2>
 8006776:	9906      	ldr	r1, [sp, #24]
 8006778:	9803      	ldr	r0, [sp, #12]
 800677a:	aa26      	add	r2, sp, #152	@ 0x98
 800677c:	f000 fb22 	bl	8006dc4 <__ssprint_r>
 8006780:	2800      	cmp	r0, #0
 8006782:	f040 82bb 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006786:	ac29      	add	r4, sp, #164	@ 0xa4
 8006788:	e52c      	b.n	80061e4 <_svfprintf_r+0x7cc>
 800678a:	9906      	ldr	r1, [sp, #24]
 800678c:	9803      	ldr	r0, [sp, #12]
 800678e:	aa26      	add	r2, sp, #152	@ 0x98
 8006790:	f000 fb18 	bl	8006dc4 <__ssprint_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	f040 82b1 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 800679a:	ac29      	add	r4, sp, #164	@ 0xa4
 800679c:	e7be      	b.n	800671c <_svfprintf_r+0xd04>
 800679e:	9906      	ldr	r1, [sp, #24]
 80067a0:	9803      	ldr	r0, [sp, #12]
 80067a2:	aa26      	add	r2, sp, #152	@ 0x98
 80067a4:	f000 fb0e 	bl	8006dc4 <__ssprint_r>
 80067a8:	2800      	cmp	r0, #0
 80067aa:	f040 82a7 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80067ae:	ac29      	add	r4, sp, #164	@ 0xa4
 80067b0:	e7c9      	b.n	8006746 <_svfprintf_r+0xd2e>
 80067b2:	3210      	adds	r2, #16
 80067b4:	2b07      	cmp	r3, #7
 80067b6:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80067ba:	f8c4 8004 	str.w	r8, [r4, #4]
 80067be:	dd08      	ble.n	80067d2 <_svfprintf_r+0xdba>
 80067c0:	9906      	ldr	r1, [sp, #24]
 80067c2:	9803      	ldr	r0, [sp, #12]
 80067c4:	aa26      	add	r2, sp, #152	@ 0x98
 80067c6:	f000 fafd 	bl	8006dc4 <__ssprint_r>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	f040 8296 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80067d0:	a929      	add	r1, sp, #164	@ 0xa4
 80067d2:	3e10      	subs	r6, #16
 80067d4:	460c      	mov	r4, r1
 80067d6:	e7be      	b.n	8006756 <_svfprintf_r+0xd3e>
 80067d8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	dc7c      	bgt.n	80068d8 <_svfprintf_r+0xec0>
 80067de:	4b3c      	ldr	r3, [pc, #240]	@ (80068d0 <_svfprintf_r+0xeb8>)
 80067e0:	6023      	str	r3, [r4, #0]
 80067e2:	2301      	movs	r3, #1
 80067e4:	6063      	str	r3, [r4, #4]
 80067e6:	444b      	add	r3, r9
 80067e8:	9328      	str	r3, [sp, #160]	@ 0xa0
 80067ea:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80067ec:	3301      	adds	r3, #1
 80067ee:	2b07      	cmp	r3, #7
 80067f0:	9327      	str	r3, [sp, #156]	@ 0x9c
 80067f2:	dc46      	bgt.n	8006882 <_svfprintf_r+0xe6a>
 80067f4:	3408      	adds	r4, #8
 80067f6:	9904      	ldr	r1, [sp, #16]
 80067f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80067fa:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80067fc:	430b      	orrs	r3, r1
 80067fe:	f005 0101 	and.w	r1, r5, #1
 8006802:	430b      	orrs	r3, r1
 8006804:	f43f acee 	beq.w	80061e4 <_svfprintf_r+0x7cc>
 8006808:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800680a:	6023      	str	r3, [r4, #0]
 800680c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800680e:	6063      	str	r3, [r4, #4]
 8006810:	441a      	add	r2, r3
 8006812:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006814:	9228      	str	r2, [sp, #160]	@ 0xa0
 8006816:	3301      	adds	r3, #1
 8006818:	2b07      	cmp	r3, #7
 800681a:	9327      	str	r3, [sp, #156]	@ 0x9c
 800681c:	dc3b      	bgt.n	8006896 <_svfprintf_r+0xe7e>
 800681e:	f104 0308 	add.w	r3, r4, #8
 8006822:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006824:	2e00      	cmp	r6, #0
 8006826:	da1b      	bge.n	8006860 <_svfprintf_r+0xe48>
 8006828:	4f2a      	ldr	r7, [pc, #168]	@ (80068d4 <_svfprintf_r+0xebc>)
 800682a:	4276      	negs	r6, r6
 800682c:	461a      	mov	r2, r3
 800682e:	2410      	movs	r4, #16
 8006830:	e9dd 1027 	ldrd	r1, r0, [sp, #156]	@ 0x9c
 8006834:	2e10      	cmp	r6, #16
 8006836:	f101 0101 	add.w	r1, r1, #1
 800683a:	f103 0308 	add.w	r3, r3, #8
 800683e:	6017      	str	r7, [r2, #0]
 8006840:	dc33      	bgt.n	80068aa <_svfprintf_r+0xe92>
 8006842:	6056      	str	r6, [r2, #4]
 8006844:	2907      	cmp	r1, #7
 8006846:	4406      	add	r6, r0
 8006848:	e9cd 1627 	strd	r1, r6, [sp, #156]	@ 0x9c
 800684c:	dd08      	ble.n	8006860 <_svfprintf_r+0xe48>
 800684e:	9906      	ldr	r1, [sp, #24]
 8006850:	9803      	ldr	r0, [sp, #12]
 8006852:	aa26      	add	r2, sp, #152	@ 0x98
 8006854:	f000 fab6 	bl	8006dc4 <__ssprint_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	f040 824f 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 800685e:	ab29      	add	r3, sp, #164	@ 0xa4
 8006860:	9a04      	ldr	r2, [sp, #16]
 8006862:	9904      	ldr	r1, [sp, #16]
 8006864:	605a      	str	r2, [r3, #4]
 8006866:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8006868:	f8c3 b000 	str.w	fp, [r3]
 800686c:	440a      	add	r2, r1
 800686e:	9228      	str	r2, [sp, #160]	@ 0xa0
 8006870:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006872:	3201      	adds	r2, #1
 8006874:	2a07      	cmp	r2, #7
 8006876:	9227      	str	r2, [sp, #156]	@ 0x9c
 8006878:	f73f af7d 	bgt.w	8006776 <_svfprintf_r+0xd5e>
 800687c:	f103 0408 	add.w	r4, r3, #8
 8006880:	e4b0      	b.n	80061e4 <_svfprintf_r+0x7cc>
 8006882:	9906      	ldr	r1, [sp, #24]
 8006884:	9803      	ldr	r0, [sp, #12]
 8006886:	aa26      	add	r2, sp, #152	@ 0x98
 8006888:	f000 fa9c 	bl	8006dc4 <__ssprint_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	f040 8235 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006892:	ac29      	add	r4, sp, #164	@ 0xa4
 8006894:	e7af      	b.n	80067f6 <_svfprintf_r+0xdde>
 8006896:	9906      	ldr	r1, [sp, #24]
 8006898:	9803      	ldr	r0, [sp, #12]
 800689a:	aa26      	add	r2, sp, #152	@ 0x98
 800689c:	f000 fa92 	bl	8006dc4 <__ssprint_r>
 80068a0:	2800      	cmp	r0, #0
 80068a2:	f040 822b 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80068a6:	ab29      	add	r3, sp, #164	@ 0xa4
 80068a8:	e7bb      	b.n	8006822 <_svfprintf_r+0xe0a>
 80068aa:	3010      	adds	r0, #16
 80068ac:	2907      	cmp	r1, #7
 80068ae:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
 80068b2:	6054      	str	r4, [r2, #4]
 80068b4:	dd08      	ble.n	80068c8 <_svfprintf_r+0xeb0>
 80068b6:	9906      	ldr	r1, [sp, #24]
 80068b8:	9803      	ldr	r0, [sp, #12]
 80068ba:	aa26      	add	r2, sp, #152	@ 0x98
 80068bc:	f000 fa82 	bl	8006dc4 <__ssprint_r>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f040 821b 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 80068c6:	ab29      	add	r3, sp, #164	@ 0xa4
 80068c8:	3e10      	subs	r6, #16
 80068ca:	461a      	mov	r2, r3
 80068cc:	e7b0      	b.n	8006830 <_svfprintf_r+0xe18>
 80068ce:	bf00      	nop
 80068d0:	08009926 	.word	0x08009926
 80068d4:	08009a3d 	.word	0x08009a3d
 80068d8:	9b04      	ldr	r3, [sp, #16]
 80068da:	42bb      	cmp	r3, r7
 80068dc:	bfa8      	it	ge
 80068de:	463b      	movge	r3, r7
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	461e      	mov	r6, r3
 80068e4:	dd0a      	ble.n	80068fc <_svfprintf_r+0xee4>
 80068e6:	e9c4 b300 	strd	fp, r3, [r4]
 80068ea:	444b      	add	r3, r9
 80068ec:	9328      	str	r3, [sp, #160]	@ 0xa0
 80068ee:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80068f0:	3301      	adds	r3, #1
 80068f2:	2b07      	cmp	r3, #7
 80068f4:	9327      	str	r3, [sp, #156]	@ 0x9c
 80068f6:	f300 808e 	bgt.w	8006a16 <_svfprintf_r+0xffe>
 80068fa:	3408      	adds	r4, #8
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	bfac      	ite	ge
 8006900:	1bbe      	subge	r6, r7, r6
 8006902:	463e      	movlt	r6, r7
 8006904:	2e00      	cmp	r6, #0
 8006906:	dd1c      	ble.n	8006942 <_svfprintf_r+0xf2a>
 8006908:	f8df 9344 	ldr.w	r9, [pc, #836]	@ 8006c50 <_svfprintf_r+0x1238>
 800690c:	f8c4 9000 	str.w	r9, [r4]
 8006910:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006914:	2e10      	cmp	r6, #16
 8006916:	f103 0301 	add.w	r3, r3, #1
 800691a:	f104 0108 	add.w	r1, r4, #8
 800691e:	f300 8084 	bgt.w	8006a2a <_svfprintf_r+0x1012>
 8006922:	6066      	str	r6, [r4, #4]
 8006924:	2b07      	cmp	r3, #7
 8006926:	4416      	add	r6, r2
 8006928:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 800692c:	f340 8090 	ble.w	8006a50 <_svfprintf_r+0x1038>
 8006930:	9906      	ldr	r1, [sp, #24]
 8006932:	9803      	ldr	r0, [sp, #12]
 8006934:	aa26      	add	r2, sp, #152	@ 0x98
 8006936:	f000 fa45 	bl	8006dc4 <__ssprint_r>
 800693a:	2800      	cmp	r0, #0
 800693c:	f040 81de 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006940:	ac29      	add	r4, sp, #164	@ 0xa4
 8006942:	056e      	lsls	r6, r5, #21
 8006944:	445f      	add	r7, fp
 8006946:	d50c      	bpl.n	8006962 <_svfprintf_r+0xf4a>
 8006948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694a:	2b00      	cmp	r3, #0
 800694c:	f300 8082 	bgt.w	8006a54 <_svfprintf_r+0x103c>
 8006950:	f1b8 0f00 	cmp.w	r8, #0
 8006954:	f300 8081 	bgt.w	8006a5a <_svfprintf_r+0x1042>
 8006958:	9b04      	ldr	r3, [sp, #16]
 800695a:	445b      	add	r3, fp
 800695c:	429f      	cmp	r7, r3
 800695e:	bf28      	it	cs
 8006960:	461f      	movcs	r7, r3
 8006962:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006964:	9a04      	ldr	r2, [sp, #16]
 8006966:	4293      	cmp	r3, r2
 8006968:	db01      	blt.n	800696e <_svfprintf_r+0xf56>
 800696a:	07e8      	lsls	r0, r5, #31
 800696c:	d50e      	bpl.n	800698c <_svfprintf_r+0xf74>
 800696e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006974:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 800697a:	4413      	add	r3, r2
 800697c:	9328      	str	r3, [sp, #160]	@ 0xa0
 800697e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006980:	3301      	adds	r3, #1
 8006982:	2b07      	cmp	r3, #7
 8006984:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006986:	f300 80e6 	bgt.w	8006b56 <_svfprintf_r+0x113e>
 800698a:	3408      	adds	r4, #8
 800698c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800698e:	9a04      	ldr	r2, [sp, #16]
 8006990:	eba2 0803 	sub.w	r8, r2, r3
 8006994:	eb0b 0302 	add.w	r3, fp, r2
 8006998:	1bdb      	subs	r3, r3, r7
 800699a:	4598      	cmp	r8, r3
 800699c:	bfa8      	it	ge
 800699e:	4698      	movge	r8, r3
 80069a0:	f1b8 0f00 	cmp.w	r8, #0
 80069a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80069a6:	dd0a      	ble.n	80069be <_svfprintf_r+0xfa6>
 80069a8:	4443      	add	r3, r8
 80069aa:	9328      	str	r3, [sp, #160]	@ 0xa0
 80069ac:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80069ae:	3301      	adds	r3, #1
 80069b0:	2b07      	cmp	r3, #7
 80069b2:	e9c4 7800 	strd	r7, r8, [r4]
 80069b6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80069b8:	f300 80d7 	bgt.w	8006b6a <_svfprintf_r+0x1152>
 80069bc:	3408      	adds	r4, #8
 80069be:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	f1b8 0f00 	cmp.w	r8, #0
 80069c6:	eba3 0606 	sub.w	r6, r3, r6
 80069ca:	bfa8      	it	ge
 80069cc:	eba6 0608 	subge.w	r6, r6, r8
 80069d0:	2e00      	cmp	r6, #0
 80069d2:	f77f ac07 	ble.w	80061e4 <_svfprintf_r+0x7cc>
 80069d6:	4f9e      	ldr	r7, [pc, #632]	@ (8006c50 <_svfprintf_r+0x1238>)
 80069d8:	f04f 0810 	mov.w	r8, #16
 80069dc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 80069e0:	2e10      	cmp	r6, #16
 80069e2:	f103 0301 	add.w	r3, r3, #1
 80069e6:	f104 0108 	add.w	r1, r4, #8
 80069ea:	6027      	str	r7, [r4, #0]
 80069ec:	f77f aebc 	ble.w	8006768 <_svfprintf_r+0xd50>
 80069f0:	3210      	adds	r2, #16
 80069f2:	2b07      	cmp	r3, #7
 80069f4:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 80069f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80069fc:	dd08      	ble.n	8006a10 <_svfprintf_r+0xff8>
 80069fe:	9906      	ldr	r1, [sp, #24]
 8006a00:	9803      	ldr	r0, [sp, #12]
 8006a02:	aa26      	add	r2, sp, #152	@ 0x98
 8006a04:	f000 f9de 	bl	8006dc4 <__ssprint_r>
 8006a08:	2800      	cmp	r0, #0
 8006a0a:	f040 8177 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006a0e:	a929      	add	r1, sp, #164	@ 0xa4
 8006a10:	3e10      	subs	r6, #16
 8006a12:	460c      	mov	r4, r1
 8006a14:	e7e2      	b.n	80069dc <_svfprintf_r+0xfc4>
 8006a16:	9906      	ldr	r1, [sp, #24]
 8006a18:	9803      	ldr	r0, [sp, #12]
 8006a1a:	aa26      	add	r2, sp, #152	@ 0x98
 8006a1c:	f000 f9d2 	bl	8006dc4 <__ssprint_r>
 8006a20:	2800      	cmp	r0, #0
 8006a22:	f040 816b 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006a26:	ac29      	add	r4, sp, #164	@ 0xa4
 8006a28:	e768      	b.n	80068fc <_svfprintf_r+0xee4>
 8006a2a:	2010      	movs	r0, #16
 8006a2c:	4402      	add	r2, r0
 8006a2e:	2b07      	cmp	r3, #7
 8006a30:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006a34:	6060      	str	r0, [r4, #4]
 8006a36:	dd08      	ble.n	8006a4a <_svfprintf_r+0x1032>
 8006a38:	9906      	ldr	r1, [sp, #24]
 8006a3a:	9803      	ldr	r0, [sp, #12]
 8006a3c:	aa26      	add	r2, sp, #152	@ 0x98
 8006a3e:	f000 f9c1 	bl	8006dc4 <__ssprint_r>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f040 815a 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006a48:	a929      	add	r1, sp, #164	@ 0xa4
 8006a4a:	3e10      	subs	r6, #16
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	e75d      	b.n	800690c <_svfprintf_r+0xef4>
 8006a50:	460c      	mov	r4, r1
 8006a52:	e776      	b.n	8006942 <_svfprintf_r+0xf2a>
 8006a54:	f1b8 0f00 	cmp.w	r8, #0
 8006a58:	dd4d      	ble.n	8006af6 <_svfprintf_r+0x10de>
 8006a5a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a60:	6023      	str	r3, [r4, #0]
 8006a62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a64:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a66:	6063      	str	r3, [r4, #4]
 8006a68:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006a6a:	4413      	add	r3, r2
 8006a6c:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006a6e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006a70:	3301      	adds	r3, #1
 8006a72:	2b07      	cmp	r3, #7
 8006a74:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006a76:	dc45      	bgt.n	8006b04 <_svfprintf_r+0x10ec>
 8006a78:	3408      	adds	r4, #8
 8006a7a:	9b04      	ldr	r3, [sp, #16]
 8006a7c:	eb0b 0903 	add.w	r9, fp, r3
 8006a80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	eba9 0907 	sub.w	r9, r9, r7
 8006a88:	4599      	cmp	r9, r3
 8006a8a:	bfa8      	it	ge
 8006a8c:	4699      	movge	r9, r3
 8006a8e:	f1b9 0f00 	cmp.w	r9, #0
 8006a92:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006a94:	dd09      	ble.n	8006aaa <_svfprintf_r+0x1092>
 8006a96:	444b      	add	r3, r9
 8006a98:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006a9a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	2b07      	cmp	r3, #7
 8006aa0:	e9c4 7900 	strd	r7, r9, [r4]
 8006aa4:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006aa6:	dc37      	bgt.n	8006b18 <_svfprintf_r+0x1100>
 8006aa8:	3408      	adds	r4, #8
 8006aaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006aac:	781e      	ldrb	r6, [r3, #0]
 8006aae:	f1b9 0f00 	cmp.w	r9, #0
 8006ab2:	bfa8      	it	ge
 8006ab4:	eba6 0609 	subge.w	r6, r6, r9
 8006ab8:	2e00      	cmp	r6, #0
 8006aba:	dd18      	ble.n	8006aee <_svfprintf_r+0x10d6>
 8006abc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006ac0:	4863      	ldr	r0, [pc, #396]	@ (8006c50 <_svfprintf_r+0x1238>)
 8006ac2:	6020      	str	r0, [r4, #0]
 8006ac4:	2e10      	cmp	r6, #16
 8006ac6:	f103 0301 	add.w	r3, r3, #1
 8006aca:	f104 0108 	add.w	r1, r4, #8
 8006ace:	dc2d      	bgt.n	8006b2c <_svfprintf_r+0x1114>
 8006ad0:	6066      	str	r6, [r4, #4]
 8006ad2:	2b07      	cmp	r3, #7
 8006ad4:	4416      	add	r6, r2
 8006ad6:	e9cd 3627 	strd	r3, r6, [sp, #156]	@ 0x9c
 8006ada:	dd3a      	ble.n	8006b52 <_svfprintf_r+0x113a>
 8006adc:	9906      	ldr	r1, [sp, #24]
 8006ade:	9803      	ldr	r0, [sp, #12]
 8006ae0:	aa26      	add	r2, sp, #152	@ 0x98
 8006ae2:	f000 f96f 	bl	8006dc4 <__ssprint_r>
 8006ae6:	2800      	cmp	r0, #0
 8006ae8:	f040 8108 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006aec:	ac29      	add	r4, sp, #164	@ 0xa4
 8006aee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	441f      	add	r7, r3
 8006af4:	e728      	b.n	8006948 <_svfprintf_r+0xf30>
 8006af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006af8:	3b01      	subs	r3, #1
 8006afa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006afc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006afe:	3b01      	subs	r3, #1
 8006b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b02:	e7ac      	b.n	8006a5e <_svfprintf_r+0x1046>
 8006b04:	9906      	ldr	r1, [sp, #24]
 8006b06:	9803      	ldr	r0, [sp, #12]
 8006b08:	aa26      	add	r2, sp, #152	@ 0x98
 8006b0a:	f000 f95b 	bl	8006dc4 <__ssprint_r>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	f040 80f4 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006b14:	ac29      	add	r4, sp, #164	@ 0xa4
 8006b16:	e7b0      	b.n	8006a7a <_svfprintf_r+0x1062>
 8006b18:	9906      	ldr	r1, [sp, #24]
 8006b1a:	9803      	ldr	r0, [sp, #12]
 8006b1c:	aa26      	add	r2, sp, #152	@ 0x98
 8006b1e:	f000 f951 	bl	8006dc4 <__ssprint_r>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f040 80ea 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006b28:	ac29      	add	r4, sp, #164	@ 0xa4
 8006b2a:	e7be      	b.n	8006aaa <_svfprintf_r+0x1092>
 8006b2c:	2010      	movs	r0, #16
 8006b2e:	4402      	add	r2, r0
 8006b30:	2b07      	cmp	r3, #7
 8006b32:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006b36:	6060      	str	r0, [r4, #4]
 8006b38:	dd08      	ble.n	8006b4c <_svfprintf_r+0x1134>
 8006b3a:	9906      	ldr	r1, [sp, #24]
 8006b3c:	9803      	ldr	r0, [sp, #12]
 8006b3e:	aa26      	add	r2, sp, #152	@ 0x98
 8006b40:	f000 f940 	bl	8006dc4 <__ssprint_r>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f040 80d9 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006b4a:	a929      	add	r1, sp, #164	@ 0xa4
 8006b4c:	3e10      	subs	r6, #16
 8006b4e:	460c      	mov	r4, r1
 8006b50:	e7b4      	b.n	8006abc <_svfprintf_r+0x10a4>
 8006b52:	460c      	mov	r4, r1
 8006b54:	e7cb      	b.n	8006aee <_svfprintf_r+0x10d6>
 8006b56:	9906      	ldr	r1, [sp, #24]
 8006b58:	9803      	ldr	r0, [sp, #12]
 8006b5a:	aa26      	add	r2, sp, #152	@ 0x98
 8006b5c:	f000 f932 	bl	8006dc4 <__ssprint_r>
 8006b60:	2800      	cmp	r0, #0
 8006b62:	f040 80cb 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006b66:	ac29      	add	r4, sp, #164	@ 0xa4
 8006b68:	e710      	b.n	800698c <_svfprintf_r+0xf74>
 8006b6a:	9906      	ldr	r1, [sp, #24]
 8006b6c:	9803      	ldr	r0, [sp, #12]
 8006b6e:	aa26      	add	r2, sp, #152	@ 0x98
 8006b70:	f000 f928 	bl	8006dc4 <__ssprint_r>
 8006b74:	2800      	cmp	r0, #0
 8006b76:	f040 80c1 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006b7a:	ac29      	add	r4, sp, #164	@ 0xa4
 8006b7c:	e71f      	b.n	80069be <_svfprintf_r+0xfa6>
 8006b7e:	9904      	ldr	r1, [sp, #16]
 8006b80:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8006b82:	2901      	cmp	r1, #1
 8006b84:	f109 0301 	add.w	r3, r9, #1
 8006b88:	f102 0201 	add.w	r2, r2, #1
 8006b8c:	f104 0608 	add.w	r6, r4, #8
 8006b90:	dc02      	bgt.n	8006b98 <_svfprintf_r+0x1180>
 8006b92:	07e9      	lsls	r1, r5, #31
 8006b94:	f140 8086 	bpl.w	8006ca4 <_svfprintf_r+0x128c>
 8006b98:	2101      	movs	r1, #1
 8006b9a:	2a07      	cmp	r2, #7
 8006b9c:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006ba0:	f8c4 b000 	str.w	fp, [r4]
 8006ba4:	6061      	str	r1, [r4, #4]
 8006ba6:	dd08      	ble.n	8006bba <_svfprintf_r+0x11a2>
 8006ba8:	9906      	ldr	r1, [sp, #24]
 8006baa:	9803      	ldr	r0, [sp, #12]
 8006bac:	aa26      	add	r2, sp, #152	@ 0x98
 8006bae:	f000 f909 	bl	8006dc4 <__ssprint_r>
 8006bb2:	2800      	cmp	r0, #0
 8006bb4:	f040 80a2 	bne.w	8006cfc <_svfprintf_r+0x12e4>
 8006bb8:	ae29      	add	r6, sp, #164	@ 0xa4
 8006bba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bc2:	6073      	str	r3, [r6, #4]
 8006bc4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006bc6:	4413      	add	r3, r2
 8006bc8:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006bca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006bcc:	3301      	adds	r3, #1
 8006bce:	2b07      	cmp	r3, #7
 8006bd0:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006bd2:	dc33      	bgt.n	8006c3c <_svfprintf_r+0x1224>
 8006bd4:	3608      	adds	r6, #8
 8006bd6:	9b04      	ldr	r3, [sp, #16]
 8006bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bdc:	1e5c      	subs	r4, r3, #1
 8006bde:	2200      	movs	r2, #0
 8006be0:	2300      	movs	r3, #0
 8006be2:	e9dd 8727 	ldrd	r8, r7, [sp, #156]	@ 0x9c
 8006be6:	f7f9 ff6f 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d132      	bne.n	8006c54 <_svfprintf_r+0x123c>
 8006bee:	f10b 0201 	add.w	r2, fp, #1
 8006bf2:	e9c6 2400 	strd	r2, r4, [r6]
 8006bf6:	9a04      	ldr	r2, [sp, #16]
 8006bf8:	f108 0301 	add.w	r3, r8, #1
 8006bfc:	3f01      	subs	r7, #1
 8006bfe:	4417      	add	r7, r2
 8006c00:	2b07      	cmp	r3, #7
 8006c02:	e9cd 3727 	strd	r3, r7, [sp, #156]	@ 0x9c
 8006c06:	dd56      	ble.n	8006cb6 <_svfprintf_r+0x129e>
 8006c08:	9906      	ldr	r1, [sp, #24]
 8006c0a:	9803      	ldr	r0, [sp, #12]
 8006c0c:	aa26      	add	r2, sp, #152	@ 0x98
 8006c0e:	f000 f8d9 	bl	8006dc4 <__ssprint_r>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	d172      	bne.n	8006cfc <_svfprintf_r+0x12e4>
 8006c16:	ae29      	add	r6, sp, #164	@ 0xa4
 8006c18:	ab22      	add	r3, sp, #136	@ 0x88
 8006c1a:	6033      	str	r3, [r6, #0]
 8006c1c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006c20:	6073      	str	r3, [r6, #4]
 8006c22:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006c24:	4413      	add	r3, r2
 8006c26:	9328      	str	r3, [sp, #160]	@ 0xa0
 8006c28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	2b07      	cmp	r3, #7
 8006c2e:	9327      	str	r3, [sp, #156]	@ 0x9c
 8006c30:	f73f ada1 	bgt.w	8006776 <_svfprintf_r+0xd5e>
 8006c34:	f106 0408 	add.w	r4, r6, #8
 8006c38:	f7ff bad4 	b.w	80061e4 <_svfprintf_r+0x7cc>
 8006c3c:	9906      	ldr	r1, [sp, #24]
 8006c3e:	9803      	ldr	r0, [sp, #12]
 8006c40:	aa26      	add	r2, sp, #152	@ 0x98
 8006c42:	f000 f8bf 	bl	8006dc4 <__ssprint_r>
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d158      	bne.n	8006cfc <_svfprintf_r+0x12e4>
 8006c4a:	ae29      	add	r6, sp, #164	@ 0xa4
 8006c4c:	e7c3      	b.n	8006bd6 <_svfprintf_r+0x11be>
 8006c4e:	bf00      	nop
 8006c50:	08009a3d 	.word	0x08009a3d
 8006c54:	9b04      	ldr	r3, [sp, #16]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	ddde      	ble.n	8006c18 <_svfprintf_r+0x1200>
 8006c5a:	4f58      	ldr	r7, [pc, #352]	@ (8006dbc <_svfprintf_r+0x13a4>)
 8006c5c:	f04f 0810 	mov.w	r8, #16
 8006c60:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006c64:	2c10      	cmp	r4, #16
 8006c66:	f103 0301 	add.w	r3, r3, #1
 8006c6a:	f106 0108 	add.w	r1, r6, #8
 8006c6e:	6037      	str	r7, [r6, #0]
 8006c70:	dc07      	bgt.n	8006c82 <_svfprintf_r+0x126a>
 8006c72:	6074      	str	r4, [r6, #4]
 8006c74:	2b07      	cmp	r3, #7
 8006c76:	4414      	add	r4, r2
 8006c78:	e9cd 3427 	strd	r3, r4, [sp, #156]	@ 0x9c
 8006c7c:	dcc4      	bgt.n	8006c08 <_svfprintf_r+0x11f0>
 8006c7e:	460e      	mov	r6, r1
 8006c80:	e7ca      	b.n	8006c18 <_svfprintf_r+0x1200>
 8006c82:	3210      	adds	r2, #16
 8006c84:	2b07      	cmp	r3, #7
 8006c86:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006c8a:	f8c6 8004 	str.w	r8, [r6, #4]
 8006c8e:	dd06      	ble.n	8006c9e <_svfprintf_r+0x1286>
 8006c90:	9906      	ldr	r1, [sp, #24]
 8006c92:	9803      	ldr	r0, [sp, #12]
 8006c94:	aa26      	add	r2, sp, #152	@ 0x98
 8006c96:	f000 f895 	bl	8006dc4 <__ssprint_r>
 8006c9a:	bb78      	cbnz	r0, 8006cfc <_svfprintf_r+0x12e4>
 8006c9c:	a929      	add	r1, sp, #164	@ 0xa4
 8006c9e:	3c10      	subs	r4, #16
 8006ca0:	460e      	mov	r6, r1
 8006ca2:	e7dd      	b.n	8006c60 <_svfprintf_r+0x1248>
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	2a07      	cmp	r2, #7
 8006ca8:	e9cd 2327 	strd	r2, r3, [sp, #156]	@ 0x9c
 8006cac:	f8c4 b000 	str.w	fp, [r4]
 8006cb0:	6061      	str	r1, [r4, #4]
 8006cb2:	ddb1      	ble.n	8006c18 <_svfprintf_r+0x1200>
 8006cb4:	e7a8      	b.n	8006c08 <_svfprintf_r+0x11f0>
 8006cb6:	3608      	adds	r6, #8
 8006cb8:	e7ae      	b.n	8006c18 <_svfprintf_r+0x1200>
 8006cba:	460c      	mov	r4, r1
 8006cbc:	f7ff ba92 	b.w	80061e4 <_svfprintf_r+0x7cc>
 8006cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006cc2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006cc4:	1a9d      	subs	r5, r3, r2
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	f77f aa8f 	ble.w	80061ea <_svfprintf_r+0x7d2>
 8006ccc:	4e3c      	ldr	r6, [pc, #240]	@ (8006dc0 <_svfprintf_r+0x13a8>)
 8006cce:	2710      	movs	r7, #16
 8006cd0:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	@ 0x9c
 8006cd4:	2d10      	cmp	r5, #16
 8006cd6:	f103 0301 	add.w	r3, r3, #1
 8006cda:	6026      	str	r6, [r4, #0]
 8006cdc:	dc18      	bgt.n	8006d10 <_svfprintf_r+0x12f8>
 8006cde:	6065      	str	r5, [r4, #4]
 8006ce0:	2b07      	cmp	r3, #7
 8006ce2:	4415      	add	r5, r2
 8006ce4:	e9cd 3527 	strd	r3, r5, [sp, #156]	@ 0x9c
 8006ce8:	f77f aa7f 	ble.w	80061ea <_svfprintf_r+0x7d2>
 8006cec:	9906      	ldr	r1, [sp, #24]
 8006cee:	9803      	ldr	r0, [sp, #12]
 8006cf0:	aa26      	add	r2, sp, #152	@ 0x98
 8006cf2:	f000 f867 	bl	8006dc4 <__ssprint_r>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f aa77 	beq.w	80061ea <_svfprintf_r+0x7d2>
 8006cfc:	f1ba 0f00 	cmp.w	sl, #0
 8006d00:	f43f a8a0 	beq.w	8005e44 <_svfprintf_r+0x42c>
 8006d04:	9803      	ldr	r0, [sp, #12]
 8006d06:	4651      	mov	r1, sl
 8006d08:	f7fe fb7e 	bl	8005408 <_free_r>
 8006d0c:	f7ff b89a 	b.w	8005e44 <_svfprintf_r+0x42c>
 8006d10:	3210      	adds	r2, #16
 8006d12:	2b07      	cmp	r3, #7
 8006d14:	e9cd 3227 	strd	r3, r2, [sp, #156]	@ 0x9c
 8006d18:	6067      	str	r7, [r4, #4]
 8006d1a:	dc02      	bgt.n	8006d22 <_svfprintf_r+0x130a>
 8006d1c:	3408      	adds	r4, #8
 8006d1e:	3d10      	subs	r5, #16
 8006d20:	e7d6      	b.n	8006cd0 <_svfprintf_r+0x12b8>
 8006d22:	9906      	ldr	r1, [sp, #24]
 8006d24:	9803      	ldr	r0, [sp, #12]
 8006d26:	aa26      	add	r2, sp, #152	@ 0x98
 8006d28:	f000 f84c 	bl	8006dc4 <__ssprint_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d1e5      	bne.n	8006cfc <_svfprintf_r+0x12e4>
 8006d30:	ac29      	add	r4, sp, #164	@ 0xa4
 8006d32:	e7f4      	b.n	8006d1e <_svfprintf_r+0x1306>
 8006d34:	9803      	ldr	r0, [sp, #12]
 8006d36:	4651      	mov	r1, sl
 8006d38:	f7fe fb66 	bl	8005408 <_free_r>
 8006d3c:	f7ff ba6d 	b.w	800621a <_svfprintf_r+0x802>
 8006d40:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f43f a87e 	beq.w	8005e44 <_svfprintf_r+0x42c>
 8006d48:	9906      	ldr	r1, [sp, #24]
 8006d4a:	9803      	ldr	r0, [sp, #12]
 8006d4c:	aa26      	add	r2, sp, #152	@ 0x98
 8006d4e:	f000 f839 	bl	8006dc4 <__ssprint_r>
 8006d52:	f7ff b877 	b.w	8005e44 <_svfprintf_r+0x42c>
 8006d56:	ea57 0208 	orrs.w	r2, r7, r8
 8006d5a:	9509      	str	r5, [sp, #36]	@ 0x24
 8006d5c:	f43f ab78 	beq.w	8006450 <_svfprintf_r+0xa38>
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	f43f abf9 	beq.w	8006558 <_svfprintf_r+0xb40>
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	f50d 7ba4 	add.w	fp, sp, #328	@ 0x148
 8006d6c:	f43f ac3f 	beq.w	80065ee <_svfprintf_r+0xbd6>
 8006d70:	f007 0307 	and.w	r3, r7, #7
 8006d74:	08ff      	lsrs	r7, r7, #3
 8006d76:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 8006d7a:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8006d7e:	3330      	adds	r3, #48	@ 0x30
 8006d80:	ea57 0108 	orrs.w	r1, r7, r8
 8006d84:	465a      	mov	r2, fp
 8006d86:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006d8a:	d1f1      	bne.n	8006d70 <_svfprintf_r+0x1358>
 8006d8c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d8e:	07c9      	lsls	r1, r1, #31
 8006d90:	d506      	bpl.n	8006da0 <_svfprintf_r+0x1388>
 8006d92:	2b30      	cmp	r3, #48	@ 0x30
 8006d94:	d004      	beq.n	8006da0 <_svfprintf_r+0x1388>
 8006d96:	2330      	movs	r3, #48	@ 0x30
 8006d98:	f80b 3c01 	strb.w	r3, [fp, #-1]
 8006d9c:	f1a2 0b02 	sub.w	fp, r2, #2
 8006da0:	ab52      	add	r3, sp, #328	@ 0x148
 8006da2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006da4:	46b1      	mov	r9, r6
 8006da6:	f04f 0a00 	mov.w	sl, #0
 8006daa:	eba3 060b 	sub.w	r6, r3, fp
 8006dae:	46d0      	mov	r8, sl
 8006db0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8006db4:	4657      	mov	r7, sl
 8006db6:	f7ff b966 	b.w	8006086 <_svfprintf_r+0x66e>
 8006dba:	bf00      	nop
 8006dbc:	08009a3d 	.word	0x08009a3d
 8006dc0:	08009a4d 	.word	0x08009a4d

08006dc4 <__ssprint_r>:
 8006dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc8:	6815      	ldr	r5, [r2, #0]
 8006dca:	4606      	mov	r6, r0
 8006dcc:	460f      	mov	r7, r1
 8006dce:	4614      	mov	r4, r2
 8006dd0:	68a3      	ldr	r3, [r4, #8]
 8006dd2:	3508      	adds	r5, #8
 8006dd4:	b92b      	cbnz	r3, 8006de2 <__ssprint_r+0x1e>
 8006dd6:	2000      	movs	r0, #0
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8006dde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	1e5a      	subs	r2, r3, #1
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	6062      	str	r2, [r4, #4]
 8006dea:	ddf4      	ble.n	8006dd6 <__ssprint_r+0x12>
 8006dec:	f855 8c04 	ldr.w	r8, [r5, #-4]
 8006df0:	f1b8 0f00 	cmp.w	r8, #0
 8006df4:	d0ec      	beq.n	8006dd0 <__ssprint_r+0xc>
 8006df6:	4643      	mov	r3, r8
 8006df8:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f001 fb30 	bl	8008464 <__ssputs_r>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d0e7      	beq.n	8006dd8 <__ssprint_r+0x14>
 8006e08:	68a2      	ldr	r2, [r4, #8]
 8006e0a:	eba2 0208 	sub.w	r2, r2, r8
 8006e0e:	60a2      	str	r2, [r4, #8]
 8006e10:	e7de      	b.n	8006dd0 <__ssprint_r+0xc>

08006e12 <_fclose_r>:
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	4605      	mov	r5, r0
 8006e16:	460c      	mov	r4, r1
 8006e18:	b1b9      	cbz	r1, 8006e4a <_fclose_r+0x38>
 8006e1a:	b118      	cbz	r0, 8006e24 <_fclose_r+0x12>
 8006e1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006e1e:	b90b      	cbnz	r3, 8006e24 <_fclose_r+0x12>
 8006e20:	f7fe f974 	bl	800510c <__sinit>
 8006e24:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2a:	07d6      	lsls	r6, r2, #31
 8006e2c:	d404      	bmi.n	8006e38 <_fclose_r+0x26>
 8006e2e:	0598      	lsls	r0, r3, #22
 8006e30:	d40e      	bmi.n	8006e50 <_fclose_r+0x3e>
 8006e32:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e34:	f7fe fa80 	bl	8005338 <__retarget_lock_acquire_recursive>
 8006e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3c:	b943      	cbnz	r3, 8006e50 <_fclose_r+0x3e>
 8006e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e40:	07d9      	lsls	r1, r3, #31
 8006e42:	d402      	bmi.n	8006e4a <_fclose_r+0x38>
 8006e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e46:	f7fe fa78 	bl	800533a <__retarget_lock_release_recursive>
 8006e4a:	2600      	movs	r6, #0
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f000 f834 	bl	8006ec0 <__sflush_r>
 8006e58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006e5a:	4606      	mov	r6, r0
 8006e5c:	b133      	cbz	r3, 8006e6c <_fclose_r+0x5a>
 8006e5e:	69e1      	ldr	r1, [r4, #28]
 8006e60:	4628      	mov	r0, r5
 8006e62:	4798      	blx	r3
 8006e64:	2800      	cmp	r0, #0
 8006e66:	bfb8      	it	lt
 8006e68:	f04f 36ff 	movlt.w	r6, #4294967295
 8006e6c:	89a3      	ldrh	r3, [r4, #12]
 8006e6e:	061a      	lsls	r2, r3, #24
 8006e70:	d503      	bpl.n	8006e7a <_fclose_r+0x68>
 8006e72:	6921      	ldr	r1, [r4, #16]
 8006e74:	4628      	mov	r0, r5
 8006e76:	f7fe fac7 	bl	8005408 <_free_r>
 8006e7a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e7c:	b141      	cbz	r1, 8006e90 <_fclose_r+0x7e>
 8006e7e:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8006e82:	4299      	cmp	r1, r3
 8006e84:	d002      	beq.n	8006e8c <_fclose_r+0x7a>
 8006e86:	4628      	mov	r0, r5
 8006e88:	f7fe fabe 	bl	8005408 <_free_r>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006e92:	b121      	cbz	r1, 8006e9e <_fclose_r+0x8c>
 8006e94:	4628      	mov	r0, r5
 8006e96:	f7fe fab7 	bl	8005408 <_free_r>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	6463      	str	r3, [r4, #68]	@ 0x44
 8006e9e:	f7fe f929 	bl	80050f4 <__sfp_lock_acquire>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ea8:	07db      	lsls	r3, r3, #31
 8006eaa:	d402      	bmi.n	8006eb2 <_fclose_r+0xa0>
 8006eac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eae:	f7fe fa44 	bl	800533a <__retarget_lock_release_recursive>
 8006eb2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006eb4:	f7fe fa3f 	bl	8005336 <__retarget_lock_close_recursive>
 8006eb8:	f7fe f922 	bl	8005100 <__sfp_lock_release>
 8006ebc:	e7c6      	b.n	8006e4c <_fclose_r+0x3a>
	...

08006ec0 <__sflush_r>:
 8006ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec4:	4605      	mov	r5, r0
 8006ec6:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8006eca:	0706      	lsls	r6, r0, #28
 8006ecc:	460c      	mov	r4, r1
 8006ece:	d457      	bmi.n	8006f80 <__sflush_r+0xc0>
 8006ed0:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8006ed4:	818b      	strh	r3, [r1, #12]
 8006ed6:	684b      	ldr	r3, [r1, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dc02      	bgt.n	8006ee2 <__sflush_r+0x22>
 8006edc:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd4c      	ble.n	8006f7c <__sflush_r+0xbc>
 8006ee2:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ee4:	2e00      	cmp	r6, #0
 8006ee6:	d049      	beq.n	8006f7c <__sflush_r+0xbc>
 8006ee8:	2300      	movs	r3, #0
 8006eea:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8006eee:	682f      	ldr	r7, [r5, #0]
 8006ef0:	69e1      	ldr	r1, [r4, #28]
 8006ef2:	602b      	str	r3, [r5, #0]
 8006ef4:	d034      	beq.n	8006f60 <__sflush_r+0xa0>
 8006ef6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	0759      	lsls	r1, r3, #29
 8006efc:	d505      	bpl.n	8006f0a <__sflush_r+0x4a>
 8006efe:	6863      	ldr	r3, [r4, #4]
 8006f00:	1ad2      	subs	r2, r2, r3
 8006f02:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006f04:	b10b      	cbz	r3, 8006f0a <__sflush_r+0x4a>
 8006f06:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f0e:	69e1      	ldr	r1, [r4, #28]
 8006f10:	4628      	mov	r0, r5
 8006f12:	47b0      	blx	r6
 8006f14:	1c43      	adds	r3, r0, #1
 8006f16:	d106      	bne.n	8006f26 <__sflush_r+0x66>
 8006f18:	682a      	ldr	r2, [r5, #0]
 8006f1a:	2a1d      	cmp	r2, #29
 8006f1c:	d848      	bhi.n	8006fb0 <__sflush_r+0xf0>
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8006fcc <__sflush_r+0x10c>)
 8006f20:	40d3      	lsrs	r3, r2
 8006f22:	07de      	lsls	r6, r3, #31
 8006f24:	d544      	bpl.n	8006fb0 <__sflush_r+0xf0>
 8006f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f2a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006f2e:	81a2      	strh	r2, [r4, #12]
 8006f30:	2200      	movs	r2, #0
 8006f32:	6062      	str	r2, [r4, #4]
 8006f34:	04d9      	lsls	r1, r3, #19
 8006f36:	6922      	ldr	r2, [r4, #16]
 8006f38:	6022      	str	r2, [r4, #0]
 8006f3a:	d504      	bpl.n	8006f46 <__sflush_r+0x86>
 8006f3c:	1c42      	adds	r2, r0, #1
 8006f3e:	d101      	bne.n	8006f44 <__sflush_r+0x84>
 8006f40:	682b      	ldr	r3, [r5, #0]
 8006f42:	b903      	cbnz	r3, 8006f46 <__sflush_r+0x86>
 8006f44:	6520      	str	r0, [r4, #80]	@ 0x50
 8006f46:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f48:	602f      	str	r7, [r5, #0]
 8006f4a:	b1b9      	cbz	r1, 8006f7c <__sflush_r+0xbc>
 8006f4c:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8006f50:	4299      	cmp	r1, r3
 8006f52:	d002      	beq.n	8006f5a <__sflush_r+0x9a>
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7fe fa57 	bl	8005408 <_free_r>
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f5e:	e00d      	b.n	8006f7c <__sflush_r+0xbc>
 8006f60:	2301      	movs	r3, #1
 8006f62:	4628      	mov	r0, r5
 8006f64:	47b0      	blx	r6
 8006f66:	4602      	mov	r2, r0
 8006f68:	1c50      	adds	r0, r2, #1
 8006f6a:	d1c5      	bne.n	8006ef8 <__sflush_r+0x38>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0c2      	beq.n	8006ef8 <__sflush_r+0x38>
 8006f72:	2b1d      	cmp	r3, #29
 8006f74:	d001      	beq.n	8006f7a <__sflush_r+0xba>
 8006f76:	2b16      	cmp	r3, #22
 8006f78:	d11a      	bne.n	8006fb0 <__sflush_r+0xf0>
 8006f7a:	602f      	str	r7, [r5, #0]
 8006f7c:	2000      	movs	r0, #0
 8006f7e:	e01e      	b.n	8006fbe <__sflush_r+0xfe>
 8006f80:	690f      	ldr	r7, [r1, #16]
 8006f82:	2f00      	cmp	r7, #0
 8006f84:	d0fa      	beq.n	8006f7c <__sflush_r+0xbc>
 8006f86:	0783      	lsls	r3, r0, #30
 8006f88:	680e      	ldr	r6, [r1, #0]
 8006f8a:	bf08      	it	eq
 8006f8c:	694b      	ldreq	r3, [r1, #20]
 8006f8e:	600f      	str	r7, [r1, #0]
 8006f90:	bf18      	it	ne
 8006f92:	2300      	movne	r3, #0
 8006f94:	eba6 0807 	sub.w	r8, r6, r7
 8006f98:	608b      	str	r3, [r1, #8]
 8006f9a:	f1b8 0f00 	cmp.w	r8, #0
 8006f9e:	dded      	ble.n	8006f7c <__sflush_r+0xbc>
 8006fa0:	69e1      	ldr	r1, [r4, #28]
 8006fa2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8006fa4:	4643      	mov	r3, r8
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4628      	mov	r0, r5
 8006faa:	47b0      	blx	r6
 8006fac:	2800      	cmp	r0, #0
 8006fae:	dc08      	bgt.n	8006fc2 <__sflush_r+0x102>
 8006fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	f04f 30ff 	mov.w	r0, #4294967295
 8006fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fc2:	4407      	add	r7, r0
 8006fc4:	eba8 0800 	sub.w	r8, r8, r0
 8006fc8:	e7e7      	b.n	8006f9a <__sflush_r+0xda>
 8006fca:	bf00      	nop
 8006fcc:	20400001 	.word	0x20400001

08006fd0 <_fflush_r>:
 8006fd0:	b538      	push	{r3, r4, r5, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	4605      	mov	r5, r0
 8006fd6:	b118      	cbz	r0, 8006fe0 <_fflush_r+0x10>
 8006fd8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006fda:	b90b      	cbnz	r3, 8006fe0 <_fflush_r+0x10>
 8006fdc:	f7fe f896 	bl	800510c <__sinit>
 8006fe0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8006fe4:	b1b8      	cbz	r0, 8007016 <_fflush_r+0x46>
 8006fe6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006fe8:	07db      	lsls	r3, r3, #31
 8006fea:	d404      	bmi.n	8006ff6 <_fflush_r+0x26>
 8006fec:	0581      	lsls	r1, r0, #22
 8006fee:	d402      	bmi.n	8006ff6 <_fflush_r+0x26>
 8006ff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ff2:	f7fe f9a1 	bl	8005338 <__retarget_lock_acquire_recursive>
 8006ff6:	4628      	mov	r0, r5
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f7ff ff61 	bl	8006ec0 <__sflush_r>
 8006ffe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007000:	07da      	lsls	r2, r3, #31
 8007002:	4605      	mov	r5, r0
 8007004:	d405      	bmi.n	8007012 <_fflush_r+0x42>
 8007006:	89a3      	ldrh	r3, [r4, #12]
 8007008:	059b      	lsls	r3, r3, #22
 800700a:	d402      	bmi.n	8007012 <_fflush_r+0x42>
 800700c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800700e:	f7fe f994 	bl	800533a <__retarget_lock_release_recursive>
 8007012:	4628      	mov	r0, r5
 8007014:	bd38      	pop	{r3, r4, r5, pc}
 8007016:	4605      	mov	r5, r0
 8007018:	e7fb      	b.n	8007012 <_fflush_r+0x42>

0800701a <strncpy>:
 800701a:	b510      	push	{r4, lr}
 800701c:	3901      	subs	r1, #1
 800701e:	4603      	mov	r3, r0
 8007020:	b132      	cbz	r2, 8007030 <strncpy+0x16>
 8007022:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007026:	f803 4b01 	strb.w	r4, [r3], #1
 800702a:	3a01      	subs	r2, #1
 800702c:	2c00      	cmp	r4, #0
 800702e:	d1f7      	bne.n	8007020 <strncpy+0x6>
 8007030:	441a      	add	r2, r3
 8007032:	2100      	movs	r1, #0
 8007034:	4293      	cmp	r3, r2
 8007036:	d100      	bne.n	800703a <strncpy+0x20>
 8007038:	bd10      	pop	{r4, pc}
 800703a:	f803 1b01 	strb.w	r1, [r3], #1
 800703e:	e7f9      	b.n	8007034 <strncpy+0x1a>

08007040 <_localeconv_r>:
 8007040:	4800      	ldr	r0, [pc, #0]	@ (8007044 <_localeconv_r+0x4>)
 8007042:	4770      	bx	lr
 8007044:	20000664 	.word	0x20000664

08007048 <_sbrk_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4d06      	ldr	r5, [pc, #24]	@ (8007064 <_sbrk_r+0x1c>)
 800704c:	2300      	movs	r3, #0
 800704e:	4604      	mov	r4, r0
 8007050:	4608      	mov	r0, r1
 8007052:	602b      	str	r3, [r5, #0]
 8007054:	f7fa fd60 	bl	8001b18 <_sbrk>
 8007058:	1c43      	adds	r3, r0, #1
 800705a:	d102      	bne.n	8007062 <_sbrk_r+0x1a>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	b103      	cbz	r3, 8007062 <_sbrk_r+0x1a>
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	bd38      	pop	{r3, r4, r5, pc}
 8007064:	2000092c 	.word	0x2000092c

08007068 <__libc_fini_array>:
 8007068:	b538      	push	{r3, r4, r5, lr}
 800706a:	4d07      	ldr	r5, [pc, #28]	@ (8007088 <__libc_fini_array+0x20>)
 800706c:	4c07      	ldr	r4, [pc, #28]	@ (800708c <__libc_fini_array+0x24>)
 800706e:	1b64      	subs	r4, r4, r5
 8007070:	10a4      	asrs	r4, r4, #2
 8007072:	b91c      	cbnz	r4, 800707c <__libc_fini_array+0x14>
 8007074:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007078:	f002 bbf6 	b.w	8009868 <_fini>
 800707c:	3c01      	subs	r4, #1
 800707e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007082:	4798      	blx	r3
 8007084:	e7f5      	b.n	8007072 <__libc_fini_array+0xa>
 8007086:	bf00      	nop
 8007088:	08009c94 	.word	0x08009c94
 800708c:	08009c98 	.word	0x08009c98

08007090 <sysconf>:
 8007090:	2808      	cmp	r0, #8
 8007092:	b508      	push	{r3, lr}
 8007094:	d006      	beq.n	80070a4 <sysconf+0x14>
 8007096:	f7fe f923 	bl	80052e0 <__errno>
 800709a:	2316      	movs	r3, #22
 800709c:	6003      	str	r3, [r0, #0]
 800709e:	f04f 30ff 	mov.w	r0, #4294967295
 80070a2:	bd08      	pop	{r3, pc}
 80070a4:	2080      	movs	r0, #128	@ 0x80
 80070a6:	e7fc      	b.n	80070a2 <sysconf+0x12>

080070a8 <frexp>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	2100      	movs	r1, #0
 80070ac:	ec55 4b10 	vmov	r4, r5, d0
 80070b0:	6001      	str	r1, [r0, #0]
 80070b2:	4914      	ldr	r1, [pc, #80]	@ (8007104 <frexp+0x5c>)
 80070b4:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80070b8:	428b      	cmp	r3, r1
 80070ba:	4606      	mov	r6, r0
 80070bc:	462a      	mov	r2, r5
 80070be:	d81e      	bhi.n	80070fe <frexp+0x56>
 80070c0:	4621      	mov	r1, r4
 80070c2:	4319      	orrs	r1, r3
 80070c4:	d01b      	beq.n	80070fe <frexp+0x56>
 80070c6:	4910      	ldr	r1, [pc, #64]	@ (8007108 <frexp+0x60>)
 80070c8:	4029      	ands	r1, r5
 80070ca:	b961      	cbnz	r1, 80070e6 <frexp+0x3e>
 80070cc:	4b0f      	ldr	r3, [pc, #60]	@ (800710c <frexp+0x64>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 fa90 	bl	80005f8 <__aeabi_dmul>
 80070d8:	460a      	mov	r2, r1
 80070da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80070de:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 80070e2:	4604      	mov	r4, r0
 80070e4:	6031      	str	r1, [r6, #0]
 80070e6:	6831      	ldr	r1, [r6, #0]
 80070e8:	151b      	asrs	r3, r3, #20
 80070ea:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80070ee:	f36f 521e 	bfc	r2, #20, #11
 80070f2:	4419      	add	r1, r3
 80070f4:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80070f8:	6031      	str	r1, [r6, #0]
 80070fa:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 80070fe:	ec45 4b10 	vmov	d0, r4, r5
 8007102:	bd70      	pop	{r4, r5, r6, pc}
 8007104:	7fefffff 	.word	0x7fefffff
 8007108:	7ff00000 	.word	0x7ff00000
 800710c:	43500000 	.word	0x43500000

08007110 <__register_exitproc>:
 8007110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007114:	f8df a074 	ldr.w	sl, [pc, #116]	@ 800718c <__register_exitproc+0x7c>
 8007118:	4606      	mov	r6, r0
 800711a:	f8da 0000 	ldr.w	r0, [sl]
 800711e:	4698      	mov	r8, r3
 8007120:	460f      	mov	r7, r1
 8007122:	4691      	mov	r9, r2
 8007124:	f7fe f908 	bl	8005338 <__retarget_lock_acquire_recursive>
 8007128:	4b16      	ldr	r3, [pc, #88]	@ (8007184 <__register_exitproc+0x74>)
 800712a:	681c      	ldr	r4, [r3, #0]
 800712c:	b90c      	cbnz	r4, 8007132 <__register_exitproc+0x22>
 800712e:	4c16      	ldr	r4, [pc, #88]	@ (8007188 <__register_exitproc+0x78>)
 8007130:	601c      	str	r4, [r3, #0]
 8007132:	6865      	ldr	r5, [r4, #4]
 8007134:	f8da 0000 	ldr.w	r0, [sl]
 8007138:	2d1f      	cmp	r5, #31
 800713a:	dd05      	ble.n	8007148 <__register_exitproc+0x38>
 800713c:	f7fe f8fd 	bl	800533a <__retarget_lock_release_recursive>
 8007140:	f04f 30ff 	mov.w	r0, #4294967295
 8007144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007148:	b19e      	cbz	r6, 8007172 <__register_exitproc+0x62>
 800714a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800714e:	2201      	movs	r2, #1
 8007150:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8007154:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8007158:	40aa      	lsls	r2, r5
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8007160:	2e02      	cmp	r6, #2
 8007162:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8007166:	bf02      	ittt	eq
 8007168:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 800716c:	4313      	orreq	r3, r2
 800716e:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8007172:	1c6b      	adds	r3, r5, #1
 8007174:	3502      	adds	r5, #2
 8007176:	6063      	str	r3, [r4, #4]
 8007178:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800717c:	f7fe f8dd 	bl	800533a <__retarget_lock_release_recursive>
 8007180:	2000      	movs	r0, #0
 8007182:	e7df      	b.n	8007144 <__register_exitproc+0x34>
 8007184:	20000934 	.word	0x20000934
 8007188:	2000096c 	.word	0x2000096c
 800718c:	20000160 	.word	0x20000160

08007190 <quorem>:
 8007190:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	6903      	ldr	r3, [r0, #16]
 8007196:	690c      	ldr	r4, [r1, #16]
 8007198:	42a3      	cmp	r3, r4
 800719a:	4607      	mov	r7, r0
 800719c:	db7e      	blt.n	800729c <quorem+0x10c>
 800719e:	3c01      	subs	r4, #1
 80071a0:	f101 0814 	add.w	r8, r1, #20
 80071a4:	00a3      	lsls	r3, r4, #2
 80071a6:	f100 0514 	add.w	r5, r0, #20
 80071aa:	9300      	str	r3, [sp, #0]
 80071ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ba:	3301      	adds	r3, #1
 80071bc:	429a      	cmp	r2, r3
 80071be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80071c6:	d32e      	bcc.n	8007226 <quorem+0x96>
 80071c8:	f04f 0a00 	mov.w	sl, #0
 80071cc:	46c4      	mov	ip, r8
 80071ce:	46ae      	mov	lr, r5
 80071d0:	46d3      	mov	fp, sl
 80071d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071d6:	b298      	uxth	r0, r3
 80071d8:	fb06 a000 	mla	r0, r6, r0, sl
 80071dc:	0c02      	lsrs	r2, r0, #16
 80071de:	0c1b      	lsrs	r3, r3, #16
 80071e0:	fb06 2303 	mla	r3, r6, r3, r2
 80071e4:	f8de 2000 	ldr.w	r2, [lr]
 80071e8:	b280      	uxth	r0, r0
 80071ea:	b292      	uxth	r2, r2
 80071ec:	1a12      	subs	r2, r2, r0
 80071ee:	445a      	add	r2, fp
 80071f0:	f8de 0000 	ldr.w	r0, [lr]
 80071f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80071fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007202:	b292      	uxth	r2, r2
 8007204:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007208:	45e1      	cmp	r9, ip
 800720a:	f84e 2b04 	str.w	r2, [lr], #4
 800720e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007212:	d2de      	bcs.n	80071d2 <quorem+0x42>
 8007214:	9b00      	ldr	r3, [sp, #0]
 8007216:	58eb      	ldr	r3, [r5, r3]
 8007218:	b92b      	cbnz	r3, 8007226 <quorem+0x96>
 800721a:	9b01      	ldr	r3, [sp, #4]
 800721c:	3b04      	subs	r3, #4
 800721e:	429d      	cmp	r5, r3
 8007220:	461a      	mov	r2, r3
 8007222:	d32f      	bcc.n	8007284 <quorem+0xf4>
 8007224:	613c      	str	r4, [r7, #16]
 8007226:	4638      	mov	r0, r7
 8007228:	f001 f814 	bl	8008254 <__mcmp>
 800722c:	2800      	cmp	r0, #0
 800722e:	db25      	blt.n	800727c <quorem+0xec>
 8007230:	4629      	mov	r1, r5
 8007232:	2000      	movs	r0, #0
 8007234:	f858 2b04 	ldr.w	r2, [r8], #4
 8007238:	f8d1 c000 	ldr.w	ip, [r1]
 800723c:	fa1f fe82 	uxth.w	lr, r2
 8007240:	fa1f f38c 	uxth.w	r3, ip
 8007244:	eba3 030e 	sub.w	r3, r3, lr
 8007248:	4403      	add	r3, r0
 800724a:	0c12      	lsrs	r2, r2, #16
 800724c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007250:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007254:	b29b      	uxth	r3, r3
 8007256:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800725a:	45c1      	cmp	r9, r8
 800725c:	f841 3b04 	str.w	r3, [r1], #4
 8007260:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007264:	d2e6      	bcs.n	8007234 <quorem+0xa4>
 8007266:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800726a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800726e:	b922      	cbnz	r2, 800727a <quorem+0xea>
 8007270:	3b04      	subs	r3, #4
 8007272:	429d      	cmp	r5, r3
 8007274:	461a      	mov	r2, r3
 8007276:	d30b      	bcc.n	8007290 <quorem+0x100>
 8007278:	613c      	str	r4, [r7, #16]
 800727a:	3601      	adds	r6, #1
 800727c:	4630      	mov	r0, r6
 800727e:	b003      	add	sp, #12
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	3b04      	subs	r3, #4
 8007288:	2a00      	cmp	r2, #0
 800728a:	d1cb      	bne.n	8007224 <quorem+0x94>
 800728c:	3c01      	subs	r4, #1
 800728e:	e7c6      	b.n	800721e <quorem+0x8e>
 8007290:	6812      	ldr	r2, [r2, #0]
 8007292:	3b04      	subs	r3, #4
 8007294:	2a00      	cmp	r2, #0
 8007296:	d1ef      	bne.n	8007278 <quorem+0xe8>
 8007298:	3c01      	subs	r4, #1
 800729a:	e7ea      	b.n	8007272 <quorem+0xe2>
 800729c:	2000      	movs	r0, #0
 800729e:	e7ee      	b.n	800727e <quorem+0xee>

080072a0 <_dtoa_r>:
 80072a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072a4:	b097      	sub	sp, #92	@ 0x5c
 80072a6:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072aa:	9107      	str	r1, [sp, #28]
 80072ac:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80072ae:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80072b0:	920c      	str	r2, [sp, #48]	@ 0x30
 80072b2:	ec55 4b10 	vmov	r4, r5, d0
 80072b6:	4681      	mov	r9, r0
 80072b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80072ba:	b149      	cbz	r1, 80072d0 <_dtoa_r+0x30>
 80072bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072be:	604a      	str	r2, [r1, #4]
 80072c0:	2301      	movs	r3, #1
 80072c2:	4093      	lsls	r3, r2
 80072c4:	608b      	str	r3, [r1, #8]
 80072c6:	f000 fdc6 	bl	8007e56 <_Bfree>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 80072d0:	1e2b      	subs	r3, r5, #0
 80072d2:	bfb9      	ittee	lt
 80072d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80072d8:	9305      	strlt	r3, [sp, #20]
 80072da:	2300      	movge	r3, #0
 80072dc:	6033      	strge	r3, [r6, #0]
 80072de:	9f05      	ldr	r7, [sp, #20]
 80072e0:	4b99      	ldr	r3, [pc, #612]	@ (8007548 <_dtoa_r+0x2a8>)
 80072e2:	bfbc      	itt	lt
 80072e4:	2201      	movlt	r2, #1
 80072e6:	6032      	strlt	r2, [r6, #0]
 80072e8:	43bb      	bics	r3, r7
 80072ea:	d114      	bne.n	8007316 <_dtoa_r+0x76>
 80072ec:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80072ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072f8:	4323      	orrs	r3, r4
 80072fa:	f000 8557 	beq.w	8007dac <_dtoa_r+0xb0c>
 80072fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007300:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007560 <_dtoa_r+0x2c0>
 8007304:	b11b      	cbz	r3, 800730e <_dtoa_r+0x6e>
 8007306:	f10a 0303 	add.w	r3, sl, #3
 800730a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800730c:	6013      	str	r3, [r2, #0]
 800730e:	4650      	mov	r0, sl
 8007310:	b017      	add	sp, #92	@ 0x5c
 8007312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007316:	ed9d 7b04 	vldr	d7, [sp, #16]
 800731a:	2200      	movs	r2, #0
 800731c:	ec51 0b17 	vmov	r0, r1, d7
 8007320:	2300      	movs	r3, #0
 8007322:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007326:	f7f9 fbcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800732a:	4680      	mov	r8, r0
 800732c:	b150      	cbz	r0, 8007344 <_dtoa_r+0xa4>
 800732e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007330:	2301      	movs	r3, #1
 8007332:	6013      	str	r3, [r2, #0]
 8007334:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007336:	b113      	cbz	r3, 800733e <_dtoa_r+0x9e>
 8007338:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800733a:	4b84      	ldr	r3, [pc, #528]	@ (800754c <_dtoa_r+0x2ac>)
 800733c:	6013      	str	r3, [r2, #0]
 800733e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007564 <_dtoa_r+0x2c4>
 8007342:	e7e4      	b.n	800730e <_dtoa_r+0x6e>
 8007344:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007348:	aa14      	add	r2, sp, #80	@ 0x50
 800734a:	a915      	add	r1, sp, #84	@ 0x54
 800734c:	4648      	mov	r0, r9
 800734e:	f001 f831 	bl	80083b4 <__d2b>
 8007352:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007356:	9002      	str	r0, [sp, #8]
 8007358:	2e00      	cmp	r6, #0
 800735a:	d078      	beq.n	800744e <_dtoa_r+0x1ae>
 800735c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007366:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800736a:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800736e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007372:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007376:	4619      	mov	r1, r3
 8007378:	2200      	movs	r2, #0
 800737a:	4b75      	ldr	r3, [pc, #468]	@ (8007550 <_dtoa_r+0x2b0>)
 800737c:	f7f8 ff84 	bl	8000288 <__aeabi_dsub>
 8007380:	a36b      	add	r3, pc, #428	@ (adr r3, 8007530 <_dtoa_r+0x290>)
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	f7f9 f937 	bl	80005f8 <__aeabi_dmul>
 800738a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007538 <_dtoa_r+0x298>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff7c 	bl	800028c <__adddf3>
 8007394:	4604      	mov	r4, r0
 8007396:	4630      	mov	r0, r6
 8007398:	460d      	mov	r5, r1
 800739a:	f7f9 f8c3 	bl	8000524 <__aeabi_i2d>
 800739e:	a368      	add	r3, pc, #416	@ (adr r3, 8007540 <_dtoa_r+0x2a0>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f9 f928 	bl	80005f8 <__aeabi_dmul>
 80073a8:	4602      	mov	r2, r0
 80073aa:	460b      	mov	r3, r1
 80073ac:	4620      	mov	r0, r4
 80073ae:	4629      	mov	r1, r5
 80073b0:	f7f8 ff6c 	bl	800028c <__adddf3>
 80073b4:	4604      	mov	r4, r0
 80073b6:	460d      	mov	r5, r1
 80073b8:	f7f9 fbce 	bl	8000b58 <__aeabi_d2iz>
 80073bc:	2200      	movs	r2, #0
 80073be:	4607      	mov	r7, r0
 80073c0:	2300      	movs	r3, #0
 80073c2:	4620      	mov	r0, r4
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7f9 fb89 	bl	8000adc <__aeabi_dcmplt>
 80073ca:	b140      	cbz	r0, 80073de <_dtoa_r+0x13e>
 80073cc:	4638      	mov	r0, r7
 80073ce:	f7f9 f8a9 	bl	8000524 <__aeabi_i2d>
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	f7f9 fb77 	bl	8000ac8 <__aeabi_dcmpeq>
 80073da:	b900      	cbnz	r0, 80073de <_dtoa_r+0x13e>
 80073dc:	3f01      	subs	r7, #1
 80073de:	2f16      	cmp	r7, #22
 80073e0:	d852      	bhi.n	8007488 <_dtoa_r+0x1e8>
 80073e2:	4b5c      	ldr	r3, [pc, #368]	@ (8007554 <_dtoa_r+0x2b4>)
 80073e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073f0:	f7f9 fb74 	bl	8000adc <__aeabi_dcmplt>
 80073f4:	2800      	cmp	r0, #0
 80073f6:	d049      	beq.n	800748c <_dtoa_r+0x1ec>
 80073f8:	3f01      	subs	r7, #1
 80073fa:	2300      	movs	r3, #0
 80073fc:	9310      	str	r3, [sp, #64]	@ 0x40
 80073fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007400:	1b9b      	subs	r3, r3, r6
 8007402:	1e5a      	subs	r2, r3, #1
 8007404:	bf45      	ittet	mi
 8007406:	f1c3 0301 	rsbmi	r3, r3, #1
 800740a:	9300      	strmi	r3, [sp, #0]
 800740c:	2300      	movpl	r3, #0
 800740e:	2300      	movmi	r3, #0
 8007410:	9206      	str	r2, [sp, #24]
 8007412:	bf54      	ite	pl
 8007414:	9300      	strpl	r3, [sp, #0]
 8007416:	9306      	strmi	r3, [sp, #24]
 8007418:	2f00      	cmp	r7, #0
 800741a:	db39      	blt.n	8007490 <_dtoa_r+0x1f0>
 800741c:	9b06      	ldr	r3, [sp, #24]
 800741e:	970d      	str	r7, [sp, #52]	@ 0x34
 8007420:	443b      	add	r3, r7
 8007422:	9306      	str	r3, [sp, #24]
 8007424:	2300      	movs	r3, #0
 8007426:	9308      	str	r3, [sp, #32]
 8007428:	9b07      	ldr	r3, [sp, #28]
 800742a:	2b09      	cmp	r3, #9
 800742c:	d864      	bhi.n	80074f8 <_dtoa_r+0x258>
 800742e:	2b05      	cmp	r3, #5
 8007430:	bfc4      	itt	gt
 8007432:	3b04      	subgt	r3, #4
 8007434:	9307      	strgt	r3, [sp, #28]
 8007436:	9b07      	ldr	r3, [sp, #28]
 8007438:	f1a3 0302 	sub.w	r3, r3, #2
 800743c:	bfcc      	ite	gt
 800743e:	2400      	movgt	r4, #0
 8007440:	2401      	movle	r4, #1
 8007442:	2b03      	cmp	r3, #3
 8007444:	d864      	bhi.n	8007510 <_dtoa_r+0x270>
 8007446:	e8df f003 	tbb	[pc, r3]
 800744a:	5553      	.short	0x5553
 800744c:	2b37      	.short	0x2b37
 800744e:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007452:	441e      	add	r6, r3
 8007454:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007458:	2b20      	cmp	r3, #32
 800745a:	bfc1      	itttt	gt
 800745c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007460:	409f      	lslgt	r7, r3
 8007462:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007466:	fa24 f303 	lsrgt.w	r3, r4, r3
 800746a:	bfd6      	itet	le
 800746c:	f1c3 0320 	rsble	r3, r3, #32
 8007470:	ea47 0003 	orrgt.w	r0, r7, r3
 8007474:	fa04 f003 	lslle.w	r0, r4, r3
 8007478:	f7f9 f844 	bl	8000504 <__aeabi_ui2d>
 800747c:	2201      	movs	r2, #1
 800747e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007482:	3e01      	subs	r6, #1
 8007484:	9212      	str	r2, [sp, #72]	@ 0x48
 8007486:	e776      	b.n	8007376 <_dtoa_r+0xd6>
 8007488:	2301      	movs	r3, #1
 800748a:	e7b7      	b.n	80073fc <_dtoa_r+0x15c>
 800748c:	9010      	str	r0, [sp, #64]	@ 0x40
 800748e:	e7b6      	b.n	80073fe <_dtoa_r+0x15e>
 8007490:	9b00      	ldr	r3, [sp, #0]
 8007492:	1bdb      	subs	r3, r3, r7
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	427b      	negs	r3, r7
 8007498:	9308      	str	r3, [sp, #32]
 800749a:	2300      	movs	r3, #0
 800749c:	930d      	str	r3, [sp, #52]	@ 0x34
 800749e:	e7c3      	b.n	8007428 <_dtoa_r+0x188>
 80074a0:	2301      	movs	r3, #1
 80074a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074a6:	eb07 0b03 	add.w	fp, r7, r3
 80074aa:	f10b 0301 	add.w	r3, fp, #1
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	9303      	str	r3, [sp, #12]
 80074b2:	bfb8      	it	lt
 80074b4:	2301      	movlt	r3, #1
 80074b6:	e006      	b.n	80074c6 <_dtoa_r+0x226>
 80074b8:	2301      	movs	r3, #1
 80074ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80074bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074be:	2b00      	cmp	r3, #0
 80074c0:	dd29      	ble.n	8007516 <_dtoa_r+0x276>
 80074c2:	469b      	mov	fp, r3
 80074c4:	9303      	str	r3, [sp, #12]
 80074c6:	2100      	movs	r1, #0
 80074c8:	2204      	movs	r2, #4
 80074ca:	f102 0014 	add.w	r0, r2, #20
 80074ce:	4298      	cmp	r0, r3
 80074d0:	d929      	bls.n	8007526 <_dtoa_r+0x286>
 80074d2:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 80074d6:	4648      	mov	r0, r9
 80074d8:	f000 fc98 	bl	8007e0c <_Balloc>
 80074dc:	4682      	mov	sl, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	d142      	bne.n	8007568 <_dtoa_r+0x2c8>
 80074e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007558 <_dtoa_r+0x2b8>)
 80074e4:	4602      	mov	r2, r0
 80074e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80074ea:	481c      	ldr	r0, [pc, #112]	@ (800755c <_dtoa_r+0x2bc>)
 80074ec:	f001 f83e 	bl	800856c <__assert_func>
 80074f0:	2300      	movs	r3, #0
 80074f2:	e7e2      	b.n	80074ba <_dtoa_r+0x21a>
 80074f4:	2300      	movs	r3, #0
 80074f6:	e7d4      	b.n	80074a2 <_dtoa_r+0x202>
 80074f8:	2401      	movs	r4, #1
 80074fa:	2300      	movs	r3, #0
 80074fc:	9307      	str	r3, [sp, #28]
 80074fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8007500:	f04f 3bff 	mov.w	fp, #4294967295
 8007504:	2200      	movs	r2, #0
 8007506:	f8cd b00c 	str.w	fp, [sp, #12]
 800750a:	2312      	movs	r3, #18
 800750c:	920c      	str	r2, [sp, #48]	@ 0x30
 800750e:	e7da      	b.n	80074c6 <_dtoa_r+0x226>
 8007510:	2301      	movs	r3, #1
 8007512:	9309      	str	r3, [sp, #36]	@ 0x24
 8007514:	e7f4      	b.n	8007500 <_dtoa_r+0x260>
 8007516:	f04f 0b01 	mov.w	fp, #1
 800751a:	f8cd b00c 	str.w	fp, [sp, #12]
 800751e:	465b      	mov	r3, fp
 8007520:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007524:	e7cf      	b.n	80074c6 <_dtoa_r+0x226>
 8007526:	3101      	adds	r1, #1
 8007528:	0052      	lsls	r2, r2, #1
 800752a:	e7ce      	b.n	80074ca <_dtoa_r+0x22a>
 800752c:	f3af 8000 	nop.w
 8007530:	636f4361 	.word	0x636f4361
 8007534:	3fd287a7 	.word	0x3fd287a7
 8007538:	8b60c8b3 	.word	0x8b60c8b3
 800753c:	3fc68a28 	.word	0x3fc68a28
 8007540:	509f79fb 	.word	0x509f79fb
 8007544:	3fd34413 	.word	0x3fd34413
 8007548:	7ff00000 	.word	0x7ff00000
 800754c:	08009927 	.word	0x08009927
 8007550:	3ff80000 	.word	0x3ff80000
 8007554:	08009a98 	.word	0x08009a98
 8007558:	08009935 	.word	0x08009935
 800755c:	08009946 	.word	0x08009946
 8007560:	08009931 	.word	0x08009931
 8007564:	08009926 	.word	0x08009926
 8007568:	9b03      	ldr	r3, [sp, #12]
 800756a:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 800756e:	2b0e      	cmp	r3, #14
 8007570:	f200 80a1 	bhi.w	80076b6 <_dtoa_r+0x416>
 8007574:	2c00      	cmp	r4, #0
 8007576:	f000 809e 	beq.w	80076b6 <_dtoa_r+0x416>
 800757a:	2f00      	cmp	r7, #0
 800757c:	dd33      	ble.n	80075e6 <_dtoa_r+0x346>
 800757e:	4b9c      	ldr	r3, [pc, #624]	@ (80077f0 <_dtoa_r+0x550>)
 8007580:	f007 020f 	and.w	r2, r7, #15
 8007584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007588:	ed93 7b00 	vldr	d7, [r3]
 800758c:	05f8      	lsls	r0, r7, #23
 800758e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007592:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007596:	d516      	bpl.n	80075c6 <_dtoa_r+0x326>
 8007598:	4b96      	ldr	r3, [pc, #600]	@ (80077f4 <_dtoa_r+0x554>)
 800759a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800759e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80075a2:	f7f9 f953 	bl	800084c <__aeabi_ddiv>
 80075a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075aa:	f004 040f 	and.w	r4, r4, #15
 80075ae:	2603      	movs	r6, #3
 80075b0:	4d90      	ldr	r5, [pc, #576]	@ (80077f4 <_dtoa_r+0x554>)
 80075b2:	b954      	cbnz	r4, 80075ca <_dtoa_r+0x32a>
 80075b4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075bc:	f7f9 f946 	bl	800084c <__aeabi_ddiv>
 80075c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c4:	e028      	b.n	8007618 <_dtoa_r+0x378>
 80075c6:	2602      	movs	r6, #2
 80075c8:	e7f2      	b.n	80075b0 <_dtoa_r+0x310>
 80075ca:	07e1      	lsls	r1, r4, #31
 80075cc:	d508      	bpl.n	80075e0 <_dtoa_r+0x340>
 80075ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80075d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d6:	f7f9 f80f 	bl	80005f8 <__aeabi_dmul>
 80075da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075de:	3601      	adds	r6, #1
 80075e0:	1064      	asrs	r4, r4, #1
 80075e2:	3508      	adds	r5, #8
 80075e4:	e7e5      	b.n	80075b2 <_dtoa_r+0x312>
 80075e6:	f000 80af 	beq.w	8007748 <_dtoa_r+0x4a8>
 80075ea:	427c      	negs	r4, r7
 80075ec:	4b80      	ldr	r3, [pc, #512]	@ (80077f0 <_dtoa_r+0x550>)
 80075ee:	4d81      	ldr	r5, [pc, #516]	@ (80077f4 <_dtoa_r+0x554>)
 80075f0:	f004 020f 	and.w	r2, r4, #15
 80075f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007600:	f7f8 fffa 	bl	80005f8 <__aeabi_dmul>
 8007604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007608:	1124      	asrs	r4, r4, #4
 800760a:	2300      	movs	r3, #0
 800760c:	2602      	movs	r6, #2
 800760e:	2c00      	cmp	r4, #0
 8007610:	f040 808f 	bne.w	8007732 <_dtoa_r+0x492>
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1d3      	bne.n	80075c0 <_dtoa_r+0x320>
 8007618:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800761a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8094 	beq.w	800774c <_dtoa_r+0x4ac>
 8007624:	4b74      	ldr	r3, [pc, #464]	@ (80077f8 <_dtoa_r+0x558>)
 8007626:	2200      	movs	r2, #0
 8007628:	4620      	mov	r0, r4
 800762a:	4629      	mov	r1, r5
 800762c:	f7f9 fa56 	bl	8000adc <__aeabi_dcmplt>
 8007630:	2800      	cmp	r0, #0
 8007632:	f000 808b 	beq.w	800774c <_dtoa_r+0x4ac>
 8007636:	9b03      	ldr	r3, [sp, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8087 	beq.w	800774c <_dtoa_r+0x4ac>
 800763e:	f1bb 0f00 	cmp.w	fp, #0
 8007642:	dd34      	ble.n	80076ae <_dtoa_r+0x40e>
 8007644:	4620      	mov	r0, r4
 8007646:	4b6d      	ldr	r3, [pc, #436]	@ (80077fc <_dtoa_r+0x55c>)
 8007648:	2200      	movs	r2, #0
 800764a:	4629      	mov	r1, r5
 800764c:	f7f8 ffd4 	bl	80005f8 <__aeabi_dmul>
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	f107 38ff 	add.w	r8, r7, #4294967295
 8007658:	3601      	adds	r6, #1
 800765a:	465c      	mov	r4, fp
 800765c:	4630      	mov	r0, r6
 800765e:	f7f8 ff61 	bl	8000524 <__aeabi_i2d>
 8007662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007666:	f7f8 ffc7 	bl	80005f8 <__aeabi_dmul>
 800766a:	4b65      	ldr	r3, [pc, #404]	@ (8007800 <_dtoa_r+0x560>)
 800766c:	2200      	movs	r2, #0
 800766e:	f7f8 fe0d 	bl	800028c <__adddf3>
 8007672:	4605      	mov	r5, r0
 8007674:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007678:	2c00      	cmp	r4, #0
 800767a:	d16a      	bne.n	8007752 <_dtoa_r+0x4b2>
 800767c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007680:	4b60      	ldr	r3, [pc, #384]	@ (8007804 <_dtoa_r+0x564>)
 8007682:	2200      	movs	r2, #0
 8007684:	f7f8 fe00 	bl	8000288 <__aeabi_dsub>
 8007688:	4602      	mov	r2, r0
 800768a:	460b      	mov	r3, r1
 800768c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007690:	462a      	mov	r2, r5
 8007692:	4633      	mov	r3, r6
 8007694:	f7f9 fa40 	bl	8000b18 <__aeabi_dcmpgt>
 8007698:	2800      	cmp	r0, #0
 800769a:	f040 8297 	bne.w	8007bcc <_dtoa_r+0x92c>
 800769e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076a2:	462a      	mov	r2, r5
 80076a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80076a8:	f7f9 fa18 	bl	8000adc <__aeabi_dcmplt>
 80076ac:	bb38      	cbnz	r0, 80076fe <_dtoa_r+0x45e>
 80076ae:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80076b2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80076b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f2c0 8156 	blt.w	800796a <_dtoa_r+0x6ca>
 80076be:	2f0e      	cmp	r7, #14
 80076c0:	f300 8153 	bgt.w	800796a <_dtoa_r+0x6ca>
 80076c4:	4b4a      	ldr	r3, [pc, #296]	@ (80077f0 <_dtoa_r+0x550>)
 80076c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80076ca:	ed93 7b00 	vldr	d7, [r3]
 80076ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	ed8d 7b00 	vstr	d7, [sp]
 80076d6:	f280 80e4 	bge.w	80078a2 <_dtoa_r+0x602>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f300 80e0 	bgt.w	80078a2 <_dtoa_r+0x602>
 80076e2:	d10c      	bne.n	80076fe <_dtoa_r+0x45e>
 80076e4:	4b47      	ldr	r3, [pc, #284]	@ (8007804 <_dtoa_r+0x564>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	ec51 0b17 	vmov	r0, r1, d7
 80076ec:	f7f8 ff84 	bl	80005f8 <__aeabi_dmul>
 80076f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f4:	f7f9 fa06 	bl	8000b04 <__aeabi_dcmpge>
 80076f8:	2800      	cmp	r0, #0
 80076fa:	f000 8265 	beq.w	8007bc8 <_dtoa_r+0x928>
 80076fe:	2400      	movs	r4, #0
 8007700:	4625      	mov	r5, r4
 8007702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007704:	4656      	mov	r6, sl
 8007706:	ea6f 0803 	mvn.w	r8, r3
 800770a:	2700      	movs	r7, #0
 800770c:	4621      	mov	r1, r4
 800770e:	4648      	mov	r0, r9
 8007710:	f000 fba1 	bl	8007e56 <_Bfree>
 8007714:	2d00      	cmp	r5, #0
 8007716:	f000 80bc 	beq.w	8007892 <_dtoa_r+0x5f2>
 800771a:	b12f      	cbz	r7, 8007728 <_dtoa_r+0x488>
 800771c:	42af      	cmp	r7, r5
 800771e:	d003      	beq.n	8007728 <_dtoa_r+0x488>
 8007720:	4639      	mov	r1, r7
 8007722:	4648      	mov	r0, r9
 8007724:	f000 fb97 	bl	8007e56 <_Bfree>
 8007728:	4629      	mov	r1, r5
 800772a:	4648      	mov	r0, r9
 800772c:	f000 fb93 	bl	8007e56 <_Bfree>
 8007730:	e0af      	b.n	8007892 <_dtoa_r+0x5f2>
 8007732:	07e2      	lsls	r2, r4, #31
 8007734:	d505      	bpl.n	8007742 <_dtoa_r+0x4a2>
 8007736:	e9d5 2300 	ldrd	r2, r3, [r5]
 800773a:	f7f8 ff5d 	bl	80005f8 <__aeabi_dmul>
 800773e:	3601      	adds	r6, #1
 8007740:	2301      	movs	r3, #1
 8007742:	1064      	asrs	r4, r4, #1
 8007744:	3508      	adds	r5, #8
 8007746:	e762      	b.n	800760e <_dtoa_r+0x36e>
 8007748:	2602      	movs	r6, #2
 800774a:	e765      	b.n	8007618 <_dtoa_r+0x378>
 800774c:	9c03      	ldr	r4, [sp, #12]
 800774e:	46b8      	mov	r8, r7
 8007750:	e784      	b.n	800765c <_dtoa_r+0x3bc>
 8007752:	4b27      	ldr	r3, [pc, #156]	@ (80077f0 <_dtoa_r+0x550>)
 8007754:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007756:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800775a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800775e:	4454      	add	r4, sl
 8007760:	2900      	cmp	r1, #0
 8007762:	d053      	beq.n	800780c <_dtoa_r+0x56c>
 8007764:	4928      	ldr	r1, [pc, #160]	@ (8007808 <_dtoa_r+0x568>)
 8007766:	2000      	movs	r0, #0
 8007768:	f7f9 f870 	bl	800084c <__aeabi_ddiv>
 800776c:	4633      	mov	r3, r6
 800776e:	462a      	mov	r2, r5
 8007770:	f7f8 fd8a 	bl	8000288 <__aeabi_dsub>
 8007774:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007778:	4656      	mov	r6, sl
 800777a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777e:	f7f9 f9eb 	bl	8000b58 <__aeabi_d2iz>
 8007782:	4605      	mov	r5, r0
 8007784:	f7f8 fece 	bl	8000524 <__aeabi_i2d>
 8007788:	4602      	mov	r2, r0
 800778a:	460b      	mov	r3, r1
 800778c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007790:	f7f8 fd7a 	bl	8000288 <__aeabi_dsub>
 8007794:	3530      	adds	r5, #48	@ 0x30
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800779e:	f806 5b01 	strb.w	r5, [r6], #1
 80077a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077a6:	f7f9 f999 	bl	8000adc <__aeabi_dcmplt>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d171      	bne.n	8007892 <_dtoa_r+0x5f2>
 80077ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b2:	4911      	ldr	r1, [pc, #68]	@ (80077f8 <_dtoa_r+0x558>)
 80077b4:	2000      	movs	r0, #0
 80077b6:	f7f8 fd67 	bl	8000288 <__aeabi_dsub>
 80077ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077be:	f7f9 f98d 	bl	8000adc <__aeabi_dcmplt>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f040 80b3 	bne.w	800792e <_dtoa_r+0x68e>
 80077c8:	42a6      	cmp	r6, r4
 80077ca:	f43f af70 	beq.w	80076ae <_dtoa_r+0x40e>
 80077ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077d2:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <_dtoa_r+0x55c>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	f7f8 ff0f 	bl	80005f8 <__aeabi_dmul>
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <_dtoa_r+0x55c>)
 80077dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077e0:	2200      	movs	r2, #0
 80077e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077e6:	f7f8 ff07 	bl	80005f8 <__aeabi_dmul>
 80077ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077ee:	e7c4      	b.n	800777a <_dtoa_r+0x4da>
 80077f0:	08009a98 	.word	0x08009a98
 80077f4:	08009a70 	.word	0x08009a70
 80077f8:	3ff00000 	.word	0x3ff00000
 80077fc:	40240000 	.word	0x40240000
 8007800:	401c0000 	.word	0x401c0000
 8007804:	40140000 	.word	0x40140000
 8007808:	3fe00000 	.word	0x3fe00000
 800780c:	4631      	mov	r1, r6
 800780e:	4628      	mov	r0, r5
 8007810:	f7f8 fef2 	bl	80005f8 <__aeabi_dmul>
 8007814:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007818:	9413      	str	r4, [sp, #76]	@ 0x4c
 800781a:	4656      	mov	r6, sl
 800781c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007820:	f7f9 f99a 	bl	8000b58 <__aeabi_d2iz>
 8007824:	4605      	mov	r5, r0
 8007826:	f7f8 fe7d 	bl	8000524 <__aeabi_i2d>
 800782a:	4602      	mov	r2, r0
 800782c:	460b      	mov	r3, r1
 800782e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007832:	f7f8 fd29 	bl	8000288 <__aeabi_dsub>
 8007836:	3530      	adds	r5, #48	@ 0x30
 8007838:	f806 5b01 	strb.w	r5, [r6], #1
 800783c:	4602      	mov	r2, r0
 800783e:	460b      	mov	r3, r1
 8007840:	42a6      	cmp	r6, r4
 8007842:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007846:	f04f 0200 	mov.w	r2, #0
 800784a:	d124      	bne.n	8007896 <_dtoa_r+0x5f6>
 800784c:	4baf      	ldr	r3, [pc, #700]	@ (8007b0c <_dtoa_r+0x86c>)
 800784e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007852:	f7f8 fd1b 	bl	800028c <__adddf3>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800785e:	f7f9 f95b 	bl	8000b18 <__aeabi_dcmpgt>
 8007862:	2800      	cmp	r0, #0
 8007864:	d163      	bne.n	800792e <_dtoa_r+0x68e>
 8007866:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800786a:	49a8      	ldr	r1, [pc, #672]	@ (8007b0c <_dtoa_r+0x86c>)
 800786c:	2000      	movs	r0, #0
 800786e:	f7f8 fd0b 	bl	8000288 <__aeabi_dsub>
 8007872:	4602      	mov	r2, r0
 8007874:	460b      	mov	r3, r1
 8007876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800787a:	f7f9 f92f 	bl	8000adc <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f43f af15 	beq.w	80076ae <_dtoa_r+0x40e>
 8007884:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007886:	1e73      	subs	r3, r6, #1
 8007888:	9313      	str	r3, [sp, #76]	@ 0x4c
 800788a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800788e:	2b30      	cmp	r3, #48	@ 0x30
 8007890:	d0f8      	beq.n	8007884 <_dtoa_r+0x5e4>
 8007892:	4647      	mov	r7, r8
 8007894:	e03b      	b.n	800790e <_dtoa_r+0x66e>
 8007896:	4b9e      	ldr	r3, [pc, #632]	@ (8007b10 <_dtoa_r+0x870>)
 8007898:	f7f8 feae 	bl	80005f8 <__aeabi_dmul>
 800789c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078a0:	e7bc      	b.n	800781c <_dtoa_r+0x57c>
 80078a2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80078a6:	4656      	mov	r6, sl
 80078a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ac:	4620      	mov	r0, r4
 80078ae:	4629      	mov	r1, r5
 80078b0:	f7f8 ffcc 	bl	800084c <__aeabi_ddiv>
 80078b4:	f7f9 f950 	bl	8000b58 <__aeabi_d2iz>
 80078b8:	4680      	mov	r8, r0
 80078ba:	f7f8 fe33 	bl	8000524 <__aeabi_i2d>
 80078be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4620      	mov	r0, r4
 80078cc:	4629      	mov	r1, r5
 80078ce:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078d2:	f7f8 fcd9 	bl	8000288 <__aeabi_dsub>
 80078d6:	f806 4b01 	strb.w	r4, [r6], #1
 80078da:	9d03      	ldr	r5, [sp, #12]
 80078dc:	eba6 040a 	sub.w	r4, r6, sl
 80078e0:	42a5      	cmp	r5, r4
 80078e2:	4602      	mov	r2, r0
 80078e4:	460b      	mov	r3, r1
 80078e6:	d133      	bne.n	8007950 <_dtoa_r+0x6b0>
 80078e8:	f7f8 fcd0 	bl	800028c <__adddf3>
 80078ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078f0:	4604      	mov	r4, r0
 80078f2:	460d      	mov	r5, r1
 80078f4:	f7f9 f910 	bl	8000b18 <__aeabi_dcmpgt>
 80078f8:	b9c0      	cbnz	r0, 800792c <_dtoa_r+0x68c>
 80078fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078fe:	4620      	mov	r0, r4
 8007900:	4629      	mov	r1, r5
 8007902:	f7f9 f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007906:	b110      	cbz	r0, 800790e <_dtoa_r+0x66e>
 8007908:	f018 0f01 	tst.w	r8, #1
 800790c:	d10e      	bne.n	800792c <_dtoa_r+0x68c>
 800790e:	9902      	ldr	r1, [sp, #8]
 8007910:	4648      	mov	r0, r9
 8007912:	f000 faa0 	bl	8007e56 <_Bfree>
 8007916:	2300      	movs	r3, #0
 8007918:	7033      	strb	r3, [r6, #0]
 800791a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800791c:	3701      	adds	r7, #1
 800791e:	601f      	str	r7, [r3, #0]
 8007920:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007922:	2b00      	cmp	r3, #0
 8007924:	f43f acf3 	beq.w	800730e <_dtoa_r+0x6e>
 8007928:	601e      	str	r6, [r3, #0]
 800792a:	e4f0      	b.n	800730e <_dtoa_r+0x6e>
 800792c:	46b8      	mov	r8, r7
 800792e:	4633      	mov	r3, r6
 8007930:	461e      	mov	r6, r3
 8007932:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007936:	2a39      	cmp	r2, #57	@ 0x39
 8007938:	d106      	bne.n	8007948 <_dtoa_r+0x6a8>
 800793a:	459a      	cmp	sl, r3
 800793c:	d1f8      	bne.n	8007930 <_dtoa_r+0x690>
 800793e:	2230      	movs	r2, #48	@ 0x30
 8007940:	f108 0801 	add.w	r8, r8, #1
 8007944:	f88a 2000 	strb.w	r2, [sl]
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	3201      	adds	r2, #1
 800794c:	701a      	strb	r2, [r3, #0]
 800794e:	e7a0      	b.n	8007892 <_dtoa_r+0x5f2>
 8007950:	4b6f      	ldr	r3, [pc, #444]	@ (8007b10 <_dtoa_r+0x870>)
 8007952:	2200      	movs	r2, #0
 8007954:	f7f8 fe50 	bl	80005f8 <__aeabi_dmul>
 8007958:	2200      	movs	r2, #0
 800795a:	2300      	movs	r3, #0
 800795c:	4604      	mov	r4, r0
 800795e:	460d      	mov	r5, r1
 8007960:	f7f9 f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d09f      	beq.n	80078a8 <_dtoa_r+0x608>
 8007968:	e7d1      	b.n	800790e <_dtoa_r+0x66e>
 800796a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800796c:	2a00      	cmp	r2, #0
 800796e:	f000 80ea 	beq.w	8007b46 <_dtoa_r+0x8a6>
 8007972:	9a07      	ldr	r2, [sp, #28]
 8007974:	2a01      	cmp	r2, #1
 8007976:	f300 80cd 	bgt.w	8007b14 <_dtoa_r+0x874>
 800797a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800797c:	2a00      	cmp	r2, #0
 800797e:	f000 80c1 	beq.w	8007b04 <_dtoa_r+0x864>
 8007982:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007986:	9c08      	ldr	r4, [sp, #32]
 8007988:	9e00      	ldr	r6, [sp, #0]
 800798a:	9a00      	ldr	r2, [sp, #0]
 800798c:	441a      	add	r2, r3
 800798e:	9200      	str	r2, [sp, #0]
 8007990:	9a06      	ldr	r2, [sp, #24]
 8007992:	2101      	movs	r1, #1
 8007994:	441a      	add	r2, r3
 8007996:	4648      	mov	r0, r9
 8007998:	9206      	str	r2, [sp, #24]
 800799a:	f000 faf7 	bl	8007f8c <__i2b>
 800799e:	4605      	mov	r5, r0
 80079a0:	b166      	cbz	r6, 80079bc <_dtoa_r+0x71c>
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	dd09      	ble.n	80079bc <_dtoa_r+0x71c>
 80079a8:	42b3      	cmp	r3, r6
 80079aa:	9a00      	ldr	r2, [sp, #0]
 80079ac:	bfa8      	it	ge
 80079ae:	4633      	movge	r3, r6
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	9200      	str	r2, [sp, #0]
 80079b4:	9a06      	ldr	r2, [sp, #24]
 80079b6:	1af6      	subs	r6, r6, r3
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	9306      	str	r3, [sp, #24]
 80079bc:	9b08      	ldr	r3, [sp, #32]
 80079be:	b30b      	cbz	r3, 8007a04 <_dtoa_r+0x764>
 80079c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 80c6 	beq.w	8007b54 <_dtoa_r+0x8b4>
 80079c8:	2c00      	cmp	r4, #0
 80079ca:	f000 80c0 	beq.w	8007b4e <_dtoa_r+0x8ae>
 80079ce:	4629      	mov	r1, r5
 80079d0:	4622      	mov	r2, r4
 80079d2:	4648      	mov	r0, r9
 80079d4:	f000 fb92 	bl	80080fc <__pow5mult>
 80079d8:	9a02      	ldr	r2, [sp, #8]
 80079da:	4601      	mov	r1, r0
 80079dc:	4605      	mov	r5, r0
 80079de:	4648      	mov	r0, r9
 80079e0:	f000 faea 	bl	8007fb8 <__multiply>
 80079e4:	9902      	ldr	r1, [sp, #8]
 80079e6:	4680      	mov	r8, r0
 80079e8:	4648      	mov	r0, r9
 80079ea:	f000 fa34 	bl	8007e56 <_Bfree>
 80079ee:	9b08      	ldr	r3, [sp, #32]
 80079f0:	1b1b      	subs	r3, r3, r4
 80079f2:	9308      	str	r3, [sp, #32]
 80079f4:	f000 80b1 	beq.w	8007b5a <_dtoa_r+0x8ba>
 80079f8:	9a08      	ldr	r2, [sp, #32]
 80079fa:	4641      	mov	r1, r8
 80079fc:	4648      	mov	r0, r9
 80079fe:	f000 fb7d 	bl	80080fc <__pow5mult>
 8007a02:	9002      	str	r0, [sp, #8]
 8007a04:	2101      	movs	r1, #1
 8007a06:	4648      	mov	r0, r9
 8007a08:	f000 fac0 	bl	8007f8c <__i2b>
 8007a0c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a0e:	4604      	mov	r4, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f000 81d5 	beq.w	8007dc0 <_dtoa_r+0xb20>
 8007a16:	461a      	mov	r2, r3
 8007a18:	4601      	mov	r1, r0
 8007a1a:	4648      	mov	r0, r9
 8007a1c:	f000 fb6e 	bl	80080fc <__pow5mult>
 8007a20:	9b07      	ldr	r3, [sp, #28]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	4604      	mov	r4, r0
 8007a26:	f300 809f 	bgt.w	8007b68 <_dtoa_r+0x8c8>
 8007a2a:	9b04      	ldr	r3, [sp, #16]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	f040 8097 	bne.w	8007b60 <_dtoa_r+0x8c0>
 8007a32:	9b05      	ldr	r3, [sp, #20]
 8007a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f040 8093 	bne.w	8007b64 <_dtoa_r+0x8c4>
 8007a3e:	9b05      	ldr	r3, [sp, #20]
 8007a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a44:	0d1b      	lsrs	r3, r3, #20
 8007a46:	051b      	lsls	r3, r3, #20
 8007a48:	b133      	cbz	r3, 8007a58 <_dtoa_r+0x7b8>
 8007a4a:	9b00      	ldr	r3, [sp, #0]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	9b06      	ldr	r3, [sp, #24]
 8007a52:	3301      	adds	r3, #1
 8007a54:	9306      	str	r3, [sp, #24]
 8007a56:	2301      	movs	r3, #1
 8007a58:	9308      	str	r3, [sp, #32]
 8007a5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 81b5 	beq.w	8007dcc <_dtoa_r+0xb2c>
 8007a62:	6923      	ldr	r3, [r4, #16]
 8007a64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007a68:	6918      	ldr	r0, [r3, #16]
 8007a6a:	f000 fa43 	bl	8007ef4 <__hi0bits>
 8007a6e:	f1c0 0020 	rsb	r0, r0, #32
 8007a72:	9b06      	ldr	r3, [sp, #24]
 8007a74:	4418      	add	r0, r3
 8007a76:	f010 001f 	ands.w	r0, r0, #31
 8007a7a:	f000 8082 	beq.w	8007b82 <_dtoa_r+0x8e2>
 8007a7e:	f1c0 0320 	rsb	r3, r0, #32
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	dd73      	ble.n	8007b6e <_dtoa_r+0x8ce>
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	f1c0 001c 	rsb	r0, r0, #28
 8007a8c:	4403      	add	r3, r0
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	9b06      	ldr	r3, [sp, #24]
 8007a92:	4403      	add	r3, r0
 8007a94:	4406      	add	r6, r0
 8007a96:	9306      	str	r3, [sp, #24]
 8007a98:	9b00      	ldr	r3, [sp, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dd05      	ble.n	8007aaa <_dtoa_r+0x80a>
 8007a9e:	9902      	ldr	r1, [sp, #8]
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	4648      	mov	r0, r9
 8007aa4:	f000 fb6a 	bl	800817c <__lshift>
 8007aa8:	9002      	str	r0, [sp, #8]
 8007aaa:	9b06      	ldr	r3, [sp, #24]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	dd05      	ble.n	8007abc <_dtoa_r+0x81c>
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	461a      	mov	r2, r3
 8007ab4:	4648      	mov	r0, r9
 8007ab6:	f000 fb61 	bl	800817c <__lshift>
 8007aba:	4604      	mov	r4, r0
 8007abc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d061      	beq.n	8007b86 <_dtoa_r+0x8e6>
 8007ac2:	9802      	ldr	r0, [sp, #8]
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	f000 fbc5 	bl	8008254 <__mcmp>
 8007aca:	2800      	cmp	r0, #0
 8007acc:	da5b      	bge.n	8007b86 <_dtoa_r+0x8e6>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	9902      	ldr	r1, [sp, #8]
 8007ad2:	220a      	movs	r2, #10
 8007ad4:	4648      	mov	r0, r9
 8007ad6:	f000 f9c7 	bl	8007e68 <__multadd>
 8007ada:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	f107 38ff 	add.w	r8, r7, #4294967295
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 8174 	beq.w	8007dd0 <_dtoa_r+0xb30>
 8007ae8:	4629      	mov	r1, r5
 8007aea:	2300      	movs	r3, #0
 8007aec:	220a      	movs	r2, #10
 8007aee:	4648      	mov	r0, r9
 8007af0:	f000 f9ba 	bl	8007e68 <__multadd>
 8007af4:	f1bb 0f00 	cmp.w	fp, #0
 8007af8:	4605      	mov	r5, r0
 8007afa:	dc6f      	bgt.n	8007bdc <_dtoa_r+0x93c>
 8007afc:	9b07      	ldr	r3, [sp, #28]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	dc49      	bgt.n	8007b96 <_dtoa_r+0x8f6>
 8007b02:	e06b      	b.n	8007bdc <_dtoa_r+0x93c>
 8007b04:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b06:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b0a:	e73c      	b.n	8007986 <_dtoa_r+0x6e6>
 8007b0c:	3fe00000 	.word	0x3fe00000
 8007b10:	40240000 	.word	0x40240000
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	1e5c      	subs	r4, r3, #1
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	42a3      	cmp	r3, r4
 8007b1c:	db09      	blt.n	8007b32 <_dtoa_r+0x892>
 8007b1e:	1b1c      	subs	r4, r3, r4
 8007b20:	9b03      	ldr	r3, [sp, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f6bf af30 	bge.w	8007988 <_dtoa_r+0x6e8>
 8007b28:	9b00      	ldr	r3, [sp, #0]
 8007b2a:	9a03      	ldr	r2, [sp, #12]
 8007b2c:	1a9e      	subs	r6, r3, r2
 8007b2e:	2300      	movs	r3, #0
 8007b30:	e72b      	b.n	800798a <_dtoa_r+0x6ea>
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b36:	9408      	str	r4, [sp, #32]
 8007b38:	1ae3      	subs	r3, r4, r3
 8007b3a:	441a      	add	r2, r3
 8007b3c:	9e00      	ldr	r6, [sp, #0]
 8007b3e:	9b03      	ldr	r3, [sp, #12]
 8007b40:	920d      	str	r2, [sp, #52]	@ 0x34
 8007b42:	2400      	movs	r4, #0
 8007b44:	e721      	b.n	800798a <_dtoa_r+0x6ea>
 8007b46:	9c08      	ldr	r4, [sp, #32]
 8007b48:	9e00      	ldr	r6, [sp, #0]
 8007b4a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007b4c:	e728      	b.n	80079a0 <_dtoa_r+0x700>
 8007b4e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007b52:	e751      	b.n	80079f8 <_dtoa_r+0x758>
 8007b54:	9a08      	ldr	r2, [sp, #32]
 8007b56:	9902      	ldr	r1, [sp, #8]
 8007b58:	e750      	b.n	80079fc <_dtoa_r+0x75c>
 8007b5a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007b5e:	e751      	b.n	8007a04 <_dtoa_r+0x764>
 8007b60:	2300      	movs	r3, #0
 8007b62:	e779      	b.n	8007a58 <_dtoa_r+0x7b8>
 8007b64:	9b04      	ldr	r3, [sp, #16]
 8007b66:	e777      	b.n	8007a58 <_dtoa_r+0x7b8>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	9308      	str	r3, [sp, #32]
 8007b6c:	e779      	b.n	8007a62 <_dtoa_r+0x7c2>
 8007b6e:	d093      	beq.n	8007a98 <_dtoa_r+0x7f8>
 8007b70:	9a00      	ldr	r2, [sp, #0]
 8007b72:	331c      	adds	r3, #28
 8007b74:	441a      	add	r2, r3
 8007b76:	9200      	str	r2, [sp, #0]
 8007b78:	9a06      	ldr	r2, [sp, #24]
 8007b7a:	441a      	add	r2, r3
 8007b7c:	441e      	add	r6, r3
 8007b7e:	9206      	str	r2, [sp, #24]
 8007b80:	e78a      	b.n	8007a98 <_dtoa_r+0x7f8>
 8007b82:	4603      	mov	r3, r0
 8007b84:	e7f4      	b.n	8007b70 <_dtoa_r+0x8d0>
 8007b86:	9b03      	ldr	r3, [sp, #12]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	46b8      	mov	r8, r7
 8007b8c:	dc20      	bgt.n	8007bd0 <_dtoa_r+0x930>
 8007b8e:	469b      	mov	fp, r3
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	dd1e      	ble.n	8007bd4 <_dtoa_r+0x934>
 8007b96:	f1bb 0f00 	cmp.w	fp, #0
 8007b9a:	f47f adb2 	bne.w	8007702 <_dtoa_r+0x462>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	465b      	mov	r3, fp
 8007ba2:	2205      	movs	r2, #5
 8007ba4:	4648      	mov	r0, r9
 8007ba6:	f000 f95f 	bl	8007e68 <__multadd>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4604      	mov	r4, r0
 8007bae:	9802      	ldr	r0, [sp, #8]
 8007bb0:	f000 fb50 	bl	8008254 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	f77f ada4 	ble.w	8007702 <_dtoa_r+0x462>
 8007bba:	4656      	mov	r6, sl
 8007bbc:	2331      	movs	r3, #49	@ 0x31
 8007bbe:	f806 3b01 	strb.w	r3, [r6], #1
 8007bc2:	f108 0801 	add.w	r8, r8, #1
 8007bc6:	e5a0      	b.n	800770a <_dtoa_r+0x46a>
 8007bc8:	9c03      	ldr	r4, [sp, #12]
 8007bca:	46b8      	mov	r8, r7
 8007bcc:	4625      	mov	r5, r4
 8007bce:	e7f4      	b.n	8007bba <_dtoa_r+0x91a>
 8007bd0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007bd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 80fe 	beq.w	8007dd8 <_dtoa_r+0xb38>
 8007bdc:	2e00      	cmp	r6, #0
 8007bde:	dd05      	ble.n	8007bec <_dtoa_r+0x94c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4632      	mov	r2, r6
 8007be4:	4648      	mov	r0, r9
 8007be6:	f000 fac9 	bl	800817c <__lshift>
 8007bea:	4605      	mov	r5, r0
 8007bec:	9b08      	ldr	r3, [sp, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d05b      	beq.n	8007caa <_dtoa_r+0xa0a>
 8007bf2:	6869      	ldr	r1, [r5, #4]
 8007bf4:	4648      	mov	r0, r9
 8007bf6:	f000 f909 	bl	8007e0c <_Balloc>
 8007bfa:	4606      	mov	r6, r0
 8007bfc:	b920      	cbnz	r0, 8007c08 <_dtoa_r+0x968>
 8007bfe:	4b81      	ldr	r3, [pc, #516]	@ (8007e04 <_dtoa_r+0xb64>)
 8007c00:	4602      	mov	r2, r0
 8007c02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c06:	e470      	b.n	80074ea <_dtoa_r+0x24a>
 8007c08:	692a      	ldr	r2, [r5, #16]
 8007c0a:	3202      	adds	r2, #2
 8007c0c:	0092      	lsls	r2, r2, #2
 8007c0e:	f105 010c 	add.w	r1, r5, #12
 8007c12:	300c      	adds	r0, #12
 8007c14:	f000 fc9b 	bl	800854e <memcpy>
 8007c18:	2201      	movs	r2, #1
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 faad 	bl	800817c <__lshift>
 8007c22:	f10a 0301 	add.w	r3, sl, #1
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	eb0a 030b 	add.w	r3, sl, fp
 8007c2c:	9308      	str	r3, [sp, #32]
 8007c2e:	9b04      	ldr	r3, [sp, #16]
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	462f      	mov	r7, r5
 8007c36:	9306      	str	r3, [sp, #24]
 8007c38:	4605      	mov	r5, r0
 8007c3a:	9b00      	ldr	r3, [sp, #0]
 8007c3c:	9802      	ldr	r0, [sp, #8]
 8007c3e:	4621      	mov	r1, r4
 8007c40:	f103 3bff 	add.w	fp, r3, #4294967295
 8007c44:	f7ff faa4 	bl	8007190 <quorem>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	3330      	adds	r3, #48	@ 0x30
 8007c4c:	9003      	str	r0, [sp, #12]
 8007c4e:	4639      	mov	r1, r7
 8007c50:	9802      	ldr	r0, [sp, #8]
 8007c52:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c54:	f000 fafe 	bl	8008254 <__mcmp>
 8007c58:	462a      	mov	r2, r5
 8007c5a:	9004      	str	r0, [sp, #16]
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4648      	mov	r0, r9
 8007c60:	f000 fb14 	bl	800828c <__mdiff>
 8007c64:	68c2      	ldr	r2, [r0, #12]
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	4606      	mov	r6, r0
 8007c6a:	bb02      	cbnz	r2, 8007cae <_dtoa_r+0xa0e>
 8007c6c:	4601      	mov	r1, r0
 8007c6e:	9802      	ldr	r0, [sp, #8]
 8007c70:	f000 faf0 	bl	8008254 <__mcmp>
 8007c74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c76:	4602      	mov	r2, r0
 8007c78:	4631      	mov	r1, r6
 8007c7a:	4648      	mov	r0, r9
 8007c7c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c80:	f000 f8e9 	bl	8007e56 <_Bfree>
 8007c84:	9b07      	ldr	r3, [sp, #28]
 8007c86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c88:	9e00      	ldr	r6, [sp, #0]
 8007c8a:	ea42 0103 	orr.w	r1, r2, r3
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	4319      	orrs	r1, r3
 8007c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c94:	d10d      	bne.n	8007cb2 <_dtoa_r+0xa12>
 8007c96:	2b39      	cmp	r3, #57	@ 0x39
 8007c98:	d027      	beq.n	8007cea <_dtoa_r+0xa4a>
 8007c9a:	9a04      	ldr	r2, [sp, #16]
 8007c9c:	2a00      	cmp	r2, #0
 8007c9e:	dd01      	ble.n	8007ca4 <_dtoa_r+0xa04>
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	3331      	adds	r3, #49	@ 0x31
 8007ca4:	f88b 3000 	strb.w	r3, [fp]
 8007ca8:	e530      	b.n	800770c <_dtoa_r+0x46c>
 8007caa:	4628      	mov	r0, r5
 8007cac:	e7b9      	b.n	8007c22 <_dtoa_r+0x982>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	e7e2      	b.n	8007c78 <_dtoa_r+0x9d8>
 8007cb2:	9904      	ldr	r1, [sp, #16]
 8007cb4:	2900      	cmp	r1, #0
 8007cb6:	db04      	blt.n	8007cc2 <_dtoa_r+0xa22>
 8007cb8:	9807      	ldr	r0, [sp, #28]
 8007cba:	4301      	orrs	r1, r0
 8007cbc:	9806      	ldr	r0, [sp, #24]
 8007cbe:	4301      	orrs	r1, r0
 8007cc0:	d120      	bne.n	8007d04 <_dtoa_r+0xa64>
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	ddee      	ble.n	8007ca4 <_dtoa_r+0xa04>
 8007cc6:	9902      	ldr	r1, [sp, #8]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	4648      	mov	r0, r9
 8007cce:	f000 fa55 	bl	800817c <__lshift>
 8007cd2:	4621      	mov	r1, r4
 8007cd4:	9002      	str	r0, [sp, #8]
 8007cd6:	f000 fabd 	bl	8008254 <__mcmp>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	9b00      	ldr	r3, [sp, #0]
 8007cde:	dc02      	bgt.n	8007ce6 <_dtoa_r+0xa46>
 8007ce0:	d1e0      	bne.n	8007ca4 <_dtoa_r+0xa04>
 8007ce2:	07da      	lsls	r2, r3, #31
 8007ce4:	d5de      	bpl.n	8007ca4 <_dtoa_r+0xa04>
 8007ce6:	2b39      	cmp	r3, #57	@ 0x39
 8007ce8:	d1da      	bne.n	8007ca0 <_dtoa_r+0xa00>
 8007cea:	2339      	movs	r3, #57	@ 0x39
 8007cec:	f88b 3000 	strb.w	r3, [fp]
 8007cf0:	4633      	mov	r3, r6
 8007cf2:	461e      	mov	r6, r3
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007cfa:	2a39      	cmp	r2, #57	@ 0x39
 8007cfc:	d04e      	beq.n	8007d9c <_dtoa_r+0xafc>
 8007cfe:	3201      	adds	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e503      	b.n	800770c <_dtoa_r+0x46c>
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	dd03      	ble.n	8007d10 <_dtoa_r+0xa70>
 8007d08:	2b39      	cmp	r3, #57	@ 0x39
 8007d0a:	d0ee      	beq.n	8007cea <_dtoa_r+0xa4a>
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e7c9      	b.n	8007ca4 <_dtoa_r+0xa04>
 8007d10:	9a00      	ldr	r2, [sp, #0]
 8007d12:	9908      	ldr	r1, [sp, #32]
 8007d14:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d18:	428a      	cmp	r2, r1
 8007d1a:	d028      	beq.n	8007d6e <_dtoa_r+0xace>
 8007d1c:	9902      	ldr	r1, [sp, #8]
 8007d1e:	2300      	movs	r3, #0
 8007d20:	220a      	movs	r2, #10
 8007d22:	4648      	mov	r0, r9
 8007d24:	f000 f8a0 	bl	8007e68 <__multadd>
 8007d28:	42af      	cmp	r7, r5
 8007d2a:	9002      	str	r0, [sp, #8]
 8007d2c:	f04f 0300 	mov.w	r3, #0
 8007d30:	f04f 020a 	mov.w	r2, #10
 8007d34:	4639      	mov	r1, r7
 8007d36:	4648      	mov	r0, r9
 8007d38:	d107      	bne.n	8007d4a <_dtoa_r+0xaaa>
 8007d3a:	f000 f895 	bl	8007e68 <__multadd>
 8007d3e:	4607      	mov	r7, r0
 8007d40:	4605      	mov	r5, r0
 8007d42:	9b00      	ldr	r3, [sp, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	9300      	str	r3, [sp, #0]
 8007d48:	e777      	b.n	8007c3a <_dtoa_r+0x99a>
 8007d4a:	f000 f88d 	bl	8007e68 <__multadd>
 8007d4e:	4629      	mov	r1, r5
 8007d50:	4607      	mov	r7, r0
 8007d52:	2300      	movs	r3, #0
 8007d54:	220a      	movs	r2, #10
 8007d56:	4648      	mov	r0, r9
 8007d58:	f000 f886 	bl	8007e68 <__multadd>
 8007d5c:	4605      	mov	r5, r0
 8007d5e:	e7f0      	b.n	8007d42 <_dtoa_r+0xaa2>
 8007d60:	f1bb 0f00 	cmp.w	fp, #0
 8007d64:	bfcc      	ite	gt
 8007d66:	465e      	movgt	r6, fp
 8007d68:	2601      	movle	r6, #1
 8007d6a:	4456      	add	r6, sl
 8007d6c:	2700      	movs	r7, #0
 8007d6e:	9902      	ldr	r1, [sp, #8]
 8007d70:	9300      	str	r3, [sp, #0]
 8007d72:	2201      	movs	r2, #1
 8007d74:	4648      	mov	r0, r9
 8007d76:	f000 fa01 	bl	800817c <__lshift>
 8007d7a:	4621      	mov	r1, r4
 8007d7c:	9002      	str	r0, [sp, #8]
 8007d7e:	f000 fa69 	bl	8008254 <__mcmp>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	dcb4      	bgt.n	8007cf0 <_dtoa_r+0xa50>
 8007d86:	d102      	bne.n	8007d8e <_dtoa_r+0xaee>
 8007d88:	9b00      	ldr	r3, [sp, #0]
 8007d8a:	07db      	lsls	r3, r3, #31
 8007d8c:	d4b0      	bmi.n	8007cf0 <_dtoa_r+0xa50>
 8007d8e:	4633      	mov	r3, r6
 8007d90:	461e      	mov	r6, r3
 8007d92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d96:	2a30      	cmp	r2, #48	@ 0x30
 8007d98:	d0fa      	beq.n	8007d90 <_dtoa_r+0xaf0>
 8007d9a:	e4b7      	b.n	800770c <_dtoa_r+0x46c>
 8007d9c:	459a      	cmp	sl, r3
 8007d9e:	d1a8      	bne.n	8007cf2 <_dtoa_r+0xa52>
 8007da0:	2331      	movs	r3, #49	@ 0x31
 8007da2:	f108 0801 	add.w	r8, r8, #1
 8007da6:	f88a 3000 	strb.w	r3, [sl]
 8007daa:	e4af      	b.n	800770c <_dtoa_r+0x46c>
 8007dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dae:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e08 <_dtoa_r+0xb68>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f43f aaab 	beq.w	800730e <_dtoa_r+0x6e>
 8007db8:	f10a 0308 	add.w	r3, sl, #8
 8007dbc:	f7ff baa5 	b.w	800730a <_dtoa_r+0x6a>
 8007dc0:	9b07      	ldr	r3, [sp, #28]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	f77f ae31 	ble.w	8007a2a <_dtoa_r+0x78a>
 8007dc8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dca:	9308      	str	r3, [sp, #32]
 8007dcc:	2001      	movs	r0, #1
 8007dce:	e650      	b.n	8007a72 <_dtoa_r+0x7d2>
 8007dd0:	f1bb 0f00 	cmp.w	fp, #0
 8007dd4:	f77f aedc 	ble.w	8007b90 <_dtoa_r+0x8f0>
 8007dd8:	4656      	mov	r6, sl
 8007dda:	9802      	ldr	r0, [sp, #8]
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f7ff f9d7 	bl	8007190 <quorem>
 8007de2:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007de6:	f806 3b01 	strb.w	r3, [r6], #1
 8007dea:	eba6 020a 	sub.w	r2, r6, sl
 8007dee:	4593      	cmp	fp, r2
 8007df0:	ddb6      	ble.n	8007d60 <_dtoa_r+0xac0>
 8007df2:	9902      	ldr	r1, [sp, #8]
 8007df4:	2300      	movs	r3, #0
 8007df6:	220a      	movs	r2, #10
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f000 f835 	bl	8007e68 <__multadd>
 8007dfe:	9002      	str	r0, [sp, #8]
 8007e00:	e7eb      	b.n	8007dda <_dtoa_r+0xb3a>
 8007e02:	bf00      	nop
 8007e04:	08009935 	.word	0x08009935
 8007e08:	08009928 	.word	0x08009928

08007e0c <_Balloc>:
 8007e0c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007e0e:	b570      	push	{r4, r5, r6, lr}
 8007e10:	4605      	mov	r5, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	b17b      	cbz	r3, 8007e36 <_Balloc+0x2a>
 8007e16:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007e18:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007e1c:	b9a0      	cbnz	r0, 8007e48 <_Balloc+0x3c>
 8007e1e:	2101      	movs	r1, #1
 8007e20:	fa01 f604 	lsl.w	r6, r1, r4
 8007e24:	1d72      	adds	r2, r6, #5
 8007e26:	0092      	lsls	r2, r2, #2
 8007e28:	4628      	mov	r0, r5
 8007e2a:	f000 fbbd 	bl	80085a8 <_calloc_r>
 8007e2e:	b148      	cbz	r0, 8007e44 <_Balloc+0x38>
 8007e30:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8007e34:	e00b      	b.n	8007e4e <_Balloc+0x42>
 8007e36:	2221      	movs	r2, #33	@ 0x21
 8007e38:	2104      	movs	r1, #4
 8007e3a:	f000 fbb5 	bl	80085a8 <_calloc_r>
 8007e3e:	6468      	str	r0, [r5, #68]	@ 0x44
 8007e40:	2800      	cmp	r0, #0
 8007e42:	d1e8      	bne.n	8007e16 <_Balloc+0xa>
 8007e44:	2000      	movs	r0, #0
 8007e46:	bd70      	pop	{r4, r5, r6, pc}
 8007e48:	6802      	ldr	r2, [r0, #0]
 8007e4a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e54:	e7f7      	b.n	8007e46 <_Balloc+0x3a>

08007e56 <_Bfree>:
 8007e56:	b131      	cbz	r1, 8007e66 <_Bfree+0x10>
 8007e58:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007e5a:	684a      	ldr	r2, [r1, #4]
 8007e5c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007e60:	6008      	str	r0, [r1, #0]
 8007e62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007e66:	4770      	bx	lr

08007e68 <__multadd>:
 8007e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e6c:	690d      	ldr	r5, [r1, #16]
 8007e6e:	4607      	mov	r7, r0
 8007e70:	460c      	mov	r4, r1
 8007e72:	461e      	mov	r6, r3
 8007e74:	f101 0c14 	add.w	ip, r1, #20
 8007e78:	2000      	movs	r0, #0
 8007e7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e7e:	b299      	uxth	r1, r3
 8007e80:	fb02 6101 	mla	r1, r2, r1, r6
 8007e84:	0c1e      	lsrs	r6, r3, #16
 8007e86:	0c0b      	lsrs	r3, r1, #16
 8007e88:	fb02 3306 	mla	r3, r2, r6, r3
 8007e8c:	b289      	uxth	r1, r1
 8007e8e:	3001      	adds	r0, #1
 8007e90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e94:	4285      	cmp	r5, r0
 8007e96:	f84c 1b04 	str.w	r1, [ip], #4
 8007e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e9e:	dcec      	bgt.n	8007e7a <__multadd+0x12>
 8007ea0:	b30e      	cbz	r6, 8007ee6 <__multadd+0x7e>
 8007ea2:	68a3      	ldr	r3, [r4, #8]
 8007ea4:	42ab      	cmp	r3, r5
 8007ea6:	dc19      	bgt.n	8007edc <__multadd+0x74>
 8007ea8:	6861      	ldr	r1, [r4, #4]
 8007eaa:	4638      	mov	r0, r7
 8007eac:	3101      	adds	r1, #1
 8007eae:	f7ff ffad 	bl	8007e0c <_Balloc>
 8007eb2:	4680      	mov	r8, r0
 8007eb4:	b928      	cbnz	r0, 8007ec2 <__multadd+0x5a>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8007eec <__multadd+0x84>)
 8007eba:	480d      	ldr	r0, [pc, #52]	@ (8007ef0 <__multadd+0x88>)
 8007ebc:	21ba      	movs	r1, #186	@ 0xba
 8007ebe:	f000 fb55 	bl	800856c <__assert_func>
 8007ec2:	6922      	ldr	r2, [r4, #16]
 8007ec4:	3202      	adds	r2, #2
 8007ec6:	f104 010c 	add.w	r1, r4, #12
 8007eca:	0092      	lsls	r2, r2, #2
 8007ecc:	300c      	adds	r0, #12
 8007ece:	f000 fb3e 	bl	800854e <memcpy>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4638      	mov	r0, r7
 8007ed6:	f7ff ffbe 	bl	8007e56 <_Bfree>
 8007eda:	4644      	mov	r4, r8
 8007edc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	615e      	str	r6, [r3, #20]
 8007ee4:	6125      	str	r5, [r4, #16]
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eec:	08009935 	.word	0x08009935
 8007ef0:	0800999e 	.word	0x0800999e

08007ef4 <__hi0bits>:
 8007ef4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007ef8:	4603      	mov	r3, r0
 8007efa:	bf36      	itet	cc
 8007efc:	0403      	lslcc	r3, r0, #16
 8007efe:	2000      	movcs	r0, #0
 8007f00:	2010      	movcc	r0, #16
 8007f02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f06:	bf3c      	itt	cc
 8007f08:	021b      	lslcc	r3, r3, #8
 8007f0a:	3008      	addcc	r0, #8
 8007f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f10:	bf3c      	itt	cc
 8007f12:	011b      	lslcc	r3, r3, #4
 8007f14:	3004      	addcc	r0, #4
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	bf3c      	itt	cc
 8007f1c:	009b      	lslcc	r3, r3, #2
 8007f1e:	3002      	addcc	r0, #2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	db05      	blt.n	8007f30 <__hi0bits+0x3c>
 8007f24:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f28:	f100 0001 	add.w	r0, r0, #1
 8007f2c:	bf08      	it	eq
 8007f2e:	2020      	moveq	r0, #32
 8007f30:	4770      	bx	lr

08007f32 <__lo0bits>:
 8007f32:	6803      	ldr	r3, [r0, #0]
 8007f34:	4602      	mov	r2, r0
 8007f36:	f013 0007 	ands.w	r0, r3, #7
 8007f3a:	d00b      	beq.n	8007f54 <__lo0bits+0x22>
 8007f3c:	07d9      	lsls	r1, r3, #31
 8007f3e:	d421      	bmi.n	8007f84 <__lo0bits+0x52>
 8007f40:	0798      	lsls	r0, r3, #30
 8007f42:	bf49      	itett	mi
 8007f44:	085b      	lsrmi	r3, r3, #1
 8007f46:	089b      	lsrpl	r3, r3, #2
 8007f48:	2001      	movmi	r0, #1
 8007f4a:	6013      	strmi	r3, [r2, #0]
 8007f4c:	bf5c      	itt	pl
 8007f4e:	6013      	strpl	r3, [r2, #0]
 8007f50:	2002      	movpl	r0, #2
 8007f52:	4770      	bx	lr
 8007f54:	b299      	uxth	r1, r3
 8007f56:	b909      	cbnz	r1, 8007f5c <__lo0bits+0x2a>
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	2010      	movs	r0, #16
 8007f5c:	b2d9      	uxtb	r1, r3
 8007f5e:	b909      	cbnz	r1, 8007f64 <__lo0bits+0x32>
 8007f60:	3008      	adds	r0, #8
 8007f62:	0a1b      	lsrs	r3, r3, #8
 8007f64:	0719      	lsls	r1, r3, #28
 8007f66:	bf04      	itt	eq
 8007f68:	091b      	lsreq	r3, r3, #4
 8007f6a:	3004      	addeq	r0, #4
 8007f6c:	0799      	lsls	r1, r3, #30
 8007f6e:	bf04      	itt	eq
 8007f70:	089b      	lsreq	r3, r3, #2
 8007f72:	3002      	addeq	r0, #2
 8007f74:	07d9      	lsls	r1, r3, #31
 8007f76:	d403      	bmi.n	8007f80 <__lo0bits+0x4e>
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	f100 0001 	add.w	r0, r0, #1
 8007f7e:	d003      	beq.n	8007f88 <__lo0bits+0x56>
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	4770      	bx	lr
 8007f84:	2000      	movs	r0, #0
 8007f86:	4770      	bx	lr
 8007f88:	2020      	movs	r0, #32
 8007f8a:	4770      	bx	lr

08007f8c <__i2b>:
 8007f8c:	b510      	push	{r4, lr}
 8007f8e:	460c      	mov	r4, r1
 8007f90:	2101      	movs	r1, #1
 8007f92:	f7ff ff3b 	bl	8007e0c <_Balloc>
 8007f96:	4602      	mov	r2, r0
 8007f98:	b928      	cbnz	r0, 8007fa6 <__i2b+0x1a>
 8007f9a:	4b05      	ldr	r3, [pc, #20]	@ (8007fb0 <__i2b+0x24>)
 8007f9c:	4805      	ldr	r0, [pc, #20]	@ (8007fb4 <__i2b+0x28>)
 8007f9e:	f240 1145 	movw	r1, #325	@ 0x145
 8007fa2:	f000 fae3 	bl	800856c <__assert_func>
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	6144      	str	r4, [r0, #20]
 8007faa:	6103      	str	r3, [r0, #16]
 8007fac:	bd10      	pop	{r4, pc}
 8007fae:	bf00      	nop
 8007fb0:	08009935 	.word	0x08009935
 8007fb4:	0800999e 	.word	0x0800999e

08007fb8 <__multiply>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	4617      	mov	r7, r2
 8007fbe:	690a      	ldr	r2, [r1, #16]
 8007fc0:	693b      	ldr	r3, [r7, #16]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	bfa8      	it	ge
 8007fc6:	463b      	movge	r3, r7
 8007fc8:	4689      	mov	r9, r1
 8007fca:	bfa4      	itt	ge
 8007fcc:	460f      	movge	r7, r1
 8007fce:	4699      	movge	r9, r3
 8007fd0:	693d      	ldr	r5, [r7, #16]
 8007fd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	eb05 060a 	add.w	r6, r5, sl
 8007fde:	42b3      	cmp	r3, r6
 8007fe0:	b085      	sub	sp, #20
 8007fe2:	bfb8      	it	lt
 8007fe4:	3101      	addlt	r1, #1
 8007fe6:	f7ff ff11 	bl	8007e0c <_Balloc>
 8007fea:	b930      	cbnz	r0, 8007ffa <__multiply+0x42>
 8007fec:	4602      	mov	r2, r0
 8007fee:	4b41      	ldr	r3, [pc, #260]	@ (80080f4 <__multiply+0x13c>)
 8007ff0:	4841      	ldr	r0, [pc, #260]	@ (80080f8 <__multiply+0x140>)
 8007ff2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ff6:	f000 fab9 	bl	800856c <__assert_func>
 8007ffa:	f100 0414 	add.w	r4, r0, #20
 8007ffe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008002:	4623      	mov	r3, r4
 8008004:	2200      	movs	r2, #0
 8008006:	4573      	cmp	r3, lr
 8008008:	d320      	bcc.n	800804c <__multiply+0x94>
 800800a:	f107 0814 	add.w	r8, r7, #20
 800800e:	f109 0114 	add.w	r1, r9, #20
 8008012:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008016:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800801a:	9302      	str	r3, [sp, #8]
 800801c:	1beb      	subs	r3, r5, r7
 800801e:	3b15      	subs	r3, #21
 8008020:	f023 0303 	bic.w	r3, r3, #3
 8008024:	3304      	adds	r3, #4
 8008026:	3715      	adds	r7, #21
 8008028:	42bd      	cmp	r5, r7
 800802a:	bf38      	it	cc
 800802c:	2304      	movcc	r3, #4
 800802e:	9301      	str	r3, [sp, #4]
 8008030:	9b02      	ldr	r3, [sp, #8]
 8008032:	9103      	str	r1, [sp, #12]
 8008034:	428b      	cmp	r3, r1
 8008036:	d80c      	bhi.n	8008052 <__multiply+0x9a>
 8008038:	2e00      	cmp	r6, #0
 800803a:	dd03      	ble.n	8008044 <__multiply+0x8c>
 800803c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008040:	2b00      	cmp	r3, #0
 8008042:	d055      	beq.n	80080f0 <__multiply+0x138>
 8008044:	6106      	str	r6, [r0, #16]
 8008046:	b005      	add	sp, #20
 8008048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	f843 2b04 	str.w	r2, [r3], #4
 8008050:	e7d9      	b.n	8008006 <__multiply+0x4e>
 8008052:	f8b1 a000 	ldrh.w	sl, [r1]
 8008056:	f1ba 0f00 	cmp.w	sl, #0
 800805a:	d01f      	beq.n	800809c <__multiply+0xe4>
 800805c:	46c4      	mov	ip, r8
 800805e:	46a1      	mov	r9, r4
 8008060:	2700      	movs	r7, #0
 8008062:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008066:	f8d9 3000 	ldr.w	r3, [r9]
 800806a:	fa1f fb82 	uxth.w	fp, r2
 800806e:	b29b      	uxth	r3, r3
 8008070:	fb0a 330b 	mla	r3, sl, fp, r3
 8008074:	443b      	add	r3, r7
 8008076:	f8d9 7000 	ldr.w	r7, [r9]
 800807a:	0c12      	lsrs	r2, r2, #16
 800807c:	0c3f      	lsrs	r7, r7, #16
 800807e:	fb0a 7202 	mla	r2, sl, r2, r7
 8008082:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008086:	b29b      	uxth	r3, r3
 8008088:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800808c:	4565      	cmp	r5, ip
 800808e:	f849 3b04 	str.w	r3, [r9], #4
 8008092:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008096:	d8e4      	bhi.n	8008062 <__multiply+0xaa>
 8008098:	9b01      	ldr	r3, [sp, #4]
 800809a:	50e7      	str	r7, [r4, r3]
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80080a2:	3104      	adds	r1, #4
 80080a4:	f1b9 0f00 	cmp.w	r9, #0
 80080a8:	d020      	beq.n	80080ec <__multiply+0x134>
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	4647      	mov	r7, r8
 80080ae:	46a4      	mov	ip, r4
 80080b0:	f04f 0a00 	mov.w	sl, #0
 80080b4:	f8b7 b000 	ldrh.w	fp, [r7]
 80080b8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80080bc:	fb09 220b 	mla	r2, r9, fp, r2
 80080c0:	4452      	add	r2, sl
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080c8:	f84c 3b04 	str.w	r3, [ip], #4
 80080cc:	f857 3b04 	ldr.w	r3, [r7], #4
 80080d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080d4:	f8bc 3000 	ldrh.w	r3, [ip]
 80080d8:	fb09 330a 	mla	r3, r9, sl, r3
 80080dc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80080e0:	42bd      	cmp	r5, r7
 80080e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080e6:	d8e5      	bhi.n	80080b4 <__multiply+0xfc>
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	50a3      	str	r3, [r4, r2]
 80080ec:	3404      	adds	r4, #4
 80080ee:	e79f      	b.n	8008030 <__multiply+0x78>
 80080f0:	3e01      	subs	r6, #1
 80080f2:	e7a1      	b.n	8008038 <__multiply+0x80>
 80080f4:	08009935 	.word	0x08009935
 80080f8:	0800999e 	.word	0x0800999e

080080fc <__pow5mult>:
 80080fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008100:	4615      	mov	r5, r2
 8008102:	f012 0203 	ands.w	r2, r2, #3
 8008106:	4607      	mov	r7, r0
 8008108:	460e      	mov	r6, r1
 800810a:	d007      	beq.n	800811c <__pow5mult+0x20>
 800810c:	4c1a      	ldr	r4, [pc, #104]	@ (8008178 <__pow5mult+0x7c>)
 800810e:	3a01      	subs	r2, #1
 8008110:	2300      	movs	r3, #0
 8008112:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008116:	f7ff fea7 	bl	8007e68 <__multadd>
 800811a:	4606      	mov	r6, r0
 800811c:	10ad      	asrs	r5, r5, #2
 800811e:	d027      	beq.n	8008170 <__pow5mult+0x74>
 8008120:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8008122:	b944      	cbnz	r4, 8008136 <__pow5mult+0x3a>
 8008124:	f240 2171 	movw	r1, #625	@ 0x271
 8008128:	4638      	mov	r0, r7
 800812a:	f7ff ff2f 	bl	8007f8c <__i2b>
 800812e:	2300      	movs	r3, #0
 8008130:	6438      	str	r0, [r7, #64]	@ 0x40
 8008132:	4604      	mov	r4, r0
 8008134:	6003      	str	r3, [r0, #0]
 8008136:	f04f 0900 	mov.w	r9, #0
 800813a:	07eb      	lsls	r3, r5, #31
 800813c:	d50a      	bpl.n	8008154 <__pow5mult+0x58>
 800813e:	4631      	mov	r1, r6
 8008140:	4622      	mov	r2, r4
 8008142:	4638      	mov	r0, r7
 8008144:	f7ff ff38 	bl	8007fb8 <__multiply>
 8008148:	4631      	mov	r1, r6
 800814a:	4680      	mov	r8, r0
 800814c:	4638      	mov	r0, r7
 800814e:	f7ff fe82 	bl	8007e56 <_Bfree>
 8008152:	4646      	mov	r6, r8
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	d00b      	beq.n	8008170 <__pow5mult+0x74>
 8008158:	6820      	ldr	r0, [r4, #0]
 800815a:	b938      	cbnz	r0, 800816c <__pow5mult+0x70>
 800815c:	4622      	mov	r2, r4
 800815e:	4621      	mov	r1, r4
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ff29 	bl	8007fb8 <__multiply>
 8008166:	6020      	str	r0, [r4, #0]
 8008168:	f8c0 9000 	str.w	r9, [r0]
 800816c:	4604      	mov	r4, r0
 800816e:	e7e4      	b.n	800813a <__pow5mult+0x3e>
 8008170:	4630      	mov	r0, r6
 8008172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008176:	bf00      	nop
 8008178:	08009a60 	.word	0x08009a60

0800817c <__lshift>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	6849      	ldr	r1, [r1, #4]
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	4607      	mov	r7, r0
 800818e:	4691      	mov	r9, r2
 8008190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008194:	f108 0601 	add.w	r6, r8, #1
 8008198:	42b3      	cmp	r3, r6
 800819a:	db0b      	blt.n	80081b4 <__lshift+0x38>
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff fe35 	bl	8007e0c <_Balloc>
 80081a2:	4605      	mov	r5, r0
 80081a4:	b948      	cbnz	r0, 80081ba <__lshift+0x3e>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <__lshift+0xd0>)
 80081aa:	4829      	ldr	r0, [pc, #164]	@ (8008250 <__lshift+0xd4>)
 80081ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081b0:	f000 f9dc 	bl	800856c <__assert_func>
 80081b4:	3101      	adds	r1, #1
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e7ee      	b.n	8008198 <__lshift+0x1c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f100 0114 	add.w	r1, r0, #20
 80081c0:	f100 0210 	add.w	r2, r0, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	4553      	cmp	r3, sl
 80081c8:	db33      	blt.n	8008232 <__lshift+0xb6>
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d0:	f104 0314 	add.w	r3, r4, #20
 80081d4:	f019 091f 	ands.w	r9, r9, #31
 80081d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e0:	d02b      	beq.n	800823a <__lshift+0xbe>
 80081e2:	f1c9 0e20 	rsb	lr, r9, #32
 80081e6:	468a      	mov	sl, r1
 80081e8:	2200      	movs	r2, #0
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	fa00 f009 	lsl.w	r0, r0, r9
 80081f0:	4310      	orrs	r0, r2
 80081f2:	f84a 0b04 	str.w	r0, [sl], #4
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	459c      	cmp	ip, r3
 80081fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008200:	d8f3      	bhi.n	80081ea <__lshift+0x6e>
 8008202:	ebac 0304 	sub.w	r3, ip, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	f104 0015 	add.w	r0, r4, #21
 8008212:	4560      	cmp	r0, ip
 8008214:	bf88      	it	hi
 8008216:	2304      	movhi	r3, #4
 8008218:	50ca      	str	r2, [r1, r3]
 800821a:	b10a      	cbz	r2, 8008220 <__lshift+0xa4>
 800821c:	f108 0602 	add.w	r6, r8, #2
 8008220:	3e01      	subs	r6, #1
 8008222:	4638      	mov	r0, r7
 8008224:	612e      	str	r6, [r5, #16]
 8008226:	4621      	mov	r1, r4
 8008228:	f7ff fe15 	bl	8007e56 <_Bfree>
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f842 0f04 	str.w	r0, [r2, #4]!
 8008236:	3301      	adds	r3, #1
 8008238:	e7c5      	b.n	80081c6 <__lshift+0x4a>
 800823a:	3904      	subs	r1, #4
 800823c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008240:	f841 2f04 	str.w	r2, [r1, #4]!
 8008244:	459c      	cmp	ip, r3
 8008246:	d8f9      	bhi.n	800823c <__lshift+0xc0>
 8008248:	e7ea      	b.n	8008220 <__lshift+0xa4>
 800824a:	bf00      	nop
 800824c:	08009935 	.word	0x08009935
 8008250:	0800999e 	.word	0x0800999e

08008254 <__mcmp>:
 8008254:	690a      	ldr	r2, [r1, #16]
 8008256:	4603      	mov	r3, r0
 8008258:	6900      	ldr	r0, [r0, #16]
 800825a:	1a80      	subs	r0, r0, r2
 800825c:	b530      	push	{r4, r5, lr}
 800825e:	d10e      	bne.n	800827e <__mcmp+0x2a>
 8008260:	3314      	adds	r3, #20
 8008262:	3114      	adds	r1, #20
 8008264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800826c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008274:	4295      	cmp	r5, r2
 8008276:	d003      	beq.n	8008280 <__mcmp+0x2c>
 8008278:	d205      	bcs.n	8008286 <__mcmp+0x32>
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	42a3      	cmp	r3, r4
 8008282:	d3f3      	bcc.n	800826c <__mcmp+0x18>
 8008284:	e7fb      	b.n	800827e <__mcmp+0x2a>
 8008286:	2001      	movs	r0, #1
 8008288:	e7f9      	b.n	800827e <__mcmp+0x2a>
	...

0800828c <__mdiff>:
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4689      	mov	r9, r1
 8008292:	4606      	mov	r6, r0
 8008294:	4611      	mov	r1, r2
 8008296:	4648      	mov	r0, r9
 8008298:	4614      	mov	r4, r2
 800829a:	f7ff ffdb 	bl	8008254 <__mcmp>
 800829e:	1e05      	subs	r5, r0, #0
 80082a0:	d112      	bne.n	80082c8 <__mdiff+0x3c>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fdb1 	bl	8007e0c <_Balloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__mdiff+0x2e>
 80082ae:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <__mdiff+0x120>)
 80082b0:	f240 2137 	movw	r1, #567	@ 0x237
 80082b4:	483e      	ldr	r0, [pc, #248]	@ (80083b0 <__mdiff+0x124>)
 80082b6:	f000 f959 	bl	800856c <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c0:	4610      	mov	r0, r2
 80082c2:	b003      	add	sp, #12
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	bfbc      	itt	lt
 80082ca:	464b      	movlt	r3, r9
 80082cc:	46a1      	movlt	r9, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082d4:	bfba      	itte	lt
 80082d6:	461c      	movlt	r4, r3
 80082d8:	2501      	movlt	r5, #1
 80082da:	2500      	movge	r5, #0
 80082dc:	f7ff fd96 	bl	8007e0c <_Balloc>
 80082e0:	4602      	mov	r2, r0
 80082e2:	b918      	cbnz	r0, 80082ec <__mdiff+0x60>
 80082e4:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <__mdiff+0x120>)
 80082e6:	f240 2145 	movw	r1, #581	@ 0x245
 80082ea:	e7e3      	b.n	80082b4 <__mdiff+0x28>
 80082ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082f0:	6926      	ldr	r6, [r4, #16]
 80082f2:	60c5      	str	r5, [r0, #12]
 80082f4:	f109 0310 	add.w	r3, r9, #16
 80082f8:	f109 0514 	add.w	r5, r9, #20
 80082fc:	f104 0e14 	add.w	lr, r4, #20
 8008300:	f100 0b14 	add.w	fp, r0, #20
 8008304:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008308:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	46d9      	mov	r9, fp
 8008310:	f04f 0c00 	mov.w	ip, #0
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	f85e 0b04 	ldr.w	r0, [lr], #4
 800831a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	fa1f f38a 	uxth.w	r3, sl
 8008324:	4619      	mov	r1, r3
 8008326:	b283      	uxth	r3, r0
 8008328:	1acb      	subs	r3, r1, r3
 800832a:	0c00      	lsrs	r0, r0, #16
 800832c:	4463      	add	r3, ip
 800832e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008332:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800833c:	4576      	cmp	r6, lr
 800833e:	f849 3b04 	str.w	r3, [r9], #4
 8008342:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008346:	d8e5      	bhi.n	8008314 <__mdiff+0x88>
 8008348:	1b33      	subs	r3, r6, r4
 800834a:	3b15      	subs	r3, #21
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	3415      	adds	r4, #21
 8008352:	3304      	adds	r3, #4
 8008354:	42a6      	cmp	r6, r4
 8008356:	bf38      	it	cc
 8008358:	2304      	movcc	r3, #4
 800835a:	441d      	add	r5, r3
 800835c:	445b      	add	r3, fp
 800835e:	461e      	mov	r6, r3
 8008360:	462c      	mov	r4, r5
 8008362:	4544      	cmp	r4, r8
 8008364:	d30e      	bcc.n	8008384 <__mdiff+0xf8>
 8008366:	f108 0103 	add.w	r1, r8, #3
 800836a:	1b49      	subs	r1, r1, r5
 800836c:	f021 0103 	bic.w	r1, r1, #3
 8008370:	3d03      	subs	r5, #3
 8008372:	45a8      	cmp	r8, r5
 8008374:	bf38      	it	cc
 8008376:	2100      	movcc	r1, #0
 8008378:	440b      	add	r3, r1
 800837a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800837e:	b191      	cbz	r1, 80083a6 <__mdiff+0x11a>
 8008380:	6117      	str	r7, [r2, #16]
 8008382:	e79d      	b.n	80082c0 <__mdiff+0x34>
 8008384:	f854 1b04 	ldr.w	r1, [r4], #4
 8008388:	46e6      	mov	lr, ip
 800838a:	0c08      	lsrs	r0, r1, #16
 800838c:	fa1c fc81 	uxtah	ip, ip, r1
 8008390:	4471      	add	r1, lr
 8008392:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008396:	b289      	uxth	r1, r1
 8008398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800839c:	f846 1b04 	str.w	r1, [r6], #4
 80083a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083a4:	e7dd      	b.n	8008362 <__mdiff+0xd6>
 80083a6:	3f01      	subs	r7, #1
 80083a8:	e7e7      	b.n	800837a <__mdiff+0xee>
 80083aa:	bf00      	nop
 80083ac:	08009935 	.word	0x08009935
 80083b0:	0800999e 	.word	0x0800999e

080083b4 <__d2b>:
 80083b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083b8:	460f      	mov	r7, r1
 80083ba:	2101      	movs	r1, #1
 80083bc:	ec59 8b10 	vmov	r8, r9, d0
 80083c0:	4616      	mov	r6, r2
 80083c2:	f7ff fd23 	bl	8007e0c <_Balloc>
 80083c6:	4604      	mov	r4, r0
 80083c8:	b930      	cbnz	r0, 80083d8 <__d2b+0x24>
 80083ca:	4602      	mov	r2, r0
 80083cc:	4b23      	ldr	r3, [pc, #140]	@ (800845c <__d2b+0xa8>)
 80083ce:	4824      	ldr	r0, [pc, #144]	@ (8008460 <__d2b+0xac>)
 80083d0:	f240 310f 	movw	r1, #783	@ 0x30f
 80083d4:	f000 f8ca 	bl	800856c <__assert_func>
 80083d8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083e0:	b10d      	cbz	r5, 80083e6 <__d2b+0x32>
 80083e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f1b8 0300 	subs.w	r3, r8, #0
 80083ec:	d023      	beq.n	8008436 <__d2b+0x82>
 80083ee:	4668      	mov	r0, sp
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f7ff fd9e 	bl	8007f32 <__lo0bits>
 80083f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083fa:	b1d0      	cbz	r0, 8008432 <__d2b+0x7e>
 80083fc:	f1c0 0320 	rsb	r3, r0, #32
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	430b      	orrs	r3, r1
 8008406:	40c2      	lsrs	r2, r0
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	61a3      	str	r3, [r4, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bf0c      	ite	eq
 8008414:	2201      	moveq	r2, #1
 8008416:	2202      	movne	r2, #2
 8008418:	6122      	str	r2, [r4, #16]
 800841a:	b1a5      	cbz	r5, 8008446 <__d2b+0x92>
 800841c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008420:	4405      	add	r5, r0
 8008422:	603d      	str	r5, [r7, #0]
 8008424:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4620      	mov	r0, r4
 800842c:	b003      	add	sp, #12
 800842e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008432:	6161      	str	r1, [r4, #20]
 8008434:	e7ea      	b.n	800840c <__d2b+0x58>
 8008436:	a801      	add	r0, sp, #4
 8008438:	f7ff fd7b 	bl	8007f32 <__lo0bits>
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	6163      	str	r3, [r4, #20]
 8008440:	3020      	adds	r0, #32
 8008442:	2201      	movs	r2, #1
 8008444:	e7e8      	b.n	8008418 <__d2b+0x64>
 8008446:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800844a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800844e:	6038      	str	r0, [r7, #0]
 8008450:	6918      	ldr	r0, [r3, #16]
 8008452:	f7ff fd4f 	bl	8007ef4 <__hi0bits>
 8008456:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800845a:	e7e5      	b.n	8008428 <__d2b+0x74>
 800845c:	08009935 	.word	0x08009935
 8008460:	0800999e 	.word	0x0800999e

08008464 <__ssputs_r>:
 8008464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008468:	688e      	ldr	r6, [r1, #8]
 800846a:	461f      	mov	r7, r3
 800846c:	42be      	cmp	r6, r7
 800846e:	680b      	ldr	r3, [r1, #0]
 8008470:	4682      	mov	sl, r0
 8008472:	460c      	mov	r4, r1
 8008474:	4690      	mov	r8, r2
 8008476:	d82d      	bhi.n	80084d4 <__ssputs_r+0x70>
 8008478:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800847c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008480:	d026      	beq.n	80084d0 <__ssputs_r+0x6c>
 8008482:	6965      	ldr	r5, [r4, #20]
 8008484:	6909      	ldr	r1, [r1, #16]
 8008486:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800848a:	eba3 0901 	sub.w	r9, r3, r1
 800848e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008492:	1c7b      	adds	r3, r7, #1
 8008494:	444b      	add	r3, r9
 8008496:	106d      	asrs	r5, r5, #1
 8008498:	429d      	cmp	r5, r3
 800849a:	bf38      	it	cc
 800849c:	461d      	movcc	r5, r3
 800849e:	0553      	lsls	r3, r2, #21
 80084a0:	d527      	bpl.n	80084f2 <__ssputs_r+0x8e>
 80084a2:	4629      	mov	r1, r5
 80084a4:	f7fd f870 	bl	8005588 <_malloc_r>
 80084a8:	4606      	mov	r6, r0
 80084aa:	b360      	cbz	r0, 8008506 <__ssputs_r+0xa2>
 80084ac:	6921      	ldr	r1, [r4, #16]
 80084ae:	464a      	mov	r2, r9
 80084b0:	f000 f84d 	bl	800854e <memcpy>
 80084b4:	89a3      	ldrh	r3, [r4, #12]
 80084b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80084ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084be:	81a3      	strh	r3, [r4, #12]
 80084c0:	6126      	str	r6, [r4, #16]
 80084c2:	6165      	str	r5, [r4, #20]
 80084c4:	444e      	add	r6, r9
 80084c6:	eba5 0509 	sub.w	r5, r5, r9
 80084ca:	6026      	str	r6, [r4, #0]
 80084cc:	60a5      	str	r5, [r4, #8]
 80084ce:	463e      	mov	r6, r7
 80084d0:	42be      	cmp	r6, r7
 80084d2:	d900      	bls.n	80084d6 <__ssputs_r+0x72>
 80084d4:	463e      	mov	r6, r7
 80084d6:	6820      	ldr	r0, [r4, #0]
 80084d8:	4632      	mov	r2, r6
 80084da:	4641      	mov	r1, r8
 80084dc:	f000 f81d 	bl	800851a <memmove>
 80084e0:	68a3      	ldr	r3, [r4, #8]
 80084e2:	1b9b      	subs	r3, r3, r6
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	4433      	add	r3, r6
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	2000      	movs	r0, #0
 80084ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f2:	462a      	mov	r2, r5
 80084f4:	f000 f8a0 	bl	8008638 <_realloc_r>
 80084f8:	4606      	mov	r6, r0
 80084fa:	2800      	cmp	r0, #0
 80084fc:	d1e0      	bne.n	80084c0 <__ssputs_r+0x5c>
 80084fe:	6921      	ldr	r1, [r4, #16]
 8008500:	4650      	mov	r0, sl
 8008502:	f7fc ff81 	bl	8005408 <_free_r>
 8008506:	230c      	movs	r3, #12
 8008508:	f8ca 3000 	str.w	r3, [sl]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e7e9      	b.n	80084ee <__ssputs_r+0x8a>

0800851a <memmove>:
 800851a:	4288      	cmp	r0, r1
 800851c:	b510      	push	{r4, lr}
 800851e:	eb01 0402 	add.w	r4, r1, r2
 8008522:	d902      	bls.n	800852a <memmove+0x10>
 8008524:	4284      	cmp	r4, r0
 8008526:	4623      	mov	r3, r4
 8008528:	d807      	bhi.n	800853a <memmove+0x20>
 800852a:	1e43      	subs	r3, r0, #1
 800852c:	42a1      	cmp	r1, r4
 800852e:	d008      	beq.n	8008542 <memmove+0x28>
 8008530:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008534:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008538:	e7f8      	b.n	800852c <memmove+0x12>
 800853a:	4402      	add	r2, r0
 800853c:	4601      	mov	r1, r0
 800853e:	428a      	cmp	r2, r1
 8008540:	d100      	bne.n	8008544 <memmove+0x2a>
 8008542:	bd10      	pop	{r4, pc}
 8008544:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008548:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800854c:	e7f7      	b.n	800853e <memmove+0x24>

0800854e <memcpy>:
 800854e:	440a      	add	r2, r1
 8008550:	4291      	cmp	r1, r2
 8008552:	f100 33ff 	add.w	r3, r0, #4294967295
 8008556:	d100      	bne.n	800855a <memcpy+0xc>
 8008558:	4770      	bx	lr
 800855a:	b510      	push	{r4, lr}
 800855c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008560:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008564:	4291      	cmp	r1, r2
 8008566:	d1f9      	bne.n	800855c <memcpy+0xe>
 8008568:	bd10      	pop	{r4, pc}
	...

0800856c <__assert_func>:
 800856c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800856e:	4614      	mov	r4, r2
 8008570:	461a      	mov	r2, r3
 8008572:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <__assert_func+0x2c>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4605      	mov	r5, r0
 8008578:	68d8      	ldr	r0, [r3, #12]
 800857a:	b14c      	cbz	r4, 8008590 <__assert_func+0x24>
 800857c:	4b07      	ldr	r3, [pc, #28]	@ (800859c <__assert_func+0x30>)
 800857e:	9100      	str	r1, [sp, #0]
 8008580:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008584:	4906      	ldr	r1, [pc, #24]	@ (80085a0 <__assert_func+0x34>)
 8008586:	462b      	mov	r3, r5
 8008588:	f000 fa0c 	bl	80089a4 <fiprintf>
 800858c:	f001 f894 	bl	80096b8 <abort>
 8008590:	4b04      	ldr	r3, [pc, #16]	@ (80085a4 <__assert_func+0x38>)
 8008592:	461c      	mov	r4, r3
 8008594:	e7f3      	b.n	800857e <__assert_func+0x12>
 8008596:	bf00      	nop
 8008598:	20000018 	.word	0x20000018
 800859c:	08009a01 	.word	0x08009a01
 80085a0:	08009a0e 	.word	0x08009a0e
 80085a4:	08009a3c 	.word	0x08009a3c

080085a8 <_calloc_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	fba1 1502 	umull	r1, r5, r1, r2
 80085ae:	b935      	cbnz	r5, 80085be <_calloc_r+0x16>
 80085b0:	f7fc ffea 	bl	8005588 <_malloc_r>
 80085b4:	4604      	mov	r4, r0
 80085b6:	b938      	cbnz	r0, 80085c8 <_calloc_r+0x20>
 80085b8:	2400      	movs	r4, #0
 80085ba:	4620      	mov	r0, r4
 80085bc:	bd38      	pop	{r3, r4, r5, pc}
 80085be:	f7fc fe8f 	bl	80052e0 <__errno>
 80085c2:	230c      	movs	r3, #12
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	e7f7      	b.n	80085b8 <_calloc_r+0x10>
 80085c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80085cc:	f022 0203 	bic.w	r2, r2, #3
 80085d0:	3a04      	subs	r2, #4
 80085d2:	2a24      	cmp	r2, #36	@ 0x24
 80085d4:	d819      	bhi.n	800860a <_calloc_r+0x62>
 80085d6:	2a13      	cmp	r2, #19
 80085d8:	d915      	bls.n	8008606 <_calloc_r+0x5e>
 80085da:	2a1b      	cmp	r2, #27
 80085dc:	e9c0 5500 	strd	r5, r5, [r0]
 80085e0:	d806      	bhi.n	80085f0 <_calloc_r+0x48>
 80085e2:	f100 0308 	add.w	r3, r0, #8
 80085e6:	2200      	movs	r2, #0
 80085e8:	e9c3 2200 	strd	r2, r2, [r3]
 80085ec:	609a      	str	r2, [r3, #8]
 80085ee:	e7e4      	b.n	80085ba <_calloc_r+0x12>
 80085f0:	2a24      	cmp	r2, #36	@ 0x24
 80085f2:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80085f6:	bf11      	iteee	ne
 80085f8:	f100 0310 	addne.w	r3, r0, #16
 80085fc:	6105      	streq	r5, [r0, #16]
 80085fe:	f100 0318 	addeq.w	r3, r0, #24
 8008602:	6145      	streq	r5, [r0, #20]
 8008604:	e7ef      	b.n	80085e6 <_calloc_r+0x3e>
 8008606:	4603      	mov	r3, r0
 8008608:	e7ed      	b.n	80085e6 <_calloc_r+0x3e>
 800860a:	4629      	mov	r1, r5
 800860c:	f7fc fe19 	bl	8005242 <memset>
 8008610:	e7d3      	b.n	80085ba <_calloc_r+0x12>

08008612 <__ascii_mbtowc>:
 8008612:	b082      	sub	sp, #8
 8008614:	b901      	cbnz	r1, 8008618 <__ascii_mbtowc+0x6>
 8008616:	a901      	add	r1, sp, #4
 8008618:	b142      	cbz	r2, 800862c <__ascii_mbtowc+0x1a>
 800861a:	b14b      	cbz	r3, 8008630 <__ascii_mbtowc+0x1e>
 800861c:	7813      	ldrb	r3, [r2, #0]
 800861e:	600b      	str	r3, [r1, #0]
 8008620:	7812      	ldrb	r2, [r2, #0]
 8008622:	1e10      	subs	r0, r2, #0
 8008624:	bf18      	it	ne
 8008626:	2001      	movne	r0, #1
 8008628:	b002      	add	sp, #8
 800862a:	4770      	bx	lr
 800862c:	4610      	mov	r0, r2
 800862e:	e7fb      	b.n	8008628 <__ascii_mbtowc+0x16>
 8008630:	f06f 0001 	mvn.w	r0, #1
 8008634:	e7f8      	b.n	8008628 <__ascii_mbtowc+0x16>
	...

08008638 <_realloc_r>:
 8008638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4682      	mov	sl, r0
 800863e:	4693      	mov	fp, r2
 8008640:	460c      	mov	r4, r1
 8008642:	b929      	cbnz	r1, 8008650 <_realloc_r+0x18>
 8008644:	4611      	mov	r1, r2
 8008646:	b003      	add	sp, #12
 8008648:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800864c:	f7fc bf9c 	b.w	8005588 <_malloc_r>
 8008650:	f7fd f9d4 	bl	80059fc <__malloc_lock>
 8008654:	f10b 080b 	add.w	r8, fp, #11
 8008658:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800865c:	f1b8 0f16 	cmp.w	r8, #22
 8008660:	f1a4 0908 	sub.w	r9, r4, #8
 8008664:	f025 0603 	bic.w	r6, r5, #3
 8008668:	d908      	bls.n	800867c <_realloc_r+0x44>
 800866a:	f038 0807 	bics.w	r8, r8, #7
 800866e:	d507      	bpl.n	8008680 <_realloc_r+0x48>
 8008670:	230c      	movs	r3, #12
 8008672:	f8ca 3000 	str.w	r3, [sl]
 8008676:	f04f 0b00 	mov.w	fp, #0
 800867a:	e032      	b.n	80086e2 <_realloc_r+0xaa>
 800867c:	f04f 0810 	mov.w	r8, #16
 8008680:	45c3      	cmp	fp, r8
 8008682:	d8f5      	bhi.n	8008670 <_realloc_r+0x38>
 8008684:	4546      	cmp	r6, r8
 8008686:	f280 8174 	bge.w	8008972 <_realloc_r+0x33a>
 800868a:	4b9e      	ldr	r3, [pc, #632]	@ (8008904 <_realloc_r+0x2cc>)
 800868c:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8008690:	eb09 0106 	add.w	r1, r9, r6
 8008694:	458c      	cmp	ip, r1
 8008696:	6848      	ldr	r0, [r1, #4]
 8008698:	d005      	beq.n	80086a6 <_realloc_r+0x6e>
 800869a:	f020 0201 	bic.w	r2, r0, #1
 800869e:	440a      	add	r2, r1
 80086a0:	6852      	ldr	r2, [r2, #4]
 80086a2:	07d7      	lsls	r7, r2, #31
 80086a4:	d449      	bmi.n	800873a <_realloc_r+0x102>
 80086a6:	f020 0003 	bic.w	r0, r0, #3
 80086aa:	458c      	cmp	ip, r1
 80086ac:	eb06 0700 	add.w	r7, r6, r0
 80086b0:	d11b      	bne.n	80086ea <_realloc_r+0xb2>
 80086b2:	f108 0210 	add.w	r2, r8, #16
 80086b6:	42ba      	cmp	r2, r7
 80086b8:	dc41      	bgt.n	800873e <_realloc_r+0x106>
 80086ba:	eb09 0208 	add.w	r2, r9, r8
 80086be:	eba7 0708 	sub.w	r7, r7, r8
 80086c2:	f047 0701 	orr.w	r7, r7, #1
 80086c6:	609a      	str	r2, [r3, #8]
 80086c8:	6057      	str	r7, [r2, #4]
 80086ca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80086ce:	f003 0301 	and.w	r3, r3, #1
 80086d2:	ea43 0308 	orr.w	r3, r3, r8
 80086d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80086da:	4650      	mov	r0, sl
 80086dc:	f7fd f994 	bl	8005a08 <__malloc_unlock>
 80086e0:	46a3      	mov	fp, r4
 80086e2:	4658      	mov	r0, fp
 80086e4:	b003      	add	sp, #12
 80086e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ea:	45b8      	cmp	r8, r7
 80086ec:	dc27      	bgt.n	800873e <_realloc_r+0x106>
 80086ee:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80086f2:	60d3      	str	r3, [r2, #12]
 80086f4:	609a      	str	r2, [r3, #8]
 80086f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80086fa:	eba7 0008 	sub.w	r0, r7, r8
 80086fe:	280f      	cmp	r0, #15
 8008700:	f003 0301 	and.w	r3, r3, #1
 8008704:	eb09 0207 	add.w	r2, r9, r7
 8008708:	f240 8135 	bls.w	8008976 <_realloc_r+0x33e>
 800870c:	eb09 0108 	add.w	r1, r9, r8
 8008710:	ea48 0303 	orr.w	r3, r8, r3
 8008714:	f040 0001 	orr.w	r0, r0, #1
 8008718:	f8c9 3004 	str.w	r3, [r9, #4]
 800871c:	6048      	str	r0, [r1, #4]
 800871e:	6853      	ldr	r3, [r2, #4]
 8008720:	f043 0301 	orr.w	r3, r3, #1
 8008724:	6053      	str	r3, [r2, #4]
 8008726:	3108      	adds	r1, #8
 8008728:	4650      	mov	r0, sl
 800872a:	f7fc fe6d 	bl	8005408 <_free_r>
 800872e:	4650      	mov	r0, sl
 8008730:	f7fd f96a 	bl	8005a08 <__malloc_unlock>
 8008734:	f109 0b08 	add.w	fp, r9, #8
 8008738:	e7d3      	b.n	80086e2 <_realloc_r+0xaa>
 800873a:	2000      	movs	r0, #0
 800873c:	4601      	mov	r1, r0
 800873e:	07ea      	lsls	r2, r5, #31
 8008740:	f100 80c7 	bmi.w	80088d2 <_realloc_r+0x29a>
 8008744:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8008748:	eba9 0505 	sub.w	r5, r9, r5
 800874c:	686a      	ldr	r2, [r5, #4]
 800874e:	f022 0203 	bic.w	r2, r2, #3
 8008752:	4432      	add	r2, r6
 8008754:	9201      	str	r2, [sp, #4]
 8008756:	2900      	cmp	r1, #0
 8008758:	f000 8086 	beq.w	8008868 <_realloc_r+0x230>
 800875c:	458c      	cmp	ip, r1
 800875e:	eb00 0702 	add.w	r7, r0, r2
 8008762:	d149      	bne.n	80087f8 <_realloc_r+0x1c0>
 8008764:	f108 0210 	add.w	r2, r8, #16
 8008768:	42ba      	cmp	r2, r7
 800876a:	dc7d      	bgt.n	8008868 <_realloc_r+0x230>
 800876c:	46ab      	mov	fp, r5
 800876e:	68ea      	ldr	r2, [r5, #12]
 8008770:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8008774:	60ca      	str	r2, [r1, #12]
 8008776:	6091      	str	r1, [r2, #8]
 8008778:	1f32      	subs	r2, r6, #4
 800877a:	2a24      	cmp	r2, #36	@ 0x24
 800877c:	d836      	bhi.n	80087ec <_realloc_r+0x1b4>
 800877e:	2a13      	cmp	r2, #19
 8008780:	d932      	bls.n	80087e8 <_realloc_r+0x1b0>
 8008782:	6821      	ldr	r1, [r4, #0]
 8008784:	60a9      	str	r1, [r5, #8]
 8008786:	6861      	ldr	r1, [r4, #4]
 8008788:	60e9      	str	r1, [r5, #12]
 800878a:	2a1b      	cmp	r2, #27
 800878c:	d81a      	bhi.n	80087c4 <_realloc_r+0x18c>
 800878e:	3408      	adds	r4, #8
 8008790:	f105 0210 	add.w	r2, r5, #16
 8008794:	6821      	ldr	r1, [r4, #0]
 8008796:	6011      	str	r1, [r2, #0]
 8008798:	6861      	ldr	r1, [r4, #4]
 800879a:	6051      	str	r1, [r2, #4]
 800879c:	68a1      	ldr	r1, [r4, #8]
 800879e:	6091      	str	r1, [r2, #8]
 80087a0:	eb05 0208 	add.w	r2, r5, r8
 80087a4:	eba7 0708 	sub.w	r7, r7, r8
 80087a8:	f047 0701 	orr.w	r7, r7, #1
 80087ac:	609a      	str	r2, [r3, #8]
 80087ae:	6057      	str	r7, [r2, #4]
 80087b0:	686b      	ldr	r3, [r5, #4]
 80087b2:	f003 0301 	and.w	r3, r3, #1
 80087b6:	ea43 0308 	orr.w	r3, r3, r8
 80087ba:	606b      	str	r3, [r5, #4]
 80087bc:	4650      	mov	r0, sl
 80087be:	f7fd f923 	bl	8005a08 <__malloc_unlock>
 80087c2:	e78e      	b.n	80086e2 <_realloc_r+0xaa>
 80087c4:	68a1      	ldr	r1, [r4, #8]
 80087c6:	6129      	str	r1, [r5, #16]
 80087c8:	68e1      	ldr	r1, [r4, #12]
 80087ca:	6169      	str	r1, [r5, #20]
 80087cc:	2a24      	cmp	r2, #36	@ 0x24
 80087ce:	bf01      	itttt	eq
 80087d0:	6922      	ldreq	r2, [r4, #16]
 80087d2:	61aa      	streq	r2, [r5, #24]
 80087d4:	6961      	ldreq	r1, [r4, #20]
 80087d6:	61e9      	streq	r1, [r5, #28]
 80087d8:	bf19      	ittee	ne
 80087da:	3410      	addne	r4, #16
 80087dc:	f105 0218 	addne.w	r2, r5, #24
 80087e0:	f105 0220 	addeq.w	r2, r5, #32
 80087e4:	3418      	addeq	r4, #24
 80087e6:	e7d5      	b.n	8008794 <_realloc_r+0x15c>
 80087e8:	465a      	mov	r2, fp
 80087ea:	e7d3      	b.n	8008794 <_realloc_r+0x15c>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4658      	mov	r0, fp
 80087f0:	f7ff fe93 	bl	800851a <memmove>
 80087f4:	4b43      	ldr	r3, [pc, #268]	@ (8008904 <_realloc_r+0x2cc>)
 80087f6:	e7d3      	b.n	80087a0 <_realloc_r+0x168>
 80087f8:	45b8      	cmp	r8, r7
 80087fa:	dc35      	bgt.n	8008868 <_realloc_r+0x230>
 80087fc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8008800:	4628      	mov	r0, r5
 8008802:	60d3      	str	r3, [r2, #12]
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800880a:	68eb      	ldr	r3, [r5, #12]
 800880c:	60d3      	str	r3, [r2, #12]
 800880e:	609a      	str	r2, [r3, #8]
 8008810:	1f32      	subs	r2, r6, #4
 8008812:	2a24      	cmp	r2, #36	@ 0x24
 8008814:	d824      	bhi.n	8008860 <_realloc_r+0x228>
 8008816:	2a13      	cmp	r2, #19
 8008818:	d908      	bls.n	800882c <_realloc_r+0x1f4>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	60ab      	str	r3, [r5, #8]
 800881e:	6863      	ldr	r3, [r4, #4]
 8008820:	60eb      	str	r3, [r5, #12]
 8008822:	2a1b      	cmp	r2, #27
 8008824:	d80a      	bhi.n	800883c <_realloc_r+0x204>
 8008826:	3408      	adds	r4, #8
 8008828:	f105 0010 	add.w	r0, r5, #16
 800882c:	6823      	ldr	r3, [r4, #0]
 800882e:	6003      	str	r3, [r0, #0]
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	6043      	str	r3, [r0, #4]
 8008834:	68a3      	ldr	r3, [r4, #8]
 8008836:	6083      	str	r3, [r0, #8]
 8008838:	46a9      	mov	r9, r5
 800883a:	e75c      	b.n	80086f6 <_realloc_r+0xbe>
 800883c:	68a3      	ldr	r3, [r4, #8]
 800883e:	612b      	str	r3, [r5, #16]
 8008840:	68e3      	ldr	r3, [r4, #12]
 8008842:	616b      	str	r3, [r5, #20]
 8008844:	2a24      	cmp	r2, #36	@ 0x24
 8008846:	bf01      	itttt	eq
 8008848:	6923      	ldreq	r3, [r4, #16]
 800884a:	61ab      	streq	r3, [r5, #24]
 800884c:	6963      	ldreq	r3, [r4, #20]
 800884e:	61eb      	streq	r3, [r5, #28]
 8008850:	bf19      	ittee	ne
 8008852:	3410      	addne	r4, #16
 8008854:	f105 0018 	addne.w	r0, r5, #24
 8008858:	f105 0020 	addeq.w	r0, r5, #32
 800885c:	3418      	addeq	r4, #24
 800885e:	e7e5      	b.n	800882c <_realloc_r+0x1f4>
 8008860:	4621      	mov	r1, r4
 8008862:	f7ff fe5a 	bl	800851a <memmove>
 8008866:	e7e7      	b.n	8008838 <_realloc_r+0x200>
 8008868:	9b01      	ldr	r3, [sp, #4]
 800886a:	4598      	cmp	r8, r3
 800886c:	dc31      	bgt.n	80088d2 <_realloc_r+0x29a>
 800886e:	4628      	mov	r0, r5
 8008870:	68eb      	ldr	r3, [r5, #12]
 8008872:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8008876:	60d3      	str	r3, [r2, #12]
 8008878:	609a      	str	r2, [r3, #8]
 800887a:	1f32      	subs	r2, r6, #4
 800887c:	2a24      	cmp	r2, #36	@ 0x24
 800887e:	d824      	bhi.n	80088ca <_realloc_r+0x292>
 8008880:	2a13      	cmp	r2, #19
 8008882:	d908      	bls.n	8008896 <_realloc_r+0x25e>
 8008884:	6823      	ldr	r3, [r4, #0]
 8008886:	60ab      	str	r3, [r5, #8]
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	60eb      	str	r3, [r5, #12]
 800888c:	2a1b      	cmp	r2, #27
 800888e:	d80a      	bhi.n	80088a6 <_realloc_r+0x26e>
 8008890:	3408      	adds	r4, #8
 8008892:	f105 0010 	add.w	r0, r5, #16
 8008896:	6823      	ldr	r3, [r4, #0]
 8008898:	6003      	str	r3, [r0, #0]
 800889a:	6863      	ldr	r3, [r4, #4]
 800889c:	6043      	str	r3, [r0, #4]
 800889e:	68a3      	ldr	r3, [r4, #8]
 80088a0:	6083      	str	r3, [r0, #8]
 80088a2:	9f01      	ldr	r7, [sp, #4]
 80088a4:	e7c8      	b.n	8008838 <_realloc_r+0x200>
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	612b      	str	r3, [r5, #16]
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	616b      	str	r3, [r5, #20]
 80088ae:	2a24      	cmp	r2, #36	@ 0x24
 80088b0:	bf01      	itttt	eq
 80088b2:	6923      	ldreq	r3, [r4, #16]
 80088b4:	61ab      	streq	r3, [r5, #24]
 80088b6:	6963      	ldreq	r3, [r4, #20]
 80088b8:	61eb      	streq	r3, [r5, #28]
 80088ba:	bf19      	ittee	ne
 80088bc:	3410      	addne	r4, #16
 80088be:	f105 0018 	addne.w	r0, r5, #24
 80088c2:	f105 0020 	addeq.w	r0, r5, #32
 80088c6:	3418      	addeq	r4, #24
 80088c8:	e7e5      	b.n	8008896 <_realloc_r+0x25e>
 80088ca:	4621      	mov	r1, r4
 80088cc:	f7ff fe25 	bl	800851a <memmove>
 80088d0:	e7e7      	b.n	80088a2 <_realloc_r+0x26a>
 80088d2:	4659      	mov	r1, fp
 80088d4:	4650      	mov	r0, sl
 80088d6:	f7fc fe57 	bl	8005588 <_malloc_r>
 80088da:	4683      	mov	fp, r0
 80088dc:	b918      	cbnz	r0, 80088e6 <_realloc_r+0x2ae>
 80088de:	4650      	mov	r0, sl
 80088e0:	f7fd f892 	bl	8005a08 <__malloc_unlock>
 80088e4:	e6c7      	b.n	8008676 <_realloc_r+0x3e>
 80088e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80088ea:	f023 0301 	bic.w	r3, r3, #1
 80088ee:	444b      	add	r3, r9
 80088f0:	f1a0 0208 	sub.w	r2, r0, #8
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d107      	bne.n	8008908 <_realloc_r+0x2d0>
 80088f8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80088fc:	f027 0703 	bic.w	r7, r7, #3
 8008900:	4437      	add	r7, r6
 8008902:	e6f8      	b.n	80086f6 <_realloc_r+0xbe>
 8008904:	2000016c 	.word	0x2000016c
 8008908:	1f32      	subs	r2, r6, #4
 800890a:	2a24      	cmp	r2, #36	@ 0x24
 800890c:	d82d      	bhi.n	800896a <_realloc_r+0x332>
 800890e:	2a13      	cmp	r2, #19
 8008910:	d928      	bls.n	8008964 <_realloc_r+0x32c>
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	6003      	str	r3, [r0, #0]
 8008916:	6863      	ldr	r3, [r4, #4]
 8008918:	6043      	str	r3, [r0, #4]
 800891a:	2a1b      	cmp	r2, #27
 800891c:	d80e      	bhi.n	800893c <_realloc_r+0x304>
 800891e:	f104 0208 	add.w	r2, r4, #8
 8008922:	f100 0308 	add.w	r3, r0, #8
 8008926:	6811      	ldr	r1, [r2, #0]
 8008928:	6019      	str	r1, [r3, #0]
 800892a:	6851      	ldr	r1, [r2, #4]
 800892c:	6059      	str	r1, [r3, #4]
 800892e:	6892      	ldr	r2, [r2, #8]
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	4621      	mov	r1, r4
 8008934:	4650      	mov	r0, sl
 8008936:	f7fc fd67 	bl	8005408 <_free_r>
 800893a:	e73f      	b.n	80087bc <_realloc_r+0x184>
 800893c:	68a3      	ldr	r3, [r4, #8]
 800893e:	6083      	str	r3, [r0, #8]
 8008940:	68e3      	ldr	r3, [r4, #12]
 8008942:	60c3      	str	r3, [r0, #12]
 8008944:	2a24      	cmp	r2, #36	@ 0x24
 8008946:	bf01      	itttt	eq
 8008948:	6923      	ldreq	r3, [r4, #16]
 800894a:	6103      	streq	r3, [r0, #16]
 800894c:	6961      	ldreq	r1, [r4, #20]
 800894e:	6141      	streq	r1, [r0, #20]
 8008950:	bf19      	ittee	ne
 8008952:	f104 0210 	addne.w	r2, r4, #16
 8008956:	f100 0310 	addne.w	r3, r0, #16
 800895a:	f104 0218 	addeq.w	r2, r4, #24
 800895e:	f100 0318 	addeq.w	r3, r0, #24
 8008962:	e7e0      	b.n	8008926 <_realloc_r+0x2ee>
 8008964:	4603      	mov	r3, r0
 8008966:	4622      	mov	r2, r4
 8008968:	e7dd      	b.n	8008926 <_realloc_r+0x2ee>
 800896a:	4621      	mov	r1, r4
 800896c:	f7ff fdd5 	bl	800851a <memmove>
 8008970:	e7df      	b.n	8008932 <_realloc_r+0x2fa>
 8008972:	4637      	mov	r7, r6
 8008974:	e6bf      	b.n	80086f6 <_realloc_r+0xbe>
 8008976:	431f      	orrs	r7, r3
 8008978:	f8c9 7004 	str.w	r7, [r9, #4]
 800897c:	6853      	ldr	r3, [r2, #4]
 800897e:	f043 0301 	orr.w	r3, r3, #1
 8008982:	6053      	str	r3, [r2, #4]
 8008984:	e6d3      	b.n	800872e <_realloc_r+0xf6>
 8008986:	bf00      	nop

08008988 <__ascii_wctomb>:
 8008988:	4603      	mov	r3, r0
 800898a:	4608      	mov	r0, r1
 800898c:	b141      	cbz	r1, 80089a0 <__ascii_wctomb+0x18>
 800898e:	2aff      	cmp	r2, #255	@ 0xff
 8008990:	d904      	bls.n	800899c <__ascii_wctomb+0x14>
 8008992:	228a      	movs	r2, #138	@ 0x8a
 8008994:	601a      	str	r2, [r3, #0]
 8008996:	f04f 30ff 	mov.w	r0, #4294967295
 800899a:	4770      	bx	lr
 800899c:	700a      	strb	r2, [r1, #0]
 800899e:	2001      	movs	r0, #1
 80089a0:	4770      	bx	lr
	...

080089a4 <fiprintf>:
 80089a4:	b40e      	push	{r1, r2, r3}
 80089a6:	b503      	push	{r0, r1, lr}
 80089a8:	4601      	mov	r1, r0
 80089aa:	ab03      	add	r3, sp, #12
 80089ac:	4805      	ldr	r0, [pc, #20]	@ (80089c4 <fiprintf+0x20>)
 80089ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80089b2:	6800      	ldr	r0, [r0, #0]
 80089b4:	9301      	str	r3, [sp, #4]
 80089b6:	f000 f807 	bl	80089c8 <_vfiprintf_r>
 80089ba:	b002      	add	sp, #8
 80089bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80089c0:	b003      	add	sp, #12
 80089c2:	4770      	bx	lr
 80089c4:	20000018 	.word	0x20000018

080089c8 <_vfiprintf_r>:
 80089c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089cc:	b0bb      	sub	sp, #236	@ 0xec
 80089ce:	460f      	mov	r7, r1
 80089d0:	4693      	mov	fp, r2
 80089d2:	461c      	mov	r4, r3
 80089d4:	461d      	mov	r5, r3
 80089d6:	9000      	str	r0, [sp, #0]
 80089d8:	b118      	cbz	r0, 80089e2 <_vfiprintf_r+0x1a>
 80089da:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80089dc:	b90b      	cbnz	r3, 80089e2 <_vfiprintf_r+0x1a>
 80089de:	f7fc fb95 	bl	800510c <__sinit>
 80089e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089e4:	07da      	lsls	r2, r3, #31
 80089e6:	d405      	bmi.n	80089f4 <_vfiprintf_r+0x2c>
 80089e8:	89bb      	ldrh	r3, [r7, #12]
 80089ea:	059b      	lsls	r3, r3, #22
 80089ec:	d402      	bmi.n	80089f4 <_vfiprintf_r+0x2c>
 80089ee:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80089f0:	f7fc fca2 	bl	8005338 <__retarget_lock_acquire_recursive>
 80089f4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80089f8:	049e      	lsls	r6, r3, #18
 80089fa:	d406      	bmi.n	8008a0a <_vfiprintf_r+0x42>
 80089fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80089fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008a02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a06:	81bb      	strh	r3, [r7, #12]
 8008a08:	667a      	str	r2, [r7, #100]	@ 0x64
 8008a0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a0c:	0498      	lsls	r0, r3, #18
 8008a0e:	d508      	bpl.n	8008a22 <_vfiprintf_r+0x5a>
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	d512      	bpl.n	8008a3a <_vfiprintf_r+0x72>
 8008a14:	f04f 33ff 	mov.w	r3, #4294967295
 8008a18:	9303      	str	r3, [sp, #12]
 8008a1a:	9803      	ldr	r0, [sp, #12]
 8008a1c:	b03b      	add	sp, #236	@ 0xec
 8008a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a22:	89bb      	ldrh	r3, [r7, #12]
 8008a24:	071a      	lsls	r2, r3, #28
 8008a26:	d501      	bpl.n	8008a2c <_vfiprintf_r+0x64>
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	b96b      	cbnz	r3, 8008a48 <_vfiprintf_r+0x80>
 8008a2c:	9800      	ldr	r0, [sp, #0]
 8008a2e:	4639      	mov	r1, r7
 8008a30:	f000 fdec 	bl	800960c <__swsetup_r>
 8008a34:	b140      	cbz	r0, 8008a48 <_vfiprintf_r+0x80>
 8008a36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a38:	e7ea      	b.n	8008a10 <_vfiprintf_r+0x48>
 8008a3a:	89bb      	ldrh	r3, [r7, #12]
 8008a3c:	059b      	lsls	r3, r3, #22
 8008a3e:	d4e9      	bmi.n	8008a14 <_vfiprintf_r+0x4c>
 8008a40:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008a42:	f7fc fc7a 	bl	800533a <__retarget_lock_release_recursive>
 8008a46:	e7e5      	b.n	8008a14 <_vfiprintf_r+0x4c>
 8008a48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008a4c:	f003 021a 	and.w	r2, r3, #26
 8008a50:	2a0a      	cmp	r2, #10
 8008a52:	d114      	bne.n	8008a7e <_vfiprintf_r+0xb6>
 8008a54:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8008a58:	2a00      	cmp	r2, #0
 8008a5a:	db10      	blt.n	8008a7e <_vfiprintf_r+0xb6>
 8008a5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008a5e:	07d6      	lsls	r6, r2, #31
 8008a60:	d404      	bmi.n	8008a6c <_vfiprintf_r+0xa4>
 8008a62:	059d      	lsls	r5, r3, #22
 8008a64:	d402      	bmi.n	8008a6c <_vfiprintf_r+0xa4>
 8008a66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8008a68:	f7fc fc67 	bl	800533a <__retarget_lock_release_recursive>
 8008a6c:	9800      	ldr	r0, [sp, #0]
 8008a6e:	4623      	mov	r3, r4
 8008a70:	465a      	mov	r2, fp
 8008a72:	4639      	mov	r1, r7
 8008a74:	b03b      	add	sp, #236	@ 0xec
 8008a76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7a:	f000 bc2d 	b.w	80092d8 <__sbprintf>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 8008a84:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8008a88:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008a8c:	ae11      	add	r6, sp, #68	@ 0x44
 8008a8e:	960e      	str	r6, [sp, #56]	@ 0x38
 8008a90:	9303      	str	r3, [sp, #12]
 8008a92:	465b      	mov	r3, fp
 8008a94:	461c      	mov	r4, r3
 8008a96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a9a:	b10a      	cbz	r2, 8008aa0 <_vfiprintf_r+0xd8>
 8008a9c:	2a25      	cmp	r2, #37	@ 0x25
 8008a9e:	d1f9      	bne.n	8008a94 <_vfiprintf_r+0xcc>
 8008aa0:	ebb4 080b 	subs.w	r8, r4, fp
 8008aa4:	d00d      	beq.n	8008ac2 <_vfiprintf_r+0xfa>
 8008aa6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008aa8:	4443      	add	r3, r8
 8008aaa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008aac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aae:	3301      	adds	r3, #1
 8008ab0:	2b07      	cmp	r3, #7
 8008ab2:	e9c6 b800 	strd	fp, r8, [r6]
 8008ab6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ab8:	dc75      	bgt.n	8008ba6 <_vfiprintf_r+0x1de>
 8008aba:	3608      	adds	r6, #8
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	4443      	add	r3, r8
 8008ac0:	9303      	str	r3, [sp, #12]
 8008ac2:	7823      	ldrb	r3, [r4, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 83c9 	beq.w	800925c <_vfiprintf_r+0x894>
 8008aca:	2300      	movs	r3, #0
 8008acc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ad0:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008ad4:	3401      	adds	r4, #1
 8008ad6:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8008ada:	469a      	mov	sl, r3
 8008adc:	46a3      	mov	fp, r4
 8008ade:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008ae2:	f1a3 0220 	sub.w	r2, r3, #32
 8008ae6:	2a5a      	cmp	r2, #90	@ 0x5a
 8008ae8:	f200 8312 	bhi.w	8009110 <_vfiprintf_r+0x748>
 8008aec:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008af0:	0310009a 	.word	0x0310009a
 8008af4:	00a20310 	.word	0x00a20310
 8008af8:	03100310 	.word	0x03100310
 8008afc:	00820310 	.word	0x00820310
 8008b00:	03100310 	.word	0x03100310
 8008b04:	00af00a5 	.word	0x00af00a5
 8008b08:	00ac0310 	.word	0x00ac0310
 8008b0c:	031000b1 	.word	0x031000b1
 8008b10:	00d000cd 	.word	0x00d000cd
 8008b14:	00d000d0 	.word	0x00d000d0
 8008b18:	00d000d0 	.word	0x00d000d0
 8008b1c:	00d000d0 	.word	0x00d000d0
 8008b20:	00d000d0 	.word	0x00d000d0
 8008b24:	03100310 	.word	0x03100310
 8008b28:	03100310 	.word	0x03100310
 8008b2c:	03100310 	.word	0x03100310
 8008b30:	03100310 	.word	0x03100310
 8008b34:	00f60310 	.word	0x00f60310
 8008b38:	03100103 	.word	0x03100103
 8008b3c:	03100310 	.word	0x03100310
 8008b40:	03100310 	.word	0x03100310
 8008b44:	03100310 	.word	0x03100310
 8008b48:	03100310 	.word	0x03100310
 8008b4c:	01510310 	.word	0x01510310
 8008b50:	03100310 	.word	0x03100310
 8008b54:	01980310 	.word	0x01980310
 8008b58:	02770310 	.word	0x02770310
 8008b5c:	03100310 	.word	0x03100310
 8008b60:	03100297 	.word	0x03100297
 8008b64:	03100310 	.word	0x03100310
 8008b68:	03100310 	.word	0x03100310
 8008b6c:	03100310 	.word	0x03100310
 8008b70:	03100310 	.word	0x03100310
 8008b74:	00f60310 	.word	0x00f60310
 8008b78:	03100105 	.word	0x03100105
 8008b7c:	03100310 	.word	0x03100310
 8008b80:	010500df 	.word	0x010500df
 8008b84:	031000f0 	.word	0x031000f0
 8008b88:	031000ea 	.word	0x031000ea
 8008b8c:	01530131 	.word	0x01530131
 8008b90:	00f00188 	.word	0x00f00188
 8008b94:	01980310 	.word	0x01980310
 8008b98:	02790098 	.word	0x02790098
 8008b9c:	03100310 	.word	0x03100310
 8008ba0:	03100065 	.word	0x03100065
 8008ba4:	0098      	.short	0x0098
 8008ba6:	9800      	ldr	r0, [sp, #0]
 8008ba8:	aa0e      	add	r2, sp, #56	@ 0x38
 8008baa:	4639      	mov	r1, r7
 8008bac:	f000 fbd4 	bl	8009358 <__sprint_r>
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	f040 8332 	bne.w	800921a <_vfiprintf_r+0x852>
 8008bb6:	ae11      	add	r6, sp, #68	@ 0x44
 8008bb8:	e780      	b.n	8008abc <_vfiprintf_r+0xf4>
 8008bba:	4a98      	ldr	r2, [pc, #608]	@ (8008e1c <_vfiprintf_r+0x454>)
 8008bbc:	9205      	str	r2, [sp, #20]
 8008bbe:	f01a 0220 	ands.w	r2, sl, #32
 8008bc2:	f000 822e 	beq.w	8009022 <_vfiprintf_r+0x65a>
 8008bc6:	3507      	adds	r5, #7
 8008bc8:	f025 0507 	bic.w	r5, r5, #7
 8008bcc:	46a8      	mov	r8, r5
 8008bce:	686d      	ldr	r5, [r5, #4]
 8008bd0:	f858 4b08 	ldr.w	r4, [r8], #8
 8008bd4:	f01a 0f01 	tst.w	sl, #1
 8008bd8:	d009      	beq.n	8008bee <_vfiprintf_r+0x226>
 8008bda:	ea54 0205 	orrs.w	r2, r4, r5
 8008bde:	bf1f      	itttt	ne
 8008be0:	2230      	movne	r2, #48	@ 0x30
 8008be2:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8008be6:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 8008bea:	f04a 0a02 	orrne.w	sl, sl, #2
 8008bee:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8008bf2:	e111      	b.n	8008e18 <_vfiprintf_r+0x450>
 8008bf4:	9800      	ldr	r0, [sp, #0]
 8008bf6:	f7fe fa23 	bl	8007040 <_localeconv_r>
 8008bfa:	6843      	ldr	r3, [r0, #4]
 8008bfc:	9308      	str	r3, [sp, #32]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f7 fae6 	bl	80001d0 <strlen>
 8008c04:	9007      	str	r0, [sp, #28]
 8008c06:	9800      	ldr	r0, [sp, #0]
 8008c08:	f7fe fa1a 	bl	8007040 <_localeconv_r>
 8008c0c:	6883      	ldr	r3, [r0, #8]
 8008c0e:	9306      	str	r3, [sp, #24]
 8008c10:	9b07      	ldr	r3, [sp, #28]
 8008c12:	b12b      	cbz	r3, 8008c20 <_vfiprintf_r+0x258>
 8008c14:	9b06      	ldr	r3, [sp, #24]
 8008c16:	b11b      	cbz	r3, 8008c20 <_vfiprintf_r+0x258>
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	b10b      	cbz	r3, 8008c20 <_vfiprintf_r+0x258>
 8008c1c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8008c20:	465c      	mov	r4, fp
 8008c22:	e75b      	b.n	8008adc <_vfiprintf_r+0x114>
 8008c24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1f9      	bne.n	8008c20 <_vfiprintf_r+0x258>
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8008c32:	e7f5      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008c34:	f04a 0a01 	orr.w	sl, sl, #1
 8008c38:	e7f2      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c3e:	9302      	str	r3, [sp, #8]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	daed      	bge.n	8008c20 <_vfiprintf_r+0x258>
 8008c44:	425b      	negs	r3, r3
 8008c46:	9302      	str	r3, [sp, #8]
 8008c48:	f04a 0a04 	orr.w	sl, sl, #4
 8008c4c:	e7e8      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008c4e:	232b      	movs	r3, #43	@ 0x2b
 8008c50:	e7ed      	b.n	8008c2e <_vfiprintf_r+0x266>
 8008c52:	465a      	mov	r2, fp
 8008c54:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5a:	d113      	bne.n	8008c84 <_vfiprintf_r+0x2bc>
 8008c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c64:	9301      	str	r3, [sp, #4]
 8008c66:	4693      	mov	fp, r2
 8008c68:	e7da      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008c6a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008c6e:	fb04 0101 	mla	r1, r4, r1, r0
 8008c72:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 8008c76:	2809      	cmp	r0, #9
 8008c78:	d9f7      	bls.n	8008c6a <_vfiprintf_r+0x2a2>
 8008c7a:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8008c7e:	9101      	str	r1, [sp, #4]
 8008c80:	4693      	mov	fp, r2
 8008c82:	e72e      	b.n	8008ae2 <_vfiprintf_r+0x11a>
 8008c84:	2100      	movs	r1, #0
 8008c86:	240a      	movs	r4, #10
 8008c88:	e7f3      	b.n	8008c72 <_vfiprintf_r+0x2aa>
 8008c8a:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 8008c8e:	e7c7      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008c90:	2200      	movs	r2, #0
 8008c92:	9202      	str	r2, [sp, #8]
 8008c94:	210a      	movs	r1, #10
 8008c96:	9a02      	ldr	r2, [sp, #8]
 8008c98:	3b30      	subs	r3, #48	@ 0x30
 8008c9a:	fb01 3302 	mla	r3, r1, r2, r3
 8008c9e:	9302      	str	r3, [sp, #8]
 8008ca0:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8008ca4:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8008ca8:	2a09      	cmp	r2, #9
 8008caa:	d9f4      	bls.n	8008c96 <_vfiprintf_r+0x2ce>
 8008cac:	e719      	b.n	8008ae2 <_vfiprintf_r+0x11a>
 8008cae:	f89b 3000 	ldrb.w	r3, [fp]
 8008cb2:	2b68      	cmp	r3, #104	@ 0x68
 8008cb4:	bf06      	itte	eq
 8008cb6:	f10b 0b01 	addeq.w	fp, fp, #1
 8008cba:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 8008cbe:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8008cc2:	e7ad      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008cc4:	f89b 3000 	ldrb.w	r3, [fp]
 8008cc8:	2b6c      	cmp	r3, #108	@ 0x6c
 8008cca:	d104      	bne.n	8008cd6 <_vfiprintf_r+0x30e>
 8008ccc:	f10b 0b01 	add.w	fp, fp, #1
 8008cd0:	f04a 0a20 	orr.w	sl, sl, #32
 8008cd4:	e7a4      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008cd6:	f04a 0a10 	orr.w	sl, sl, #16
 8008cda:	e7a1      	b.n	8008c20 <_vfiprintf_r+0x258>
 8008cdc:	46a8      	mov	r8, r5
 8008cde:	2400      	movs	r4, #0
 8008ce0:	f858 3b04 	ldr.w	r3, [r8], #4
 8008ce4:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8008ce8:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8008cec:	2301      	movs	r3, #1
 8008cee:	9301      	str	r3, [sp, #4]
 8008cf0:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8008cf4:	e0a9      	b.n	8008e4a <_vfiprintf_r+0x482>
 8008cf6:	f04a 0a10 	orr.w	sl, sl, #16
 8008cfa:	f01a 0f20 	tst.w	sl, #32
 8008cfe:	d011      	beq.n	8008d24 <_vfiprintf_r+0x35c>
 8008d00:	3507      	adds	r5, #7
 8008d02:	f025 0507 	bic.w	r5, r5, #7
 8008d06:	46a8      	mov	r8, r5
 8008d08:	686d      	ldr	r5, [r5, #4]
 8008d0a:	f858 4b08 	ldr.w	r4, [r8], #8
 8008d0e:	2d00      	cmp	r5, #0
 8008d10:	da06      	bge.n	8008d20 <_vfiprintf_r+0x358>
 8008d12:	4264      	negs	r4, r4
 8008d14:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8008d18:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008d1c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8008d20:	2301      	movs	r3, #1
 8008d22:	e048      	b.n	8008db6 <_vfiprintf_r+0x3ee>
 8008d24:	46a8      	mov	r8, r5
 8008d26:	f01a 0f10 	tst.w	sl, #16
 8008d2a:	f858 5b04 	ldr.w	r5, [r8], #4
 8008d2e:	d002      	beq.n	8008d36 <_vfiprintf_r+0x36e>
 8008d30:	462c      	mov	r4, r5
 8008d32:	17ed      	asrs	r5, r5, #31
 8008d34:	e7eb      	b.n	8008d0e <_vfiprintf_r+0x346>
 8008d36:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8008d3a:	d003      	beq.n	8008d44 <_vfiprintf_r+0x37c>
 8008d3c:	b22c      	sxth	r4, r5
 8008d3e:	f345 35c0 	sbfx	r5, r5, #15, #1
 8008d42:	e7e4      	b.n	8008d0e <_vfiprintf_r+0x346>
 8008d44:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8008d48:	d0f2      	beq.n	8008d30 <_vfiprintf_r+0x368>
 8008d4a:	b26c      	sxtb	r4, r5
 8008d4c:	f345 15c0 	sbfx	r5, r5, #7, #1
 8008d50:	e7dd      	b.n	8008d0e <_vfiprintf_r+0x346>
 8008d52:	f01a 0f20 	tst.w	sl, #32
 8008d56:	d007      	beq.n	8008d68 <_vfiprintf_r+0x3a0>
 8008d58:	9a03      	ldr	r2, [sp, #12]
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	9903      	ldr	r1, [sp, #12]
 8008d5e:	17d2      	asrs	r2, r2, #31
 8008d60:	e9c3 1200 	strd	r1, r2, [r3]
 8008d64:	3504      	adds	r5, #4
 8008d66:	e694      	b.n	8008a92 <_vfiprintf_r+0xca>
 8008d68:	f01a 0f10 	tst.w	sl, #16
 8008d6c:	d003      	beq.n	8008d76 <_vfiprintf_r+0x3ae>
 8008d6e:	682b      	ldr	r3, [r5, #0]
 8008d70:	9a03      	ldr	r2, [sp, #12]
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	e7f6      	b.n	8008d64 <_vfiprintf_r+0x39c>
 8008d76:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 8008d7a:	d003      	beq.n	8008d84 <_vfiprintf_r+0x3bc>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	9a03      	ldr	r2, [sp, #12]
 8008d80:	801a      	strh	r2, [r3, #0]
 8008d82:	e7ef      	b.n	8008d64 <_vfiprintf_r+0x39c>
 8008d84:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 8008d88:	d0f1      	beq.n	8008d6e <_vfiprintf_r+0x3a6>
 8008d8a:	682b      	ldr	r3, [r5, #0]
 8008d8c:	9a03      	ldr	r2, [sp, #12]
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	e7e8      	b.n	8008d64 <_vfiprintf_r+0x39c>
 8008d92:	f04a 0a10 	orr.w	sl, sl, #16
 8008d96:	f01a 0320 	ands.w	r3, sl, #32
 8008d9a:	d01f      	beq.n	8008ddc <_vfiprintf_r+0x414>
 8008d9c:	3507      	adds	r5, #7
 8008d9e:	f025 0507 	bic.w	r5, r5, #7
 8008da2:	46a8      	mov	r8, r5
 8008da4:	686d      	ldr	r5, [r5, #4]
 8008da6:	f858 4b08 	ldr.w	r4, [r8], #8
 8008daa:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8008dae:	2300      	movs	r3, #0
 8008db0:	2200      	movs	r2, #0
 8008db2:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8008db6:	9a01      	ldr	r2, [sp, #4]
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	f2c0 825c 	blt.w	8009276 <_vfiprintf_r+0x8ae>
 8008dbe:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8008dc2:	9204      	str	r2, [sp, #16]
 8008dc4:	ea54 0205 	orrs.w	r2, r4, r5
 8008dc8:	f040 825b 	bne.w	8009282 <_vfiprintf_r+0x8ba>
 8008dcc:	9a01      	ldr	r2, [sp, #4]
 8008dce:	2a00      	cmp	r2, #0
 8008dd0:	f000 8195 	beq.w	80090fe <_vfiprintf_r+0x736>
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	f040 8257 	bne.w	8009288 <_vfiprintf_r+0x8c0>
 8008dda:	e139      	b.n	8009050 <_vfiprintf_r+0x688>
 8008ddc:	46a8      	mov	r8, r5
 8008dde:	f01a 0510 	ands.w	r5, sl, #16
 8008de2:	f858 4b04 	ldr.w	r4, [r8], #4
 8008de6:	d001      	beq.n	8008dec <_vfiprintf_r+0x424>
 8008de8:	461d      	mov	r5, r3
 8008dea:	e7de      	b.n	8008daa <_vfiprintf_r+0x3e2>
 8008dec:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8008df0:	d001      	beq.n	8008df6 <_vfiprintf_r+0x42e>
 8008df2:	b2a4      	uxth	r4, r4
 8008df4:	e7d9      	b.n	8008daa <_vfiprintf_r+0x3e2>
 8008df6:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8008dfa:	d0d6      	beq.n	8008daa <_vfiprintf_r+0x3e2>
 8008dfc:	b2e4      	uxtb	r4, r4
 8008dfe:	e7f3      	b.n	8008de8 <_vfiprintf_r+0x420>
 8008e00:	46a8      	mov	r8, r5
 8008e02:	f647 0330 	movw	r3, #30768	@ 0x7830
 8008e06:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8008e0a:	f858 4b04 	ldr.w	r4, [r8], #4
 8008e0e:	4b03      	ldr	r3, [pc, #12]	@ (8008e1c <_vfiprintf_r+0x454>)
 8008e10:	9305      	str	r3, [sp, #20]
 8008e12:	2500      	movs	r5, #0
 8008e14:	f04a 0a02 	orr.w	sl, sl, #2
 8008e18:	2302      	movs	r3, #2
 8008e1a:	e7c9      	b.n	8008db0 <_vfiprintf_r+0x3e8>
 8008e1c:	08009904 	.word	0x08009904
 8008e20:	9b01      	ldr	r3, [sp, #4]
 8008e22:	46a8      	mov	r8, r5
 8008e24:	2500      	movs	r5, #0
 8008e26:	42ab      	cmp	r3, r5
 8008e28:	f858 9b04 	ldr.w	r9, [r8], #4
 8008e2c:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8008e30:	f2c0 80d0 	blt.w	8008fd4 <_vfiprintf_r+0x60c>
 8008e34:	461a      	mov	r2, r3
 8008e36:	4629      	mov	r1, r5
 8008e38:	4648      	mov	r0, r9
 8008e3a:	f7f7 f9d1 	bl	80001e0 <memchr>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	b118      	cbz	r0, 8008e4a <_vfiprintf_r+0x482>
 8008e42:	eba0 0309 	sub.w	r3, r0, r9
 8008e46:	9301      	str	r3, [sp, #4]
 8008e48:	462c      	mov	r4, r5
 8008e4a:	9b01      	ldr	r3, [sp, #4]
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	bfb8      	it	lt
 8008e50:	4623      	movlt	r3, r4
 8008e52:	9304      	str	r3, [sp, #16]
 8008e54:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008e58:	b113      	cbz	r3, 8008e60 <_vfiprintf_r+0x498>
 8008e5a:	9b04      	ldr	r3, [sp, #16]
 8008e5c:	3301      	adds	r3, #1
 8008e5e:	9304      	str	r3, [sp, #16]
 8008e60:	f01a 0302 	ands.w	r3, sl, #2
 8008e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e66:	bf1e      	ittt	ne
 8008e68:	9b04      	ldrne	r3, [sp, #16]
 8008e6a:	3302      	addne	r3, #2
 8008e6c:	9304      	strne	r3, [sp, #16]
 8008e6e:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 8008e72:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e74:	d11f      	bne.n	8008eb6 <_vfiprintf_r+0x4ee>
 8008e76:	9b02      	ldr	r3, [sp, #8]
 8008e78:	9a04      	ldr	r2, [sp, #16]
 8008e7a:	1a9d      	subs	r5, r3, r2
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	dd1a      	ble.n	8008eb6 <_vfiprintf_r+0x4ee>
 8008e80:	4ba8      	ldr	r3, [pc, #672]	@ (8009124 <_vfiprintf_r+0x75c>)
 8008e82:	6033      	str	r3, [r6, #0]
 8008e84:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8008e88:	2d10      	cmp	r5, #16
 8008e8a:	f102 0201 	add.w	r2, r2, #1
 8008e8e:	f106 0008 	add.w	r0, r6, #8
 8008e92:	f300 814d 	bgt.w	8009130 <_vfiprintf_r+0x768>
 8008e96:	6075      	str	r5, [r6, #4]
 8008e98:	2a07      	cmp	r2, #7
 8008e9a:	4465      	add	r5, ip
 8008e9c:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8008ea0:	f340 8159 	ble.w	8009156 <_vfiprintf_r+0x78e>
 8008ea4:	9800      	ldr	r0, [sp, #0]
 8008ea6:	aa0e      	add	r2, sp, #56	@ 0x38
 8008ea8:	4639      	mov	r1, r7
 8008eaa:	f000 fa55 	bl	8009358 <__sprint_r>
 8008eae:	2800      	cmp	r0, #0
 8008eb0:	f040 81b3 	bne.w	800921a <_vfiprintf_r+0x852>
 8008eb4:	ae11      	add	r6, sp, #68	@ 0x44
 8008eb6:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 8008eba:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8008ebe:	b161      	cbz	r1, 8008eda <_vfiprintf_r+0x512>
 8008ec0:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8008ec4:	3301      	adds	r3, #1
 8008ec6:	6031      	str	r1, [r6, #0]
 8008ec8:	2101      	movs	r1, #1
 8008eca:	440a      	add	r2, r1
 8008ecc:	2b07      	cmp	r3, #7
 8008ece:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8008ed2:	6071      	str	r1, [r6, #4]
 8008ed4:	f300 8141 	bgt.w	800915a <_vfiprintf_r+0x792>
 8008ed8:	3608      	adds	r6, #8
 8008eda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008edc:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8008ee0:	b159      	cbz	r1, 8008efa <_vfiprintf_r+0x532>
 8008ee2:	a90d      	add	r1, sp, #52	@ 0x34
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	6031      	str	r1, [r6, #0]
 8008ee8:	2102      	movs	r1, #2
 8008eea:	440a      	add	r2, r1
 8008eec:	2b07      	cmp	r3, #7
 8008eee:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8008ef2:	6071      	str	r1, [r6, #4]
 8008ef4:	f300 813a 	bgt.w	800916c <_vfiprintf_r+0x7a4>
 8008ef8:	3608      	adds	r6, #8
 8008efa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008efc:	2b80      	cmp	r3, #128	@ 0x80
 8008efe:	d11f      	bne.n	8008f40 <_vfiprintf_r+0x578>
 8008f00:	9b02      	ldr	r3, [sp, #8]
 8008f02:	9a04      	ldr	r2, [sp, #16]
 8008f04:	1a9d      	subs	r5, r3, r2
 8008f06:	2d00      	cmp	r5, #0
 8008f08:	dd1a      	ble.n	8008f40 <_vfiprintf_r+0x578>
 8008f0a:	4b87      	ldr	r3, [pc, #540]	@ (8009128 <_vfiprintf_r+0x760>)
 8008f0c:	6033      	str	r3, [r6, #0]
 8008f0e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8008f12:	2d10      	cmp	r5, #16
 8008f14:	f102 0201 	add.w	r2, r2, #1
 8008f18:	f106 0008 	add.w	r0, r6, #8
 8008f1c:	f300 812f 	bgt.w	800917e <_vfiprintf_r+0x7b6>
 8008f20:	6075      	str	r5, [r6, #4]
 8008f22:	2a07      	cmp	r2, #7
 8008f24:	4465      	add	r5, ip
 8008f26:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8008f2a:	f340 813b 	ble.w	80091a4 <_vfiprintf_r+0x7dc>
 8008f2e:	9800      	ldr	r0, [sp, #0]
 8008f30:	aa0e      	add	r2, sp, #56	@ 0x38
 8008f32:	4639      	mov	r1, r7
 8008f34:	f000 fa10 	bl	8009358 <__sprint_r>
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	f040 816e 	bne.w	800921a <_vfiprintf_r+0x852>
 8008f3e:	ae11      	add	r6, sp, #68	@ 0x44
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	1ae4      	subs	r4, r4, r3
 8008f44:	2c00      	cmp	r4, #0
 8008f46:	dd1a      	ble.n	8008f7e <_vfiprintf_r+0x5b6>
 8008f48:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8008f4c:	4876      	ldr	r0, [pc, #472]	@ (8009128 <_vfiprintf_r+0x760>)
 8008f4e:	6030      	str	r0, [r6, #0]
 8008f50:	2c10      	cmp	r4, #16
 8008f52:	f103 0301 	add.w	r3, r3, #1
 8008f56:	f106 0108 	add.w	r1, r6, #8
 8008f5a:	f300 8125 	bgt.w	80091a8 <_vfiprintf_r+0x7e0>
 8008f5e:	6074      	str	r4, [r6, #4]
 8008f60:	2b07      	cmp	r3, #7
 8008f62:	4414      	add	r4, r2
 8008f64:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 8008f68:	f340 812f 	ble.w	80091ca <_vfiprintf_r+0x802>
 8008f6c:	9800      	ldr	r0, [sp, #0]
 8008f6e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008f70:	4639      	mov	r1, r7
 8008f72:	f000 f9f1 	bl	8009358 <__sprint_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	f040 814f 	bne.w	800921a <_vfiprintf_r+0x852>
 8008f7c:	ae11      	add	r6, sp, #68	@ 0x44
 8008f7e:	9b01      	ldr	r3, [sp, #4]
 8008f80:	9a01      	ldr	r2, [sp, #4]
 8008f82:	6073      	str	r3, [r6, #4]
 8008f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008f86:	f8c6 9000 	str.w	r9, [r6]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f90:	3301      	adds	r3, #1
 8008f92:	2b07      	cmp	r3, #7
 8008f94:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008f96:	f300 811a 	bgt.w	80091ce <_vfiprintf_r+0x806>
 8008f9a:	f106 0308 	add.w	r3, r6, #8
 8008f9e:	f01a 0f04 	tst.w	sl, #4
 8008fa2:	f040 811c 	bne.w	80091de <_vfiprintf_r+0x816>
 8008fa6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008faa:	9904      	ldr	r1, [sp, #16]
 8008fac:	428a      	cmp	r2, r1
 8008fae:	bfac      	ite	ge
 8008fb0:	189b      	addge	r3, r3, r2
 8008fb2:	185b      	addlt	r3, r3, r1
 8008fb4:	9303      	str	r3, [sp, #12]
 8008fb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008fb8:	b13b      	cbz	r3, 8008fca <_vfiprintf_r+0x602>
 8008fba:	9800      	ldr	r0, [sp, #0]
 8008fbc:	aa0e      	add	r2, sp, #56	@ 0x38
 8008fbe:	4639      	mov	r1, r7
 8008fc0:	f000 f9ca 	bl	8009358 <__sprint_r>
 8008fc4:	2800      	cmp	r0, #0
 8008fc6:	f040 8128 	bne.w	800921a <_vfiprintf_r+0x852>
 8008fca:	2300      	movs	r3, #0
 8008fcc:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fce:	4645      	mov	r5, r8
 8008fd0:	ae11      	add	r6, sp, #68	@ 0x44
 8008fd2:	e55e      	b.n	8008a92 <_vfiprintf_r+0xca>
 8008fd4:	4648      	mov	r0, r9
 8008fd6:	f7f7 f8fb 	bl	80001d0 <strlen>
 8008fda:	9001      	str	r0, [sp, #4]
 8008fdc:	e734      	b.n	8008e48 <_vfiprintf_r+0x480>
 8008fde:	f04a 0a10 	orr.w	sl, sl, #16
 8008fe2:	f01a 0320 	ands.w	r3, sl, #32
 8008fe6:	d008      	beq.n	8008ffa <_vfiprintf_r+0x632>
 8008fe8:	3507      	adds	r5, #7
 8008fea:	f025 0507 	bic.w	r5, r5, #7
 8008fee:	46a8      	mov	r8, r5
 8008ff0:	686d      	ldr	r5, [r5, #4]
 8008ff2:	f858 4b08 	ldr.w	r4, [r8], #8
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e6da      	b.n	8008db0 <_vfiprintf_r+0x3e8>
 8008ffa:	46a8      	mov	r8, r5
 8008ffc:	f01a 0510 	ands.w	r5, sl, #16
 8009000:	f858 4b04 	ldr.w	r4, [r8], #4
 8009004:	d001      	beq.n	800900a <_vfiprintf_r+0x642>
 8009006:	461d      	mov	r5, r3
 8009008:	e7f5      	b.n	8008ff6 <_vfiprintf_r+0x62e>
 800900a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 800900e:	d001      	beq.n	8009014 <_vfiprintf_r+0x64c>
 8009010:	b2a4      	uxth	r4, r4
 8009012:	e7f0      	b.n	8008ff6 <_vfiprintf_r+0x62e>
 8009014:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8009018:	d0ed      	beq.n	8008ff6 <_vfiprintf_r+0x62e>
 800901a:	b2e4      	uxtb	r4, r4
 800901c:	e7f3      	b.n	8009006 <_vfiprintf_r+0x63e>
 800901e:	4a43      	ldr	r2, [pc, #268]	@ (800912c <_vfiprintf_r+0x764>)
 8009020:	e5cc      	b.n	8008bbc <_vfiprintf_r+0x1f4>
 8009022:	46a8      	mov	r8, r5
 8009024:	f01a 0510 	ands.w	r5, sl, #16
 8009028:	f858 4b04 	ldr.w	r4, [r8], #4
 800902c:	d001      	beq.n	8009032 <_vfiprintf_r+0x66a>
 800902e:	4615      	mov	r5, r2
 8009030:	e5d0      	b.n	8008bd4 <_vfiprintf_r+0x20c>
 8009032:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8009036:	d001      	beq.n	800903c <_vfiprintf_r+0x674>
 8009038:	b2a4      	uxth	r4, r4
 800903a:	e5cb      	b.n	8008bd4 <_vfiprintf_r+0x20c>
 800903c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8009040:	f43f adc8 	beq.w	8008bd4 <_vfiprintf_r+0x20c>
 8009044:	b2e4      	uxtb	r4, r4
 8009046:	e7f2      	b.n	800902e <_vfiprintf_r+0x666>
 8009048:	2c0a      	cmp	r4, #10
 800904a:	f175 0300 	sbcs.w	r3, r5, #0
 800904e:	d206      	bcs.n	800905e <_vfiprintf_r+0x696>
 8009050:	3430      	adds	r4, #48	@ 0x30
 8009052:	b2e4      	uxtb	r4, r4
 8009054:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8009058:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 800905c:	e130      	b.n	80092c0 <_vfiprintf_r+0x8f8>
 800905e:	ab3a      	add	r3, sp, #232	@ 0xe8
 8009060:	9309      	str	r3, [sp, #36]	@ 0x24
 8009062:	9b04      	ldr	r3, [sp, #16]
 8009064:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009068:	f04f 0a00 	mov.w	sl, #0
 800906c:	930a      	str	r3, [sp, #40]	@ 0x28
 800906e:	220a      	movs	r2, #10
 8009070:	2300      	movs	r3, #0
 8009072:	4620      	mov	r0, r4
 8009074:	4629      	mov	r1, r5
 8009076:	f7f7 fd97 	bl	8000ba8 <__aeabi_uldivmod>
 800907a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800907c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800907e:	3230      	adds	r2, #48	@ 0x30
 8009080:	f801 2c01 	strb.w	r2, [r1, #-1]
 8009084:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009086:	4603      	mov	r3, r0
 8009088:	f101 39ff 	add.w	r9, r1, #4294967295
 800908c:	f10a 0a01 	add.w	sl, sl, #1
 8009090:	b312      	cbz	r2, 80090d8 <_vfiprintf_r+0x710>
 8009092:	9a06      	ldr	r2, [sp, #24]
 8009094:	7812      	ldrb	r2, [r2, #0]
 8009096:	4552      	cmp	r2, sl
 8009098:	d11e      	bne.n	80090d8 <_vfiprintf_r+0x710>
 800909a:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 800909e:	d01b      	beq.n	80090d8 <_vfiprintf_r+0x710>
 80090a0:	2c0a      	cmp	r4, #10
 80090a2:	f175 0500 	sbcs.w	r5, r5, #0
 80090a6:	f0c0 810b 	bcc.w	80092c0 <_vfiprintf_r+0x8f8>
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80090ae:	eba9 0903 	sub.w	r9, r9, r3
 80090b2:	461a      	mov	r2, r3
 80090b4:	9908      	ldr	r1, [sp, #32]
 80090b6:	4648      	mov	r0, r9
 80090b8:	f7fd ffaf 	bl	800701a <strncpy>
 80090bc:	9b06      	ldr	r3, [sp, #24]
 80090be:	785a      	ldrb	r2, [r3, #1]
 80090c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090c2:	b112      	cbz	r2, 80090ca <_vfiprintf_r+0x702>
 80090c4:	9a06      	ldr	r2, [sp, #24]
 80090c6:	3201      	adds	r2, #1
 80090c8:	9206      	str	r2, [sp, #24]
 80090ca:	f04f 0a00 	mov.w	sl, #0
 80090ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80090d0:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 80090d4:	461c      	mov	r4, r3
 80090d6:	e7ca      	b.n	800906e <_vfiprintf_r+0x6a6>
 80090d8:	2c0a      	cmp	r4, #10
 80090da:	f175 0500 	sbcs.w	r5, r5, #0
 80090de:	d2f6      	bcs.n	80090ce <_vfiprintf_r+0x706>
 80090e0:	e0ee      	b.n	80092c0 <_vfiprintf_r+0x8f8>
 80090e2:	f004 030f 	and.w	r3, r4, #15
 80090e6:	9a05      	ldr	r2, [sp, #20]
 80090e8:	0924      	lsrs	r4, r4, #4
 80090ea:	5cd3      	ldrb	r3, [r2, r3]
 80090ec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80090f0:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 80090f4:	092d      	lsrs	r5, r5, #4
 80090f6:	ea54 0305 	orrs.w	r3, r4, r5
 80090fa:	d1f2      	bne.n	80090e2 <_vfiprintf_r+0x71a>
 80090fc:	e0e0      	b.n	80092c0 <_vfiprintf_r+0x8f8>
 80090fe:	b923      	cbnz	r3, 800910a <_vfiprintf_r+0x742>
 8009100:	f01a 0f01 	tst.w	sl, #1
 8009104:	d001      	beq.n	800910a <_vfiprintf_r+0x742>
 8009106:	2430      	movs	r4, #48	@ 0x30
 8009108:	e7a4      	b.n	8009054 <_vfiprintf_r+0x68c>
 800910a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800910e:	e0d7      	b.n	80092c0 <_vfiprintf_r+0x8f8>
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80a3 	beq.w	800925c <_vfiprintf_r+0x894>
 8009116:	2400      	movs	r4, #0
 8009118:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 800911c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8009120:	46a8      	mov	r8, r5
 8009122:	e5e3      	b.n	8008cec <_vfiprintf_r+0x324>
 8009124:	08009c71 	.word	0x08009c71
 8009128:	08009c61 	.word	0x08009c61
 800912c:	08009915 	.word	0x08009915
 8009130:	2110      	movs	r1, #16
 8009132:	6071      	str	r1, [r6, #4]
 8009134:	2a07      	cmp	r2, #7
 8009136:	4461      	add	r1, ip
 8009138:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800913c:	dd08      	ble.n	8009150 <_vfiprintf_r+0x788>
 800913e:	9800      	ldr	r0, [sp, #0]
 8009140:	aa0e      	add	r2, sp, #56	@ 0x38
 8009142:	4639      	mov	r1, r7
 8009144:	f000 f908 	bl	8009358 <__sprint_r>
 8009148:	2800      	cmp	r0, #0
 800914a:	d166      	bne.n	800921a <_vfiprintf_r+0x852>
 800914c:	4b60      	ldr	r3, [pc, #384]	@ (80092d0 <_vfiprintf_r+0x908>)
 800914e:	a811      	add	r0, sp, #68	@ 0x44
 8009150:	3d10      	subs	r5, #16
 8009152:	4606      	mov	r6, r0
 8009154:	e695      	b.n	8008e82 <_vfiprintf_r+0x4ba>
 8009156:	4606      	mov	r6, r0
 8009158:	e6ad      	b.n	8008eb6 <_vfiprintf_r+0x4ee>
 800915a:	9800      	ldr	r0, [sp, #0]
 800915c:	aa0e      	add	r2, sp, #56	@ 0x38
 800915e:	4639      	mov	r1, r7
 8009160:	f000 f8fa 	bl	8009358 <__sprint_r>
 8009164:	2800      	cmp	r0, #0
 8009166:	d158      	bne.n	800921a <_vfiprintf_r+0x852>
 8009168:	ae11      	add	r6, sp, #68	@ 0x44
 800916a:	e6b6      	b.n	8008eda <_vfiprintf_r+0x512>
 800916c:	9800      	ldr	r0, [sp, #0]
 800916e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009170:	4639      	mov	r1, r7
 8009172:	f000 f8f1 	bl	8009358 <__sprint_r>
 8009176:	2800      	cmp	r0, #0
 8009178:	d14f      	bne.n	800921a <_vfiprintf_r+0x852>
 800917a:	ae11      	add	r6, sp, #68	@ 0x44
 800917c:	e6bd      	b.n	8008efa <_vfiprintf_r+0x532>
 800917e:	2110      	movs	r1, #16
 8009180:	6071      	str	r1, [r6, #4]
 8009182:	2a07      	cmp	r2, #7
 8009184:	4461      	add	r1, ip
 8009186:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 800918a:	dd08      	ble.n	800919e <_vfiprintf_r+0x7d6>
 800918c:	9800      	ldr	r0, [sp, #0]
 800918e:	aa0e      	add	r2, sp, #56	@ 0x38
 8009190:	4639      	mov	r1, r7
 8009192:	f000 f8e1 	bl	8009358 <__sprint_r>
 8009196:	2800      	cmp	r0, #0
 8009198:	d13f      	bne.n	800921a <_vfiprintf_r+0x852>
 800919a:	4b4e      	ldr	r3, [pc, #312]	@ (80092d4 <_vfiprintf_r+0x90c>)
 800919c:	a811      	add	r0, sp, #68	@ 0x44
 800919e:	3d10      	subs	r5, #16
 80091a0:	4606      	mov	r6, r0
 80091a2:	e6b3      	b.n	8008f0c <_vfiprintf_r+0x544>
 80091a4:	4606      	mov	r6, r0
 80091a6:	e6cb      	b.n	8008f40 <_vfiprintf_r+0x578>
 80091a8:	2010      	movs	r0, #16
 80091aa:	4402      	add	r2, r0
 80091ac:	2b07      	cmp	r3, #7
 80091ae:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 80091b2:	6070      	str	r0, [r6, #4]
 80091b4:	dd06      	ble.n	80091c4 <_vfiprintf_r+0x7fc>
 80091b6:	9800      	ldr	r0, [sp, #0]
 80091b8:	aa0e      	add	r2, sp, #56	@ 0x38
 80091ba:	4639      	mov	r1, r7
 80091bc:	f000 f8cc 	bl	8009358 <__sprint_r>
 80091c0:	bb58      	cbnz	r0, 800921a <_vfiprintf_r+0x852>
 80091c2:	a911      	add	r1, sp, #68	@ 0x44
 80091c4:	3c10      	subs	r4, #16
 80091c6:	460e      	mov	r6, r1
 80091c8:	e6be      	b.n	8008f48 <_vfiprintf_r+0x580>
 80091ca:	460e      	mov	r6, r1
 80091cc:	e6d7      	b.n	8008f7e <_vfiprintf_r+0x5b6>
 80091ce:	9800      	ldr	r0, [sp, #0]
 80091d0:	aa0e      	add	r2, sp, #56	@ 0x38
 80091d2:	4639      	mov	r1, r7
 80091d4:	f000 f8c0 	bl	8009358 <__sprint_r>
 80091d8:	b9f8      	cbnz	r0, 800921a <_vfiprintf_r+0x852>
 80091da:	ab11      	add	r3, sp, #68	@ 0x44
 80091dc:	e6df      	b.n	8008f9e <_vfiprintf_r+0x5d6>
 80091de:	9a02      	ldr	r2, [sp, #8]
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	1a54      	subs	r4, r2, r1
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	f77f aede 	ble.w	8008fa6 <_vfiprintf_r+0x5de>
 80091ea:	4d39      	ldr	r5, [pc, #228]	@ (80092d0 <_vfiprintf_r+0x908>)
 80091ec:	2610      	movs	r6, #16
 80091ee:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 80091f2:	2c10      	cmp	r4, #16
 80091f4:	f102 0201 	add.w	r2, r2, #1
 80091f8:	601d      	str	r5, [r3, #0]
 80091fa:	dc1d      	bgt.n	8009238 <_vfiprintf_r+0x870>
 80091fc:	605c      	str	r4, [r3, #4]
 80091fe:	2a07      	cmp	r2, #7
 8009200:	440c      	add	r4, r1
 8009202:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8009206:	f77f aece 	ble.w	8008fa6 <_vfiprintf_r+0x5de>
 800920a:	9800      	ldr	r0, [sp, #0]
 800920c:	aa0e      	add	r2, sp, #56	@ 0x38
 800920e:	4639      	mov	r1, r7
 8009210:	f000 f8a2 	bl	8009358 <__sprint_r>
 8009214:	2800      	cmp	r0, #0
 8009216:	f43f aec6 	beq.w	8008fa6 <_vfiprintf_r+0x5de>
 800921a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800921c:	07d9      	lsls	r1, r3, #31
 800921e:	d405      	bmi.n	800922c <_vfiprintf_r+0x864>
 8009220:	89bb      	ldrh	r3, [r7, #12]
 8009222:	059a      	lsls	r2, r3, #22
 8009224:	d402      	bmi.n	800922c <_vfiprintf_r+0x864>
 8009226:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009228:	f7fc f887 	bl	800533a <__retarget_lock_release_recursive>
 800922c:	89bb      	ldrh	r3, [r7, #12]
 800922e:	065b      	lsls	r3, r3, #25
 8009230:	f57f abf3 	bpl.w	8008a1a <_vfiprintf_r+0x52>
 8009234:	f7ff bbee 	b.w	8008a14 <_vfiprintf_r+0x4c>
 8009238:	3110      	adds	r1, #16
 800923a:	2a07      	cmp	r2, #7
 800923c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8009240:	605e      	str	r6, [r3, #4]
 8009242:	dc02      	bgt.n	800924a <_vfiprintf_r+0x882>
 8009244:	3308      	adds	r3, #8
 8009246:	3c10      	subs	r4, #16
 8009248:	e7d1      	b.n	80091ee <_vfiprintf_r+0x826>
 800924a:	9800      	ldr	r0, [sp, #0]
 800924c:	aa0e      	add	r2, sp, #56	@ 0x38
 800924e:	4639      	mov	r1, r7
 8009250:	f000 f882 	bl	8009358 <__sprint_r>
 8009254:	2800      	cmp	r0, #0
 8009256:	d1e0      	bne.n	800921a <_vfiprintf_r+0x852>
 8009258:	ab11      	add	r3, sp, #68	@ 0x44
 800925a:	e7f4      	b.n	8009246 <_vfiprintf_r+0x87e>
 800925c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800925e:	b913      	cbnz	r3, 8009266 <_vfiprintf_r+0x89e>
 8009260:	2300      	movs	r3, #0
 8009262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009264:	e7d9      	b.n	800921a <_vfiprintf_r+0x852>
 8009266:	9800      	ldr	r0, [sp, #0]
 8009268:	aa0e      	add	r2, sp, #56	@ 0x38
 800926a:	4639      	mov	r1, r7
 800926c:	f000 f874 	bl	8009358 <__sprint_r>
 8009270:	2800      	cmp	r0, #0
 8009272:	d0f5      	beq.n	8009260 <_vfiprintf_r+0x898>
 8009274:	e7d1      	b.n	800921a <_vfiprintf_r+0x852>
 8009276:	ea54 0205 	orrs.w	r2, r4, r5
 800927a:	f8cd a010 	str.w	sl, [sp, #16]
 800927e:	f43f ada9 	beq.w	8008dd4 <_vfiprintf_r+0x40c>
 8009282:	2b01      	cmp	r3, #1
 8009284:	f43f aee0 	beq.w	8009048 <_vfiprintf_r+0x680>
 8009288:	2b02      	cmp	r3, #2
 800928a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 800928e:	f43f af28 	beq.w	80090e2 <_vfiprintf_r+0x71a>
 8009292:	f004 0307 	and.w	r3, r4, #7
 8009296:	08e4      	lsrs	r4, r4, #3
 8009298:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 800929c:	08ed      	lsrs	r5, r5, #3
 800929e:	3330      	adds	r3, #48	@ 0x30
 80092a0:	ea54 0105 	orrs.w	r1, r4, r5
 80092a4:	464a      	mov	r2, r9
 80092a6:	f809 3d01 	strb.w	r3, [r9, #-1]!
 80092aa:	d1f2      	bne.n	8009292 <_vfiprintf_r+0x8ca>
 80092ac:	9904      	ldr	r1, [sp, #16]
 80092ae:	07c8      	lsls	r0, r1, #31
 80092b0:	d506      	bpl.n	80092c0 <_vfiprintf_r+0x8f8>
 80092b2:	2b30      	cmp	r3, #48	@ 0x30
 80092b4:	d004      	beq.n	80092c0 <_vfiprintf_r+0x8f8>
 80092b6:	2330      	movs	r3, #48	@ 0x30
 80092b8:	f809 3c01 	strb.w	r3, [r9, #-1]
 80092bc:	f1a2 0902 	sub.w	r9, r2, #2
 80092c0:	ab3a      	add	r3, sp, #232	@ 0xe8
 80092c2:	eba3 0309 	sub.w	r3, r3, r9
 80092c6:	9c01      	ldr	r4, [sp, #4]
 80092c8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80092cc:	9301      	str	r3, [sp, #4]
 80092ce:	e5bc      	b.n	8008e4a <_vfiprintf_r+0x482>
 80092d0:	08009c71 	.word	0x08009c71
 80092d4:	08009c61 	.word	0x08009c61

080092d8 <__sbprintf>:
 80092d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80092da:	461f      	mov	r7, r3
 80092dc:	898b      	ldrh	r3, [r1, #12]
 80092de:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 80092e2:	f023 0302 	bic.w	r3, r3, #2
 80092e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80092ea:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 80092ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80092ee:	89cb      	ldrh	r3, [r1, #14]
 80092f0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80092f4:	69cb      	ldr	r3, [r1, #28]
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 80092fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80092fc:	ab1a      	add	r3, sp, #104	@ 0x68
 80092fe:	9300      	str	r3, [sp, #0]
 8009300:	9304      	str	r3, [sp, #16]
 8009302:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009306:	4615      	mov	r5, r2
 8009308:	4606      	mov	r6, r0
 800930a:	9302      	str	r3, [sp, #8]
 800930c:	9305      	str	r3, [sp, #20]
 800930e:	a816      	add	r0, sp, #88	@ 0x58
 8009310:	2300      	movs	r3, #0
 8009312:	460c      	mov	r4, r1
 8009314:	9306      	str	r3, [sp, #24]
 8009316:	f7fc f80d 	bl	8005334 <__retarget_lock_init_recursive>
 800931a:	462a      	mov	r2, r5
 800931c:	463b      	mov	r3, r7
 800931e:	4669      	mov	r1, sp
 8009320:	4630      	mov	r0, r6
 8009322:	f7ff fb51 	bl	80089c8 <_vfiprintf_r>
 8009326:	1e05      	subs	r5, r0, #0
 8009328:	db07      	blt.n	800933a <__sbprintf+0x62>
 800932a:	4669      	mov	r1, sp
 800932c:	4630      	mov	r0, r6
 800932e:	f7fd fe4f 	bl	8006fd0 <_fflush_r>
 8009332:	2800      	cmp	r0, #0
 8009334:	bf18      	it	ne
 8009336:	f04f 35ff 	movne.w	r5, #4294967295
 800933a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800933e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8009340:	065b      	lsls	r3, r3, #25
 8009342:	bf42      	ittt	mi
 8009344:	89a3      	ldrhmi	r3, [r4, #12]
 8009346:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 800934a:	81a3      	strhmi	r3, [r4, #12]
 800934c:	f7fb fff3 	bl	8005336 <__retarget_lock_close_recursive>
 8009350:	4628      	mov	r0, r5
 8009352:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8009356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009358 <__sprint_r>:
 8009358:	6893      	ldr	r3, [r2, #8]
 800935a:	b510      	push	{r4, lr}
 800935c:	4614      	mov	r4, r2
 800935e:	b133      	cbz	r3, 800936e <__sprint_r+0x16>
 8009360:	f000 f808 	bl	8009374 <__sfvwrite_r>
 8009364:	2300      	movs	r3, #0
 8009366:	60a3      	str	r3, [r4, #8]
 8009368:	2300      	movs	r3, #0
 800936a:	6063      	str	r3, [r4, #4]
 800936c:	bd10      	pop	{r4, pc}
 800936e:	4618      	mov	r0, r3
 8009370:	e7fa      	b.n	8009368 <__sprint_r+0x10>
	...

08009374 <__sfvwrite_r>:
 8009374:	6893      	ldr	r3, [r2, #8]
 8009376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	4691      	mov	r9, r2
 8009380:	b91b      	cbnz	r3, 800938a <__sfvwrite_r+0x16>
 8009382:	2000      	movs	r0, #0
 8009384:	b003      	add	sp, #12
 8009386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800938a:	898b      	ldrh	r3, [r1, #12]
 800938c:	0718      	lsls	r0, r3, #28
 800938e:	d550      	bpl.n	8009432 <__sfvwrite_r+0xbe>
 8009390:	690b      	ldr	r3, [r1, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d04d      	beq.n	8009432 <__sfvwrite_r+0xbe>
 8009396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800939a:	f8d9 8000 	ldr.w	r8, [r9]
 800939e:	f013 0702 	ands.w	r7, r3, #2
 80093a2:	d16b      	bne.n	800947c <__sfvwrite_r+0x108>
 80093a4:	f013 0301 	ands.w	r3, r3, #1
 80093a8:	f000 809c 	beq.w	80094e4 <__sfvwrite_r+0x170>
 80093ac:	4638      	mov	r0, r7
 80093ae:	46ba      	mov	sl, r7
 80093b0:	46bb      	mov	fp, r7
 80093b2:	f1bb 0f00 	cmp.w	fp, #0
 80093b6:	f000 8103 	beq.w	80095c0 <__sfvwrite_r+0x24c>
 80093ba:	b950      	cbnz	r0, 80093d2 <__sfvwrite_r+0x5e>
 80093bc:	465a      	mov	r2, fp
 80093be:	210a      	movs	r1, #10
 80093c0:	4650      	mov	r0, sl
 80093c2:	f7f6 ff0d 	bl	80001e0 <memchr>
 80093c6:	2800      	cmp	r0, #0
 80093c8:	f000 8100 	beq.w	80095cc <__sfvwrite_r+0x258>
 80093cc:	3001      	adds	r0, #1
 80093ce:	eba0 070a 	sub.w	r7, r0, sl
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	6921      	ldr	r1, [r4, #16]
 80093d6:	68a5      	ldr	r5, [r4, #8]
 80093d8:	6963      	ldr	r3, [r4, #20]
 80093da:	455f      	cmp	r7, fp
 80093dc:	463a      	mov	r2, r7
 80093de:	bf28      	it	cs
 80093e0:	465a      	movcs	r2, fp
 80093e2:	4288      	cmp	r0, r1
 80093e4:	f240 80f5 	bls.w	80095d2 <__sfvwrite_r+0x25e>
 80093e8:	441d      	add	r5, r3
 80093ea:	42aa      	cmp	r2, r5
 80093ec:	f340 80f1 	ble.w	80095d2 <__sfvwrite_r+0x25e>
 80093f0:	4651      	mov	r1, sl
 80093f2:	462a      	mov	r2, r5
 80093f4:	f7ff f891 	bl	800851a <memmove>
 80093f8:	6823      	ldr	r3, [r4, #0]
 80093fa:	442b      	add	r3, r5
 80093fc:	6023      	str	r3, [r4, #0]
 80093fe:	4621      	mov	r1, r4
 8009400:	4630      	mov	r0, r6
 8009402:	f7fd fde5 	bl	8006fd0 <_fflush_r>
 8009406:	2800      	cmp	r0, #0
 8009408:	d167      	bne.n	80094da <__sfvwrite_r+0x166>
 800940a:	1b7f      	subs	r7, r7, r5
 800940c:	f040 80f9 	bne.w	8009602 <__sfvwrite_r+0x28e>
 8009410:	4621      	mov	r1, r4
 8009412:	4630      	mov	r0, r6
 8009414:	f7fd fddc 	bl	8006fd0 <_fflush_r>
 8009418:	2800      	cmp	r0, #0
 800941a:	d15e      	bne.n	80094da <__sfvwrite_r+0x166>
 800941c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009420:	1b5b      	subs	r3, r3, r5
 8009422:	44aa      	add	sl, r5
 8009424:	ebab 0b05 	sub.w	fp, fp, r5
 8009428:	f8c9 3008 	str.w	r3, [r9, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1c0      	bne.n	80093b2 <__sfvwrite_r+0x3e>
 8009430:	e7a7      	b.n	8009382 <__sfvwrite_r+0xe>
 8009432:	4621      	mov	r1, r4
 8009434:	4630      	mov	r0, r6
 8009436:	f000 f8e9 	bl	800960c <__swsetup_r>
 800943a:	2800      	cmp	r0, #0
 800943c:	d0ab      	beq.n	8009396 <__sfvwrite_r+0x22>
 800943e:	f04f 30ff 	mov.w	r0, #4294967295
 8009442:	e79f      	b.n	8009384 <__sfvwrite_r+0x10>
 8009444:	e9d8 a500 	ldrd	sl, r5, [r8]
 8009448:	f108 0808 	add.w	r8, r8, #8
 800944c:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 8009450:	69e1      	ldr	r1, [r4, #28]
 8009452:	2d00      	cmp	r5, #0
 8009454:	d0f6      	beq.n	8009444 <__sfvwrite_r+0xd0>
 8009456:	42bd      	cmp	r5, r7
 8009458:	462b      	mov	r3, r5
 800945a:	4652      	mov	r2, sl
 800945c:	bf28      	it	cs
 800945e:	463b      	movcs	r3, r7
 8009460:	4630      	mov	r0, r6
 8009462:	47d8      	blx	fp
 8009464:	2800      	cmp	r0, #0
 8009466:	dd38      	ble.n	80094da <__sfvwrite_r+0x166>
 8009468:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800946c:	1a1b      	subs	r3, r3, r0
 800946e:	4482      	add	sl, r0
 8009470:	1a2d      	subs	r5, r5, r0
 8009472:	f8c9 3008 	str.w	r3, [r9, #8]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e8      	bne.n	800944c <__sfvwrite_r+0xd8>
 800947a:	e782      	b.n	8009382 <__sfvwrite_r+0xe>
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	4f61      	ldr	r7, [pc, #388]	@ (8009608 <__sfvwrite_r+0x294>)
 8009482:	4655      	mov	r5, sl
 8009484:	e7e2      	b.n	800944c <__sfvwrite_r+0xd8>
 8009486:	e9d8 7a00 	ldrd	r7, sl, [r8]
 800948a:	f108 0808 	add.w	r8, r8, #8
 800948e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009492:	6820      	ldr	r0, [r4, #0]
 8009494:	68a2      	ldr	r2, [r4, #8]
 8009496:	f1ba 0f00 	cmp.w	sl, #0
 800949a:	d0f4      	beq.n	8009486 <__sfvwrite_r+0x112>
 800949c:	0599      	lsls	r1, r3, #22
 800949e:	d563      	bpl.n	8009568 <__sfvwrite_r+0x1f4>
 80094a0:	4552      	cmp	r2, sl
 80094a2:	d836      	bhi.n	8009512 <__sfvwrite_r+0x19e>
 80094a4:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 80094a8:	d033      	beq.n	8009512 <__sfvwrite_r+0x19e>
 80094aa:	6921      	ldr	r1, [r4, #16]
 80094ac:	6965      	ldr	r5, [r4, #20]
 80094ae:	eba0 0b01 	sub.w	fp, r0, r1
 80094b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094ba:	f10b 0201 	add.w	r2, fp, #1
 80094be:	106d      	asrs	r5, r5, #1
 80094c0:	4452      	add	r2, sl
 80094c2:	4295      	cmp	r5, r2
 80094c4:	bf38      	it	cc
 80094c6:	4615      	movcc	r5, r2
 80094c8:	055b      	lsls	r3, r3, #21
 80094ca:	d53d      	bpl.n	8009548 <__sfvwrite_r+0x1d4>
 80094cc:	4629      	mov	r1, r5
 80094ce:	4630      	mov	r0, r6
 80094d0:	f7fc f85a 	bl	8005588 <_malloc_r>
 80094d4:	b948      	cbnz	r0, 80094ea <__sfvwrite_r+0x176>
 80094d6:	230c      	movs	r3, #12
 80094d8:	6033      	str	r3, [r6, #0]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	e7ac      	b.n	800943e <__sfvwrite_r+0xca>
 80094e4:	461f      	mov	r7, r3
 80094e6:	469a      	mov	sl, r3
 80094e8:	e7d1      	b.n	800948e <__sfvwrite_r+0x11a>
 80094ea:	465a      	mov	r2, fp
 80094ec:	6921      	ldr	r1, [r4, #16]
 80094ee:	9001      	str	r0, [sp, #4]
 80094f0:	f7ff f82d 	bl	800854e <memcpy>
 80094f4:	89a2      	ldrh	r2, [r4, #12]
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80094fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009500:	81a2      	strh	r2, [r4, #12]
 8009502:	6123      	str	r3, [r4, #16]
 8009504:	6165      	str	r5, [r4, #20]
 8009506:	445b      	add	r3, fp
 8009508:	eba5 050b 	sub.w	r5, r5, fp
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	4652      	mov	r2, sl
 8009510:	60a5      	str	r5, [r4, #8]
 8009512:	4552      	cmp	r2, sl
 8009514:	bf28      	it	cs
 8009516:	4652      	movcs	r2, sl
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	9201      	str	r2, [sp, #4]
 800951c:	4639      	mov	r1, r7
 800951e:	f7fe fffc 	bl	800851a <memmove>
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	9a01      	ldr	r2, [sp, #4]
 8009526:	1a9b      	subs	r3, r3, r2
 8009528:	60a3      	str	r3, [r4, #8]
 800952a:	6823      	ldr	r3, [r4, #0]
 800952c:	4413      	add	r3, r2
 800952e:	4655      	mov	r5, sl
 8009530:	6023      	str	r3, [r4, #0]
 8009532:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8009536:	1b5b      	subs	r3, r3, r5
 8009538:	442f      	add	r7, r5
 800953a:	ebaa 0a05 	sub.w	sl, sl, r5
 800953e:	f8c9 3008 	str.w	r3, [r9, #8]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1a3      	bne.n	800948e <__sfvwrite_r+0x11a>
 8009546:	e71c      	b.n	8009382 <__sfvwrite_r+0xe>
 8009548:	462a      	mov	r2, r5
 800954a:	4630      	mov	r0, r6
 800954c:	f7ff f874 	bl	8008638 <_realloc_r>
 8009550:	4603      	mov	r3, r0
 8009552:	2800      	cmp	r0, #0
 8009554:	d1d5      	bne.n	8009502 <__sfvwrite_r+0x18e>
 8009556:	6921      	ldr	r1, [r4, #16]
 8009558:	4630      	mov	r0, r6
 800955a:	f7fb ff55 	bl	8005408 <_free_r>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7b6      	b.n	80094d6 <__sfvwrite_r+0x162>
 8009568:	6923      	ldr	r3, [r4, #16]
 800956a:	4283      	cmp	r3, r0
 800956c:	d302      	bcc.n	8009574 <__sfvwrite_r+0x200>
 800956e:	6961      	ldr	r1, [r4, #20]
 8009570:	4551      	cmp	r1, sl
 8009572:	d915      	bls.n	80095a0 <__sfvwrite_r+0x22c>
 8009574:	4552      	cmp	r2, sl
 8009576:	bf28      	it	cs
 8009578:	4652      	movcs	r2, sl
 800957a:	4639      	mov	r1, r7
 800957c:	4615      	mov	r5, r2
 800957e:	f7fe ffcc 	bl	800851a <memmove>
 8009582:	68a3      	ldr	r3, [r4, #8]
 8009584:	6822      	ldr	r2, [r4, #0]
 8009586:	1b5b      	subs	r3, r3, r5
 8009588:	442a      	add	r2, r5
 800958a:	60a3      	str	r3, [r4, #8]
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d1cf      	bne.n	8009532 <__sfvwrite_r+0x1be>
 8009592:	4621      	mov	r1, r4
 8009594:	4630      	mov	r0, r6
 8009596:	f7fd fd1b 	bl	8006fd0 <_fflush_r>
 800959a:	2800      	cmp	r0, #0
 800959c:	d0c9      	beq.n	8009532 <__sfvwrite_r+0x1be>
 800959e:	e79c      	b.n	80094da <__sfvwrite_r+0x166>
 80095a0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80095a4:	4553      	cmp	r3, sl
 80095a6:	bf28      	it	cs
 80095a8:	4653      	movcs	r3, sl
 80095aa:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80095ac:	fb93 f3f1 	sdiv	r3, r3, r1
 80095b0:	463a      	mov	r2, r7
 80095b2:	434b      	muls	r3, r1
 80095b4:	4630      	mov	r0, r6
 80095b6:	69e1      	ldr	r1, [r4, #28]
 80095b8:	47a8      	blx	r5
 80095ba:	1e05      	subs	r5, r0, #0
 80095bc:	dcb9      	bgt.n	8009532 <__sfvwrite_r+0x1be>
 80095be:	e78c      	b.n	80094da <__sfvwrite_r+0x166>
 80095c0:	e9d8 ab00 	ldrd	sl, fp, [r8]
 80095c4:	2000      	movs	r0, #0
 80095c6:	f108 0808 	add.w	r8, r8, #8
 80095ca:	e6f2      	b.n	80093b2 <__sfvwrite_r+0x3e>
 80095cc:	f10b 0701 	add.w	r7, fp, #1
 80095d0:	e6ff      	b.n	80093d2 <__sfvwrite_r+0x5e>
 80095d2:	4293      	cmp	r3, r2
 80095d4:	dc08      	bgt.n	80095e8 <__sfvwrite_r+0x274>
 80095d6:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80095d8:	69e1      	ldr	r1, [r4, #28]
 80095da:	4652      	mov	r2, sl
 80095dc:	4630      	mov	r0, r6
 80095de:	47a8      	blx	r5
 80095e0:	1e05      	subs	r5, r0, #0
 80095e2:	f73f af12 	bgt.w	800940a <__sfvwrite_r+0x96>
 80095e6:	e778      	b.n	80094da <__sfvwrite_r+0x166>
 80095e8:	4651      	mov	r1, sl
 80095ea:	9201      	str	r2, [sp, #4]
 80095ec:	f7fe ff95 	bl	800851a <memmove>
 80095f0:	9a01      	ldr	r2, [sp, #4]
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	1a9b      	subs	r3, r3, r2
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	4413      	add	r3, r2
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	4615      	mov	r5, r2
 8009600:	e703      	b.n	800940a <__sfvwrite_r+0x96>
 8009602:	2001      	movs	r0, #1
 8009604:	e70a      	b.n	800941c <__sfvwrite_r+0xa8>
 8009606:	bf00      	nop
 8009608:	7ffffc00 	.word	0x7ffffc00

0800960c <__swsetup_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4b29      	ldr	r3, [pc, #164]	@ (80096b4 <__swsetup_r+0xa8>)
 8009610:	4605      	mov	r5, r0
 8009612:	6818      	ldr	r0, [r3, #0]
 8009614:	460c      	mov	r4, r1
 8009616:	b118      	cbz	r0, 8009620 <__swsetup_r+0x14>
 8009618:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800961a:	b90b      	cbnz	r3, 8009620 <__swsetup_r+0x14>
 800961c:	f7fb fd76 	bl	800510c <__sinit>
 8009620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009624:	0719      	lsls	r1, r3, #28
 8009626:	d422      	bmi.n	800966e <__swsetup_r+0x62>
 8009628:	06da      	lsls	r2, r3, #27
 800962a:	d407      	bmi.n	800963c <__swsetup_r+0x30>
 800962c:	2209      	movs	r2, #9
 800962e:	602a      	str	r2, [r5, #0]
 8009630:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009634:	81a3      	strh	r3, [r4, #12]
 8009636:	f04f 30ff 	mov.w	r0, #4294967295
 800963a:	e033      	b.n	80096a4 <__swsetup_r+0x98>
 800963c:	0758      	lsls	r0, r3, #29
 800963e:	d512      	bpl.n	8009666 <__swsetup_r+0x5a>
 8009640:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009642:	b141      	cbz	r1, 8009656 <__swsetup_r+0x4a>
 8009644:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8009648:	4299      	cmp	r1, r3
 800964a:	d002      	beq.n	8009652 <__swsetup_r+0x46>
 800964c:	4628      	mov	r0, r5
 800964e:	f7fb fedb 	bl	8005408 <_free_r>
 8009652:	2300      	movs	r3, #0
 8009654:	6323      	str	r3, [r4, #48]	@ 0x30
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800965c:	81a3      	strh	r3, [r4, #12]
 800965e:	2300      	movs	r3, #0
 8009660:	6063      	str	r3, [r4, #4]
 8009662:	6923      	ldr	r3, [r4, #16]
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	6923      	ldr	r3, [r4, #16]
 8009670:	b94b      	cbnz	r3, 8009686 <__swsetup_r+0x7a>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009678:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800967c:	d003      	beq.n	8009686 <__swsetup_r+0x7a>
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f000 f848 	bl	8009716 <__smakebuf_r>
 8009686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968a:	f013 0201 	ands.w	r2, r3, #1
 800968e:	d00a      	beq.n	80096a6 <__swsetup_r+0x9a>
 8009690:	2200      	movs	r2, #0
 8009692:	60a2      	str	r2, [r4, #8]
 8009694:	6962      	ldr	r2, [r4, #20]
 8009696:	4252      	negs	r2, r2
 8009698:	61a2      	str	r2, [r4, #24]
 800969a:	6922      	ldr	r2, [r4, #16]
 800969c:	b942      	cbnz	r2, 80096b0 <__swsetup_r+0xa4>
 800969e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096a2:	d1c5      	bne.n	8009630 <__swsetup_r+0x24>
 80096a4:	bd38      	pop	{r3, r4, r5, pc}
 80096a6:	0799      	lsls	r1, r3, #30
 80096a8:	bf58      	it	pl
 80096aa:	6962      	ldrpl	r2, [r4, #20]
 80096ac:	60a2      	str	r2, [r4, #8]
 80096ae:	e7f4      	b.n	800969a <__swsetup_r+0x8e>
 80096b0:	2000      	movs	r0, #0
 80096b2:	e7f7      	b.n	80096a4 <__swsetup_r+0x98>
 80096b4:	20000018 	.word	0x20000018

080096b8 <abort>:
 80096b8:	b508      	push	{r3, lr}
 80096ba:	2006      	movs	r0, #6
 80096bc:	f000 f890 	bl	80097e0 <raise>
 80096c0:	2001      	movs	r0, #1
 80096c2:	f7f8 f9b0 	bl	8001a26 <_exit>

080096c6 <__swhatbuf_r>:
 80096c6:	b570      	push	{r4, r5, r6, lr}
 80096c8:	460c      	mov	r4, r1
 80096ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ce:	2900      	cmp	r1, #0
 80096d0:	b096      	sub	sp, #88	@ 0x58
 80096d2:	4615      	mov	r5, r2
 80096d4:	461e      	mov	r6, r3
 80096d6:	da07      	bge.n	80096e8 <__swhatbuf_r+0x22>
 80096d8:	89a1      	ldrh	r1, [r4, #12]
 80096da:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 80096de:	d117      	bne.n	8009710 <__swhatbuf_r+0x4a>
 80096e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096e4:	4608      	mov	r0, r1
 80096e6:	e00f      	b.n	8009708 <__swhatbuf_r+0x42>
 80096e8:	466a      	mov	r2, sp
 80096ea:	f000 f881 	bl	80097f0 <_fstat_r>
 80096ee:	2800      	cmp	r0, #0
 80096f0:	dbf2      	blt.n	80096d8 <__swhatbuf_r+0x12>
 80096f2:	9901      	ldr	r1, [sp, #4]
 80096f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096fc:	4259      	negs	r1, r3
 80096fe:	4159      	adcs	r1, r3
 8009700:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8009704:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009708:	6031      	str	r1, [r6, #0]
 800970a:	602b      	str	r3, [r5, #0]
 800970c:	b016      	add	sp, #88	@ 0x58
 800970e:	bd70      	pop	{r4, r5, r6, pc}
 8009710:	2100      	movs	r1, #0
 8009712:	2340      	movs	r3, #64	@ 0x40
 8009714:	e7e6      	b.n	80096e4 <__swhatbuf_r+0x1e>

08009716 <__smakebuf_r>:
 8009716:	898b      	ldrh	r3, [r1, #12]
 8009718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800971a:	079d      	lsls	r5, r3, #30
 800971c:	4606      	mov	r6, r0
 800971e:	460c      	mov	r4, r1
 8009720:	d507      	bpl.n	8009732 <__smakebuf_r+0x1c>
 8009722:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8009726:	6023      	str	r3, [r4, #0]
 8009728:	6123      	str	r3, [r4, #16]
 800972a:	2301      	movs	r3, #1
 800972c:	6163      	str	r3, [r4, #20]
 800972e:	b003      	add	sp, #12
 8009730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009732:	ab01      	add	r3, sp, #4
 8009734:	466a      	mov	r2, sp
 8009736:	f7ff ffc6 	bl	80096c6 <__swhatbuf_r>
 800973a:	9f00      	ldr	r7, [sp, #0]
 800973c:	4605      	mov	r5, r0
 800973e:	4639      	mov	r1, r7
 8009740:	4630      	mov	r0, r6
 8009742:	f7fb ff21 	bl	8005588 <_malloc_r>
 8009746:	b948      	cbnz	r0, 800975c <__smakebuf_r+0x46>
 8009748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800974c:	059a      	lsls	r2, r3, #22
 800974e:	d4ee      	bmi.n	800972e <__smakebuf_r+0x18>
 8009750:	f023 0303 	bic.w	r3, r3, #3
 8009754:	f043 0302 	orr.w	r3, r3, #2
 8009758:	81a3      	strh	r3, [r4, #12]
 800975a:	e7e2      	b.n	8009722 <__smakebuf_r+0xc>
 800975c:	89a3      	ldrh	r3, [r4, #12]
 800975e:	6020      	str	r0, [r4, #0]
 8009760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009764:	81a3      	strh	r3, [r4, #12]
 8009766:	9b01      	ldr	r3, [sp, #4]
 8009768:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800976c:	b15b      	cbz	r3, 8009786 <__smakebuf_r+0x70>
 800976e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009772:	4630      	mov	r0, r6
 8009774:	f000 f84e 	bl	8009814 <_isatty_r>
 8009778:	b128      	cbz	r0, 8009786 <__smakebuf_r+0x70>
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f023 0303 	bic.w	r3, r3, #3
 8009780:	f043 0301 	orr.w	r3, r3, #1
 8009784:	81a3      	strh	r3, [r4, #12]
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	431d      	orrs	r5, r3
 800978a:	81a5      	strh	r5, [r4, #12]
 800978c:	e7cf      	b.n	800972e <__smakebuf_r+0x18>

0800978e <_raise_r>:
 800978e:	291f      	cmp	r1, #31
 8009790:	b538      	push	{r3, r4, r5, lr}
 8009792:	4605      	mov	r5, r0
 8009794:	460c      	mov	r4, r1
 8009796:	d904      	bls.n	80097a2 <_raise_r+0x14>
 8009798:	2316      	movs	r3, #22
 800979a:	6003      	str	r3, [r0, #0]
 800979c:	f04f 30ff 	mov.w	r0, #4294967295
 80097a0:	bd38      	pop	{r3, r4, r5, pc}
 80097a2:	f8d0 2138 	ldr.w	r2, [r0, #312]	@ 0x138
 80097a6:	b112      	cbz	r2, 80097ae <_raise_r+0x20>
 80097a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ac:	b94b      	cbnz	r3, 80097c2 <_raise_r+0x34>
 80097ae:	4628      	mov	r0, r5
 80097b0:	f000 f852 	bl	8009858 <_getpid_r>
 80097b4:	4622      	mov	r2, r4
 80097b6:	4601      	mov	r1, r0
 80097b8:	4628      	mov	r0, r5
 80097ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097be:	f000 b839 	b.w	8009834 <_kill_r>
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d00a      	beq.n	80097dc <_raise_r+0x4e>
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	d103      	bne.n	80097d2 <_raise_r+0x44>
 80097ca:	2316      	movs	r3, #22
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	2001      	movs	r0, #1
 80097d0:	e7e6      	b.n	80097a0 <_raise_r+0x12>
 80097d2:	2100      	movs	r1, #0
 80097d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097d8:	4620      	mov	r0, r4
 80097da:	4798      	blx	r3
 80097dc:	2000      	movs	r0, #0
 80097de:	e7df      	b.n	80097a0 <_raise_r+0x12>

080097e0 <raise>:
 80097e0:	4b02      	ldr	r3, [pc, #8]	@ (80097ec <raise+0xc>)
 80097e2:	4601      	mov	r1, r0
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f7ff bfd2 	b.w	800978e <_raise_r>
 80097ea:	bf00      	nop
 80097ec:	20000018 	.word	0x20000018

080097f0 <_fstat_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	@ (8009810 <_fstat_r+0x20>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	f7f8 f962 	bl	8001ac6 <_fstat>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	d102      	bne.n	800980c <_fstat_r+0x1c>
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	b103      	cbz	r3, 800980c <_fstat_r+0x1c>
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	bf00      	nop
 8009810:	2000092c 	.word	0x2000092c

08009814 <_isatty_r>:
 8009814:	b538      	push	{r3, r4, r5, lr}
 8009816:	4d06      	ldr	r5, [pc, #24]	@ (8009830 <_isatty_r+0x1c>)
 8009818:	2300      	movs	r3, #0
 800981a:	4604      	mov	r4, r0
 800981c:	4608      	mov	r0, r1
 800981e:	602b      	str	r3, [r5, #0]
 8009820:	f7f8 f961 	bl	8001ae6 <_isatty>
 8009824:	1c43      	adds	r3, r0, #1
 8009826:	d102      	bne.n	800982e <_isatty_r+0x1a>
 8009828:	682b      	ldr	r3, [r5, #0]
 800982a:	b103      	cbz	r3, 800982e <_isatty_r+0x1a>
 800982c:	6023      	str	r3, [r4, #0]
 800982e:	bd38      	pop	{r3, r4, r5, pc}
 8009830:	2000092c 	.word	0x2000092c

08009834 <_kill_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	4d07      	ldr	r5, [pc, #28]	@ (8009854 <_kill_r+0x20>)
 8009838:	2300      	movs	r3, #0
 800983a:	4604      	mov	r4, r0
 800983c:	4608      	mov	r0, r1
 800983e:	4611      	mov	r1, r2
 8009840:	602b      	str	r3, [r5, #0]
 8009842:	f7f8 f8e0 	bl	8001a06 <_kill>
 8009846:	1c43      	adds	r3, r0, #1
 8009848:	d102      	bne.n	8009850 <_kill_r+0x1c>
 800984a:	682b      	ldr	r3, [r5, #0]
 800984c:	b103      	cbz	r3, 8009850 <_kill_r+0x1c>
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	bd38      	pop	{r3, r4, r5, pc}
 8009852:	bf00      	nop
 8009854:	2000092c 	.word	0x2000092c

08009858 <_getpid_r>:
 8009858:	f7f8 b8cd 	b.w	80019f6 <_getpid>

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
