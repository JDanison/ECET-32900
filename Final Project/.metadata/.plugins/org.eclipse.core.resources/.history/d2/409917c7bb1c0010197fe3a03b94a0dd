#ifndef BH1750_STM32_H
#define BH1750_STM32_H

#include "stm32l4xx_hal.h"

// Sensor modes (equivalent to C++ enum)
typedef enum {
  BH1750_UNCONFIGURED = 0,
  BH1750_CONTINUOUS_HIGH_RES_MODE = 0x10,
  BH1750_CONTINUOUS_HIGH_RES_MODE_2 = 0x11,
  BH1750_CONTINUOUS_LOW_RES_MODE = 0x13,
  BH1750_ONE_TIME_HIGH_RES_MODE = 0x20,
  BH1750_ONE_TIME_HIGH_RES_MODE_2 = 0x21,
  BH1750_ONE_TIME_LOW_RES_MODE = 0x23
} BH1750_Mode;

// Sensor configuration struct (replaces C++ class)
typedef struct {
  uint8_t addr;
  uint8_t mtreg;
  BH1750_Mode mode;
  I2C_HandleTypeDef *hi2c;
  uint32_t lastReadTimestamp;
  const float convFactor;
} BH1750;

// Default settings
#define BH1750_DEFAULT_ADDR 0x23
#define BH1750_DEFAULT_MTREG 69
#define BH1750_MTREG_MIN 31
#define BH1750_MTREG_MAX 254

// Public functions
void BH1750_Init(BH1750 *sensor, uint8_t addr, I2C_HandleTypeDef *hi2c);
uint8_t BH1750_Begin(BH1750 *sensor, BH1750_Mode mode);
uint8_t BH1750_Configure(BH1750 *sensor, BH1750_Mode mode);
uint8_t BH1750_SetMTreg(BH1750 *sensor, uint8_t mtreg);
uint8_t BH1750_MeasurementReady(BH1750 *sensor, uint8_t maxWait);
float BH1750_ReadLightLevel(BH1750 *sensor);

#endif
